package consensus

import (
	consensus "github.com/hyperchain/hyperchain/core/ledger/codec/consensus/types"
	"github.com/hyperchain/hyperchain/core/types"

	"github.com/golang/protobuf/proto"
)

// ConEncoder is the encoder for transaction that used in consensus comparison
type ConEncoder struct{}

// EncodeTransaction generated bytes only used in consensus comparison
func (con *ConEncoder) EncodeTransaction(transaction *types.Transaction) ([]byte, error) {
	// There use transaction's signature directly
	// Since the same signature means the consensus field of both are equal.
	return proto.Marshal(&consensus.ConsensusTransaction{
		From:      transaction.From,
		To:        transaction.To,
		Value:     transaction.Value,
		Timestamp: transaction.Timestamp,
		Nonce:     transaction.Nonce,
	})

}

// EncodeReceipt generated bytes only used in consensus comparison
func (con *ConEncoder) EncodeReceipt(receipt *types.Receipt) ([]byte, error) {
	return proto.Marshal(&consensus.ConsensusReceipt{
		GasUsed: receipt.GasUsed, // Is this field necessary for consensus comparison
		Ret:     receipt.Ret,
		Logs:    receipt.Logs,
	})
}
