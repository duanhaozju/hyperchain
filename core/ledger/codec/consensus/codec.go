package consensus

import (
	"encoding/json"

	"hyperchain/core/types"
)

// ConEncoder is the encoder for transaction that used in consensus comparison
type ConEncoder struct{}

// EncodeTransaction generated bytes only used in consensus comparison
func (con *ConEncoder) EncodeTransaction(transaction *types.Transaction) ([]byte, error) {
	// There use transaction's signature directly
	// Since the same signature means the consensus field of both are equal.
	type ConsensusTransaction struct {
		From      []byte `json:"from,omitempty"`
		To        []byte `json:"to,omitempty"`
		Value     []byte `json:"value,omitempty"`
		Timestamp int64  `json:"timestamp,omitempty"`
		Nonce     int64  `json:"nonce,omitempty"`
	}

	return json.Marshal(&ConsensusTransaction{
		From:      transaction.From,
		To:        transaction.To,
		Value:     transaction.Value,
		Timestamp: transaction.Timestamp,
		Nonce:     transaction.Nonce,
	})
}

// EncodeReceipt generated bytes only used in consensus comparison
func (con *ConEncoder) EncodeReceipt(receipt *types.Receipt) ([]byte, error) {
	type ConsenusReceipt struct {
		GasUsed int64  `json:"GasUsed,omitempty"`
		Ret     []byte `json:"Ret,omitempty"`
		Logs    []byte `json:"Logs,omitempty"`
	}
	return json.Marshal(&ConsenusReceipt{
		GasUsed: receipt.GasUsed, // Is this field necessary for consensus comparison
		Ret:     receipt.Ret,
		Logs:    receipt.Logs,
	})
}
