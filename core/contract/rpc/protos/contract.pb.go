// Code generated by protoc-gen-go.
// source: contract.proto
// DO NOT EDIT!

/*
Package contract is a generated protocol buffer package.

It is generated from these files:
	contract.proto

It has these top-level messages:
	InvokeRequest
	InvokeResponse
*/
package contract

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InvokeRequest_Type int32

const (
	InvokeRequest_INVOKE_CONTRACT InvokeRequest_Type = 0
	InvokeRequest_HEARTBEAT       InvokeRequest_Type = 1
)

var InvokeRequest_Type_name = map[int32]string{
	0: "INVOKE_CONTRACT",
	1: "HEARTBEAT",
}
var InvokeRequest_Type_value = map[string]int32{
	"INVOKE_CONTRACT": 0,
	"HEARTBEAT":       1,
}

func (x InvokeRequest_Type) String() string {
	return proto.EnumName(InvokeRequest_Type_name, int32(x))
}
func (InvokeRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type InvokeRequest struct {
	Type   InvokeRequest_Type `protobuf:"varint,1,opt,name=type,enum=InvokeRequest_Type" json:"type,omitempty"`
	Method string             `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	Args   [][]byte           `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *InvokeRequest) Reset()                    { *m = InvokeRequest{} }
func (m *InvokeRequest) String() string            { return proto.CompactTextString(m) }
func (*InvokeRequest) ProtoMessage()               {}
func (*InvokeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type InvokeResponse struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Result []byte `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *InvokeResponse) Reset()                    { *m = InvokeResponse{} }
func (m *InvokeResponse) String() string            { return proto.CompactTextString(m) }
func (*InvokeResponse) ProtoMessage()               {}
func (*InvokeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*InvokeRequest)(nil), "InvokeRequest")
	proto.RegisterType((*InvokeResponse)(nil), "InvokeResponse")
	proto.RegisterEnum("InvokeRequest_Type", InvokeRequest_Type_name, InvokeRequest_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Contract service

type ContractClient interface {
	Execute(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*InvokeResponse, error)
	HeartBeat(ctx context.Context, opts ...grpc.CallOption) (Contract_HeartBeatClient, error)
}

type contractClient struct {
	cc *grpc.ClientConn
}

func NewContractClient(cc *grpc.ClientConn) ContractClient {
	return &contractClient{cc}
}

func (c *contractClient) Execute(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*InvokeResponse, error) {
	out := new(InvokeResponse)
	err := grpc.Invoke(ctx, "/Contract/Execute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) HeartBeat(ctx context.Context, opts ...grpc.CallOption) (Contract_HeartBeatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Contract_serviceDesc.Streams[0], c.cc, "/Contract/HeartBeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &contractHeartBeatClient{stream}
	return x, nil
}

type Contract_HeartBeatClient interface {
	Send(*InvokeRequest) error
	Recv() (*InvokeResponse, error)
	grpc.ClientStream
}

type contractHeartBeatClient struct {
	grpc.ClientStream
}

func (x *contractHeartBeatClient) Send(m *InvokeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contractHeartBeatClient) Recv() (*InvokeResponse, error) {
	m := new(InvokeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Contract service

type ContractServer interface {
	Execute(context.Context, *InvokeRequest) (*InvokeResponse, error)
	HeartBeat(Contract_HeartBeatServer) error
}

func RegisterContractServer(s *grpc.Server, srv ContractServer) {
	s.RegisterService(&_Contract_serviceDesc, srv)
}

func _Contract_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).Execute(ctx, req.(*InvokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_HeartBeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContractServer).HeartBeat(&contractHeartBeatServer{stream})
}

type Contract_HeartBeatServer interface {
	Send(*InvokeResponse) error
	Recv() (*InvokeRequest, error)
	grpc.ServerStream
}

type contractHeartBeatServer struct {
	grpc.ServerStream
}

func (x *contractHeartBeatServer) Send(m *InvokeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contractHeartBeatServer) Recv() (*InvokeRequest, error) {
	m := new(InvokeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Contract_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Contract",
	HandlerType: (*ContractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _Contract_Execute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HeartBeat",
			Handler:       _Contract_HeartBeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("contract.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x90, 0x41, 0x6b, 0xbb, 0x40,
	0x10, 0xc5, 0xb3, 0x46, 0xf2, 0x8f, 0x43, 0x62, 0xc2, 0xe4, 0x4f, 0x91, 0x9e, 0xc4, 0x4b, 0xa5,
	0x94, 0xa5, 0xd8, 0x4b, 0xaf, 0x2a, 0x42, 0x42, 0x21, 0x81, 0x45, 0x7a, 0x2d, 0x5b, 0x3b, 0xa4,
	0xd4, 0xd4, 0xb5, 0xeb, 0x1a, 0x9a, 0x6f, 0xd1, 0x8f, 0x5c, 0x22, 0xe6, 0xe0, 0xad, 0xb7, 0x7d,
	0xec, 0x9b, 0xf9, 0xcd, 0x7b, 0xe0, 0x16, 0xaa, 0x32, 0x5a, 0x16, 0x86, 0xd7, 0x5a, 0x19, 0x15,
	0xfc, 0x30, 0x98, 0x6f, 0xaa, 0xa3, 0x2a, 0x49, 0xd0, 0x57, 0x4b, 0x8d, 0xc1, 0x1b, 0xb0, 0xcd,
	0xa9, 0x26, 0x8f, 0xf9, 0x2c, 0x74, 0xa3, 0x15, 0x1f, 0xfc, 0xf2, 0xfc, 0x54, 0x93, 0xe8, 0x0c,
	0x78, 0x05, 0x93, 0x4f, 0x32, 0xef, 0xea, 0xcd, 0xb3, 0x7c, 0x16, 0x3a, 0xa2, 0x57, 0x88, 0x60,
	0x4b, 0xbd, 0x6f, 0xbc, 0xb1, 0x3f, 0x0e, 0x67, 0xa2, 0x7b, 0x07, 0xb7, 0x60, 0x9f, 0x27, 0x71,
	0x05, 0x8b, 0xcd, 0xf6, 0x79, 0xf7, 0x94, 0xbd, 0xa4, 0xbb, 0x6d, 0x2e, 0xe2, 0x34, 0x5f, 0x8e,
	0x70, 0x0e, 0xce, 0x3a, 0x8b, 0x45, 0x9e, 0x64, 0x71, 0xbe, 0x64, 0xc1, 0x23, 0xb8, 0x17, 0x66,
	0x53, 0xab, 0xaa, 0x21, 0x74, 0xc1, 0x52, 0x65, 0x77, 0xd0, 0x54, 0x58, 0xaa, 0x3c, 0x93, 0x35,
	0x35, 0xed, 0xc1, 0x74, 0xe4, 0x99, 0xe8, 0x55, 0x74, 0x80, 0x69, 0xda, 0xc7, 0xc3, 0x3b, 0xf8,
	0x97, 0x7d, 0x53, 0xd1, 0x1a, 0x42, 0x77, 0x98, 0xe1, 0x7a, 0xc1, 0x87, 0xfb, 0x83, 0x11, 0x46,
	0xe0, 0xac, 0x49, 0x6a, 0x93, 0x90, 0x34, 0x7f, 0xf0, 0x87, 0xec, 0x9e, 0x25, 0xff, 0x01, 0x3f,
	0xe4, 0x51, 0xf2, 0xbd, 0xae, 0x0b, 0x7e, 0xa9, 0xf5, 0x75, 0xd2, 0xf5, 0xfa, 0xf0, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0x0f, 0x1b, 0x3c, 0xd4, 0x69, 0x01, 0x00, 0x00,
}
