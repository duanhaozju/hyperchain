// Code generated by protoc-gen-go.
// source: contract.proto
// DO NOT EDIT!

/*
Package contract is a generated protocol buffer package.

It is generated from these files:
	contract.proto

It has these top-level messages:
	Request
	Response
*/
package contract

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Method string   `protobuf:"bytes,1,opt,name=method" json:"method,omitempty"`
	Args   [][]byte `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Response struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Result []byte `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*Response)(nil), "Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
//const _ = grpc.SupportPackageIsVersion3

// Client API for Contract service

type ContractClient interface {
	Execute(ctx context.Context, opts ...grpc.CallOption) (Contract_ExecuteClient, error)
	HeartBeat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type contractClient struct {
	cc *grpc.ClientConn
}

func NewContractClient(cc *grpc.ClientConn) ContractClient {
	return &contractClient{cc}
}

func (c *contractClient) Execute(ctx context.Context, opts ...grpc.CallOption) (Contract_ExecuteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Contract_serviceDesc.Streams[0], c.cc, "/Contract/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &contractExecuteClient{stream}
	return x, nil
}

type Contract_ExecuteClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type contractExecuteClient struct {
	grpc.ClientStream
}

func (x *contractExecuteClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contractExecuteClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contractClient) HeartBeat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/Contract/HeartBeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Contract service

type ContractServer interface {
	Execute(Contract_ExecuteServer) error
	HeartBeat(context.Context, *Request) (*Response, error)
}

func RegisterContractServer(s *grpc.Server, srv ContractServer) {
	s.RegisterService(&_Contract_serviceDesc, srv)
}

func _Contract_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContractServer).Execute(&contractExecuteServer{stream})
}

type Contract_ExecuteServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type contractExecuteServer struct {
	grpc.ServerStream
}

func (x *contractExecuteServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contractExecuteServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Contract_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).HeartBeat(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Contract_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Contract",
	HandlerType: (*ContractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeat",
			Handler:    _Contract_HeartBeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _Contract_Execute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("contract.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x8f, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x4d, 0x94, 0xdd, 0x74, 0x58, 0xf7, 0x10, 0x44, 0x8a, 0xa7, 0x12, 0x04, 0x73, 0x0a,
	0x52, 0xf1, 0x05, 0x2a, 0x82, 0xc7, 0x12, 0x7c, 0x81, 0x18, 0x07, 0x2b, 0xd5, 0xa4, 0x26, 0x53,
	0xd0, 0xb7, 0x97, 0xd6, 0xf4, 0xe8, 0x6d, 0x3e, 0x66, 0xe6, 0xff, 0x66, 0xe0, 0xe8, 0x63, 0xa0,
	0xe4, 0x3c, 0x99, 0x29, 0x45, 0x8a, 0xea, 0x1e, 0xf6, 0x16, 0xbf, 0x66, 0xcc, 0x24, 0x2f, 0x61,
	0xf7, 0x89, 0x34, 0xc4, 0xd7, 0x9a, 0x35, 0x4c, 0x57, 0xb6, 0x90, 0x94, 0x70, 0xe6, 0xd2, 0x5b,
	0xae, 0x79, 0x73, 0xaa, 0x0f, 0x76, 0xad, 0x55, 0x0b, 0xc2, 0x62, 0x9e, 0x62, 0xc8, 0x28, 0x8f,
	0xc0, 0xe3, 0xb8, 0xee, 0x08, 0xcb, 0xe3, 0xb8, 0xe4, 0x24, 0xcc, 0xf3, 0x07, 0xd5, 0xbc, 0x61,
	0xfa, 0x60, 0x0b, 0xb5, 0xcf, 0x20, 0x1e, 0x8a, 0x5c, 0x5e, 0xc3, 0xfe, 0xf1, 0x1b, 0xfd, 0x4c,
	0x28, 0x85, 0x29, 0x07, 0x5c, 0x55, 0x66, 0xcb, 0x54, 0x27, 0x9a, 0xdd, 0x32, 0xa9, 0xa0, 0x7a,
	0x42, 0x97, 0xa8, 0x43, 0x47, 0xff, 0xcc, 0x75, 0x37, 0x70, 0xe1, 0x83, 0x19, 0x7e, 0x26, 0x4c,
	0x7e, 0x70, 0xef, 0xe1, 0xef, 0xaf, 0xdc, 0x9d, 0x6f, 0xae, 0x7e, 0xe1, 0x9e, 0xbd, 0xec, 0xd6,
	0xc6, 0xdd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0x87, 0x82, 0xf3, 0x02, 0x01, 0x00, 0x00,
}
