contract HmEncryption{
    address admin;
    uint nsquare = 204940062494628260128356353732290481689;


    mapping(address => uint) userBalance;
    mapping(address => TransactionInfo[]) userTransactionRecord;

    mapping(address => EccAmount[]) payAllBillings;
    mapping(address => EccAmount[]) receiverAllBillings;

    struct EccAmount {
        bytes32 Eccamount1;
        bytes32 Eccamount2;
        bytes32 Eccamount3;
    }

    struct TransactionInfo {
        uint HmTransferAmount;
        bytes32 EccRecTransferAmount1;
        bytes32 EccRecTransferAmount2;
        bytes32 EccRecTransferAmount3;
    }

    function HmEncryption(){
        admin = msg.sender;
    }

    function GetNsquare()returns(uint){
        return nsquare;
    }

    function HmAdd(uint elem1, uint elem2) internal returns(uint){
        if(elem1==0) {
            elem1 = 1;
        }
        if(elem2==0) {
            elem2 = 1;
        }
        return (elem1*elem2)%nsquare;
    }


    function SetUserBalance(uint HmUserAmount,bytes32 EccUserAmount1,bytes32 EccUserAmount2,bytes32 EccUserAmount3)returns(bool){
        EccAmount memory eccamount ;
        if(msg.sender==admin){
            if(userBalance[msg.sender] == 0x0){
            userBalance[msg.sender] = HmUserAmount;

            eccamount.Eccamount1 = EccUserAmount1;
            eccamount.Eccamount2 = EccUserAmount2;
            eccamount.Eccamount3 = EccUserAmount3;

            receiverAllBillings[msg.sender].push(eccamount);
                return true;
            }else{
            userBalance[msg.sender] = HmAdd(userBalance[msg.sender],HmUserAmount);

            eccamount.Eccamount1 = EccUserAmount1;
            eccamount.Eccamount2 = EccUserAmount2;
            eccamount.Eccamount3 = EccUserAmount3;
            receiverAllBillings[msg.sender].push(eccamount);
                return true;
            }
        }else{
            return false;
        }

    }


    function Transfer(uint HmTransferAmount,uint HmRemainAmount,
        bytes32 EccRecTransferAmount1,bytes32 EccRecTransferAmount2,bytes32 EccRecTransferAmount3,
        bytes32 EccPayTransferAmount1,bytes32 EccPayTransferAmount2,bytes32 EccPayTransferAmount3,
        address receiver)returns(uint,bool){

        uint sum;
        sum = HmAdd(HmTransferAmount,HmRemainAmount);

        if(sum==userBalance[msg.sender]){
            EccAmount memory RecEccamount ;

            RecEccamount.Eccamount1 = EccRecTransferAmount1;
            RecEccamount.Eccamount2 = EccRecTransferAmount2;
            RecEccamount.Eccamount3 = EccRecTransferAmount3;



            userBalance[msg.sender] = HmRemainAmount;

            userBalance[receiver] = HmAdd(userBalance[receiver],HmTransferAmount);

            AddPayAllBillings(msg.sender,EccPayTransferAmount1,EccPayTransferAmount2,EccPayTransferAmount3);

            receiverAllBillings[receiver].push(RecEccamount);

            TransactionInfo memory temp ;
            temp.HmTransferAmount = HmTransferAmount;
            temp.EccRecTransferAmount1 = EccRecTransferAmount1;
            temp.EccRecTransferAmount2 = EccRecTransferAmount2;
            temp.EccRecTransferAmount3 = EccRecTransferAmount3;
            userTransactionRecord[receiver].push(temp);
            return (sum,true);
        }else{
            return (sum,false);
        }

    }

    function AddPayAllBillings (address payer,bytes32 EccPayTransferAmount1,bytes32 EccPayTransferAmount2,bytes32 EccPayTransferAmount3) internal{
        EccAmount memory PayEccamount ;
        PayEccamount.Eccamount1 = EccPayTransferAmount1;
        PayEccamount.Eccamount2 = EccPayTransferAmount2;
        PayEccamount.Eccamount3 = EccPayTransferAmount3;
        payAllBillings[payer].push(PayEccamount);
    }



    function GetUserAllBills()returns(bytes32[],bytes32[],bytes32[],bytes32[],bytes32[],bytes32[]){

        uint len1 = payAllBillings[msg.sender].length;
        uint len2 = receiverAllBillings[msg.sender].length;

        bytes32[] memory payBills1 = new bytes32[](len1);
        bytes32[] memory payBills2 = new bytes32[](len1);
        bytes32[] memory payBills3 = new bytes32[](len1);

        bytes32[] memory recBills1 = new bytes32[](len2);
        bytes32[] memory recBills2 = new bytes32[](len2);
        bytes32[] memory recBills3 = new bytes32[](len2);

        for(uint i=0;i<len1;i++){
            payBills1[i] = payAllBillings[msg.sender][i].Eccamount1;
            payBills2[i] = payAllBillings[msg.sender][i].Eccamount2;
            payBills3[i] = payAllBillings[msg.sender][i].Eccamount3;
        }

        for(uint j=0;j<len2;j++){
            recBills1[j] =  receiverAllBillings[msg.sender][j].Eccamount1;
            recBills2[j] =  receiverAllBillings[msg.sender][j].Eccamount2;
            recBills3[j] =  receiverAllBillings[msg.sender][j].Eccamount3;
        }

        return (payBills1,payBills2,payBills3,recBills1,recBills2,recBills3);

    }



    function GetUserBalance(address userAddress)returns(bool,uint){
        if(userBalance[userAddress]==0){
            return (false,0);
        }
        else{
            return (true,userBalance[userAddress]);
        }

    }

    function GetMessage()returns(uint[],bytes32[],bytes32[],bytes32[]){
        TransactionInfo[] temp = userTransactionRecord[msg.sender];
        uint len = temp.length;
        uint[] memory HmTransferAmounts = new uint[](len);

        bytes32[] memory EccTransferAmounts1 = new bytes32[](len);
        bytes32[] memory EccTransferAmounts2 = new bytes32[](len);
        bytes32[] memory EccTransferAmounts3 = new bytes32[](len);
        for(uint i=0;i<len;i++){
            HmTransferAmounts[i] = temp[i].HmTransferAmount;
            EccTransferAmounts1[i] = temp[i].EccRecTransferAmount1;
            EccTransferAmounts2[i] = temp[i].EccRecTransferAmount2;
            EccTransferAmounts3[i] = temp[i].EccRecTransferAmount3;
        }
        userTransactionRecord[msg.sender].length = 0;
        return (HmTransferAmounts,EccTransferAmounts1,EccTransferAmounts2,EccTransferAmounts3);
    }

}