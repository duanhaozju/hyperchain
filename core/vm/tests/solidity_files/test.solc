contract weiwei{
   struct NameList{
       string name;
       address[] AddressList;
   }
   mapping(uint256 => NameList) nameListMap;
   uint256 length = 0;
   string[] stringList;
   string temp_name_list = "";

   function weiwei(){}

   function setNameList(string temp_name,address temp_addr){
       for(uint256 i=0;i<length;i++){
           if(stringsEqual(nameListMap[i].name,temp_name)){
               nameListMap[i].AddressList.push(temp_addr);
               return;
           }
       }
       nameListMap[length].name = temp_name;
       nameListMap[length].AddressList.push(temp_addr);
       length++;
   }

   function getNameListsByName(string temp_name) returns(address[]){
       for(uint256 i=0;i<length;i++){
           if(stringsEqual(nameListMap[i].name,temp_name)){
              return nameListMap[i].AddressList;
           }
       }
  }

   function getNameLists() returns(string){
       setNameList("hehe",msg.sender);
       temp_name_list = "";
       for(uint256 i=0;i<length;i++){
           temp_name_list = strConcat(temp_name_list,",",nameListMap[i].name);
       }
       return temp_name_list;

   }

    function stringsEqual(string storage _a, string memory _b) internal returns (bool) {
       bytes storage a = bytes(_a);
       bytes memory b = bytes(_b);
       if (a.length != b.length)
           return false;
       // @todo unroll this loop
       for (uint i = 0; i < a.length; i ++)
           if (a[i] != b[i])
               return false;
       return true;
   }

   // todo optimize the method
   function strConcat(string _a, string _b, string _c) internal returns (string){
       bytes memory _ba = bytes(_a);
       bytes memory _bb = bytes(_b);
       bytes memory _bc = bytes(_c);
       string memory abcde = new string(_ba.length + _bb.length + _bc.length);
       bytes memory babcde = bytes(abcde);
       uint k = 0;
       for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];
       for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];
       for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];
       return string(babcde);
   }
}