syntax = "proto3";

option java_multiple_files = false;
option java_package = "cn.hyperchain.protos";
option java_outer_classname = "ContractProto";

service Contract {
    //HeartBeat used to detect the health of server
    rpc HeartBeat(Request) returns (Response) {}

    //Interface that provides support to jvm execution which will estabilish a stream between Server
    //and Client. Message type provide the context necessary for server to respond appropriately.
    rpc Register(stream Message) returns(stream Message) {}
}

//Message is the wrapper of specific message
message Message {

    enum Type {
        UNDEFINED = 0;
        REGISTER = 1;
        TRANSACTION = 2;
        GET = 3;
        PUT = 4;
        DELETE = 5;
        BATCH_READ = 6;
        BATCH_WRITE = 7;
        RANGE_QUERY = 8;
        POST_EVENT = 9;
        RESPONSE = 10;
        HEART_BEAT = 11;
    }

    Type type = 1;
    bytes   payload = 2;
}

message Request {
    RequestContext context = 1;
    string method = 2;
    repeated bytes args = 3;
}

message Response {
    bool  ok     = 1;
    bytes result = 2;
    string codeHash = 3;
}


message RequestContext {
    string txid   = 1;
    string namespace = 2;
    string cid = 3;
    string invoker = 4;
    uint64 blockNumber = 5;
}

service Ledger {
    rpc Get(Key) returns (Value) {}
    rpc Put(KeyValue) returns(Response) {}
    rpc Delete(Key) returns(Response) {}

    rpc BatchRead(BatchKey) returns(BathValue) {}
    rpc BatchWrite(BatchKV) returns(Response) {}
    rpc RangeQuery(Range) returns(stream BathValue) {}

    rpc Post(Event) returns (Response) {}
    rpc Register(stream Message) returns(stream Message) {}

}

message Event {
    LedgerContext context = 1;
    repeated bytes topics = 2;
    bytes body = 3;
}

message Key {
    LedgerContext context = 1;
    bytes k = 2;
}

//BatchKey used to fetch data by batch
message BatchKey {
    LedgerContext context = 1;
    repeated bytes k = 2;
}

//BathKV bach result
message BathValue {
    string id = 1;
    bool hasMore = 2;
    repeated bytes v = 3;
}

message BatchKV {
    LedgerContext context = 1;
    repeated KeyValue kv = 2;
}

//Range specifiy query range
message Range {
    LedgerContext context = 1;
    bytes start = 2;
    bytes end = 3;
}

message Value{
    string id = 1;
    bytes v   =2;
}

message KeyValue {
    LedgerContext context = 1;
    bytes k = 2;
    bytes v = 3;
}

message LedgerContext {
    string txid   = 1;
    string namespace = 2;
    string cid = 3;
    uint64  blockNumber = 4;
}
