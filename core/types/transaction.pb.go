// Code generated by protoc-gen-go.
// source: transaction.proto
// DO NOT EDIT!

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InvalidTransactionRecord_ErrType int32

const (
	InvalidTransactionRecord_OUTOFBALANCE           InvalidTransactionRecord_ErrType = 0
	InvalidTransactionRecord_SIGFAILED              InvalidTransactionRecord_ErrType = 1
	InvalidTransactionRecord_INVOKE_CONTRACT_FAILED InvalidTransactionRecord_ErrType = 2
	InvalidTransactionRecord_DEPLOY_CONTRACT_FAILED InvalidTransactionRecord_ErrType = 3
	InvalidTransactionRecord_INVALID_PERMISSION     InvalidTransactionRecord_ErrType = 4
)

var InvalidTransactionRecord_ErrType_name = map[int32]string{
	0: "OUTOFBALANCE",
	1: "SIGFAILED",
	2: "INVOKE_CONTRACT_FAILED",
	3: "DEPLOY_CONTRACT_FAILED",
	4: "INVALID_PERMISSION",
}
var InvalidTransactionRecord_ErrType_value = map[string]int32{
	"OUTOFBALANCE":           0,
	"SIGFAILED":              1,
	"INVOKE_CONTRACT_FAILED": 2,
	"DEPLOY_CONTRACT_FAILED": 3,
	"INVALID_PERMISSION":     4,
}

func (x InvalidTransactionRecord_ErrType) String() string {
	return proto.EnumName(InvalidTransactionRecord_ErrType_name, int32(x))
}
func (InvalidTransactionRecord_ErrType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor4, []int{1, 0}
}

type TransactionValue_Opcode int32

const (
	TransactionValue_NORMAL   TransactionValue_Opcode = 0
	TransactionValue_UPDATE   TransactionValue_Opcode = 1
	TransactionValue_FREEZE   TransactionValue_Opcode = 2
	TransactionValue_UNFREEZE TransactionValue_Opcode = 3
	TransactionValue_SKIPVM   TransactionValue_Opcode = 4
	TransactionValue_ARCHIVE  TransactionValue_Opcode = 100
)

var TransactionValue_Opcode_name = map[int32]string{
	0:   "NORMAL",
	1:   "UPDATE",
	2:   "FREEZE",
	3:   "UNFREEZE",
	4:   "SKIPVM",
	100: "ARCHIVE",
}
var TransactionValue_Opcode_value = map[string]int32{
	"NORMAL":   0,
	"UPDATE":   1,
	"FREEZE":   2,
	"UNFREEZE": 3,
	"SKIPVM":   4,
	"ARCHIVE":  100,
}

func (x TransactionValue_Opcode) String() string {
	return proto.EnumName(TransactionValue_Opcode_name, int32(x))
}
func (TransactionValue_Opcode) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{5, 0} }

type TransactionValue_VmType int32

const (
	TransactionValue_EVM TransactionValue_VmType = 0
	TransactionValue_JVM TransactionValue_VmType = 1
)

var TransactionValue_VmType_name = map[int32]string{
	0: "EVM",
	1: "JVM",
}
var TransactionValue_VmType_value = map[string]int32{
	"EVM": 0,
	"JVM": 1,
}

func (x TransactionValue_VmType) String() string {
	return proto.EnumName(TransactionValue_VmType_name, int32(x))
}
func (TransactionValue_VmType) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{5, 1} }

type Transaction struct {
	Version         []byte   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	From            []byte   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To              []byte   `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Value           []byte   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp       int64    `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Signature       []byte   `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Id              uint64   `protobuf:"varint,7,opt,name=id" json:"id,omitempty"`
	TransactionHash []byte   `protobuf:"bytes,8,opt,name=transactionHash,proto3" json:"transactionHash,omitempty"`
	Nonce           int64    `protobuf:"varint,9,opt,name=nonce" json:"nonce,omitempty"`
	Other           *NonHash `protobuf:"bytes,10,opt,name=other" json:"other,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Transaction) GetVersion() []byte {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Transaction) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Transaction) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Transaction) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Transaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Transaction) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Transaction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Transaction) GetTransactionHash() []byte {
	if m != nil {
		return m.TransactionHash
	}
	return nil
}

func (m *Transaction) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetOther() *NonHash {
	if m != nil {
		return m.Other
	}
	return nil
}

type InvalidTransactionRecord struct {
	Tx      *Transaction                     `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	ErrType InvalidTransactionRecord_ErrType `protobuf:"varint,2,opt,name=errType,enum=types.InvalidTransactionRecord_ErrType" json:"errType,omitempty"`
	ErrMsg  []byte                           `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
}

func (m *InvalidTransactionRecord) Reset()                    { *m = InvalidTransactionRecord{} }
func (m *InvalidTransactionRecord) String() string            { return proto.CompactTextString(m) }
func (*InvalidTransactionRecord) ProtoMessage()               {}
func (*InvalidTransactionRecord) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *InvalidTransactionRecord) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *InvalidTransactionRecord) GetErrType() InvalidTransactionRecord_ErrType {
	if m != nil {
		return m.ErrType
	}
	return InvalidTransactionRecord_OUTOFBALANCE
}

func (m *InvalidTransactionRecord) GetErrMsg() []byte {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

type InvalidTransactionRecords struct {
	Records []*InvalidTransactionRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *InvalidTransactionRecords) Reset()                    { *m = InvalidTransactionRecords{} }
func (m *InvalidTransactionRecords) String() string            { return proto.CompactTextString(m) }
func (*InvalidTransactionRecords) ProtoMessage()               {}
func (*InvalidTransactionRecords) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *InvalidTransactionRecords) GetRecords() []*InvalidTransactionRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type TransactionMeta struct {
	BlockIndex uint64 `protobuf:"varint,1,opt,name=BlockIndex" json:"BlockIndex,omitempty"`
	Index      int64  `protobuf:"varint,2,opt,name=Index" json:"Index,omitempty"`
}

func (m *TransactionMeta) Reset()                    { *m = TransactionMeta{} }
func (m *TransactionMeta) String() string            { return proto.CompactTextString(m) }
func (*TransactionMeta) ProtoMessage()               {}
func (*TransactionMeta) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *TransactionMeta) GetBlockIndex() uint64 {
	if m != nil {
		return m.BlockIndex
	}
	return 0
}

func (m *TransactionMeta) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type TransactionWrapper struct {
	TransactionVersion []byte `protobuf:"bytes,1,opt,name=transactionVersion,proto3" json:"transactionVersion,omitempty"`
	Transaction        []byte `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (m *TransactionWrapper) Reset()                    { *m = TransactionWrapper{} }
func (m *TransactionWrapper) String() string            { return proto.CompactTextString(m) }
func (*TransactionWrapper) ProtoMessage()               {}
func (*TransactionWrapper) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *TransactionWrapper) GetTransactionVersion() []byte {
	if m != nil {
		return m.TransactionVersion
	}
	return nil
}

func (m *TransactionWrapper) GetTransaction() []byte {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type TransactionValue struct {
	Price              int64                   `protobuf:"varint,1,opt,name=price" json:"price,omitempty"`
	GasLimit           int64                   `protobuf:"varint,2,opt,name=gasLimit" json:"gasLimit,omitempty"`
	Amount             int64                   `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	Payload            []byte                  `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	EncryptedAmount    []byte                  `protobuf:"bytes,5,opt,name=encryptedAmount,proto3" json:"encryptedAmount,omitempty"`
	HomomorphicAmount  []byte                  `protobuf:"bytes,6,opt,name=homomorphicAmount,proto3" json:"homomorphicAmount,omitempty"`
	HomomorphicBalance []byte                  `protobuf:"bytes,7,opt,name=homomorphicBalance,proto3" json:"homomorphicBalance,omitempty"`
	Op                 TransactionValue_Opcode `protobuf:"varint,8,opt,name=op,enum=types.TransactionValue_Opcode" json:"op,omitempty"`
	Extra              []byte                  `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
	VmType             TransactionValue_VmType `protobuf:"varint,10,opt,name=vmType,enum=types.TransactionValue_VmType" json:"vmType,omitempty"`
}

func (m *TransactionValue) Reset()                    { *m = TransactionValue{} }
func (m *TransactionValue) String() string            { return proto.CompactTextString(m) }
func (*TransactionValue) ProtoMessage()               {}
func (*TransactionValue) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *TransactionValue) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TransactionValue) GetGasLimit() int64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *TransactionValue) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransactionValue) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TransactionValue) GetEncryptedAmount() []byte {
	if m != nil {
		return m.EncryptedAmount
	}
	return nil
}

func (m *TransactionValue) GetHomomorphicAmount() []byte {
	if m != nil {
		return m.HomomorphicAmount
	}
	return nil
}

func (m *TransactionValue) GetHomomorphicBalance() []byte {
	if m != nil {
		return m.HomomorphicBalance
	}
	return nil
}

func (m *TransactionValue) GetOp() TransactionValue_Opcode {
	if m != nil {
		return m.Op
	}
	return TransactionValue_NORMAL
}

func (m *TransactionValue) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *TransactionValue) GetVmType() TransactionValue_VmType {
	if m != nil {
		return m.VmType
	}
	return TransactionValue_EVM
}

type InvokeArgs struct {
	Code       []byte   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	MethodName string   `protobuf:"bytes,2,opt,name=methodName" json:"methodName,omitempty"`
	Args       [][]byte `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *InvokeArgs) Reset()                    { *m = InvokeArgs{} }
func (m *InvokeArgs) String() string            { return proto.CompactTextString(m) }
func (*InvokeArgs) ProtoMessage()               {}
func (*InvokeArgs) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *InvokeArgs) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *InvokeArgs) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *InvokeArgs) GetArgs() [][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

type NonHash struct {
	NodeHash []byte `protobuf:"bytes,1,opt,name=nodeHash,proto3" json:"nodeHash,omitempty"`
}

func (m *NonHash) Reset()                    { *m = NonHash{} }
func (m *NonHash) String() string            { return proto.CompactTextString(m) }
func (*NonHash) ProtoMessage()               {}
func (*NonHash) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *NonHash) GetNodeHash() []byte {
	if m != nil {
		return m.NodeHash
	}
	return nil
}

func init() {
	proto.RegisterType((*Transaction)(nil), "types.Transaction")
	proto.RegisterType((*InvalidTransactionRecord)(nil), "types.InvalidTransactionRecord")
	proto.RegisterType((*InvalidTransactionRecords)(nil), "types.InvalidTransactionRecords")
	proto.RegisterType((*TransactionMeta)(nil), "types.TransactionMeta")
	proto.RegisterType((*TransactionWrapper)(nil), "types.TransactionWrapper")
	proto.RegisterType((*TransactionValue)(nil), "types.TransactionValue")
	proto.RegisterType((*InvokeArgs)(nil), "types.InvokeArgs")
	proto.RegisterType((*NonHash)(nil), "types.NonHash")
	proto.RegisterEnum("types.InvalidTransactionRecord_ErrType", InvalidTransactionRecord_ErrType_name, InvalidTransactionRecord_ErrType_value)
	proto.RegisterEnum("types.TransactionValue_Opcode", TransactionValue_Opcode_name, TransactionValue_Opcode_value)
	proto.RegisterEnum("types.TransactionValue_VmType", TransactionValue_VmType_name, TransactionValue_VmType_value)
}

func init() { proto.RegisterFile("transaction.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 765 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0x51, 0x6f, 0xe3, 0x44,
	0x10, 0xae, 0xed, 0x24, 0x6e, 0x27, 0xa5, 0xe7, 0x1b, 0x9d, 0x2a, 0x53, 0xa1, 0x23, 0xb2, 0x40,
	0xe4, 0x01, 0xe5, 0x21, 0x48, 0x48, 0x3c, 0xba, 0xad, 0x7b, 0x67, 0x2e, 0x71, 0xaa, 0x4d, 0x6a,
	0x04, 0x2f, 0xd5, 0x62, 0xef, 0x25, 0xd6, 0xc5, 0x5e, 0x6b, 0xbd, 0x8d, 0x5a, 0xfe, 0x06, 0xe2,
	0x67, 0xf2, 0x1f, 0xd0, 0xee, 0xba, 0x57, 0x73, 0xa1, 0xdc, 0xdb, 0x7c, 0xdf, 0x37, 0x33, 0x6b,
	0x7f, 0x3b, 0xb3, 0xf0, 0x52, 0x0a, 0x5a, 0x35, 0x34, 0x93, 0x05, 0xaf, 0x26, 0xb5, 0xe0, 0x92,
	0x63, 0x5f, 0x3e, 0xd4, 0xac, 0x09, 0xfe, 0xb4, 0x61, 0xb8, 0x7a, 0x12, 0xd1, 0x07, 0x77, 0xc7,
	0x44, 0x53, 0xf0, 0xca, 0xb7, 0x46, 0xd6, 0xf8, 0x98, 0x3c, 0x42, 0x44, 0xe8, 0xbd, 0x17, 0xbc,
	0xf4, 0x6d, 0x4d, 0xeb, 0x18, 0x4f, 0xc0, 0x96, 0xdc, 0x77, 0x34, 0x63, 0x4b, 0x8e, 0xaf, 0xa0,
	0xbf, 0xa3, 0xdb, 0x3b, 0xe6, 0xf7, 0x34, 0x65, 0x00, 0x7e, 0x05, 0x47, 0xb2, 0x28, 0x59, 0x23,
	0x69, 0x59, 0xfb, 0xfd, 0x91, 0x35, 0x76, 0xc8, 0x13, 0xa1, 0xd4, 0xa6, 0x58, 0x57, 0x54, 0xde,
	0x09, 0xe6, 0x0f, 0x74, 0xdd, 0x13, 0xa1, 0x4e, 0x28, 0x72, 0xdf, 0x1d, 0x59, 0xe3, 0x1e, 0xb1,
	0x8b, 0x1c, 0xc7, 0xf0, 0xa2, 0xf3, 0x2f, 0x6f, 0x69, 0xb3, 0xf1, 0x0f, 0x75, 0xcd, 0xa7, 0xb4,
	0xfa, 0x96, 0x8a, 0x57, 0x19, 0xf3, 0x8f, 0xf4, 0x89, 0x06, 0xe0, 0x37, 0xd0, 0xe7, 0x72, 0xc3,
	0x84, 0x0f, 0x23, 0x6b, 0x3c, 0x9c, 0x9e, 0x4c, 0xb4, 0x0d, 0x93, 0xc4, 0x14, 0x11, 0x23, 0x06,
	0x7f, 0xd9, 0xe0, 0xc7, 0xd5, 0x8e, 0x6e, 0x8b, 0xbc, 0x63, 0x0e, 0x61, 0x19, 0x17, 0x39, 0x06,
	0x60, 0xcb, 0x7b, 0xed, 0xce, 0x70, 0x8a, 0x6d, 0x7d, 0x37, 0xcb, 0x96, 0xf7, 0x18, 0x82, 0xcb,
	0x84, 0x58, 0x3d, 0xd4, 0x4c, 0xfb, 0x75, 0x32, 0xfd, 0xae, 0x4d, 0x7c, 0xae, 0xeb, 0x24, 0x32,
	0xe9, 0xe4, 0xb1, 0x0e, 0x4f, 0x61, 0xc0, 0x84, 0x98, 0x37, 0xeb, 0xd6, 0xdf, 0x16, 0x05, 0x7f,
	0x80, 0xdb, 0xe6, 0xa2, 0x07, 0xc7, 0x8b, 0x9b, 0xd5, 0xe2, 0xea, 0x3c, 0x9c, 0x85, 0xc9, 0x45,
	0xe4, 0x1d, 0xe0, 0x17, 0x70, 0xb4, 0x8c, 0xdf, 0x5c, 0x85, 0xf1, 0x2c, 0xba, 0xf4, 0x2c, 0x3c,
	0x83, 0xd3, 0x38, 0x49, 0x17, 0xef, 0xa2, 0xdb, 0x8b, 0x45, 0xb2, 0x22, 0xe1, 0xc5, 0xea, 0xb6,
	0xd5, 0x6c, 0xa5, 0x5d, 0x46, 0xd7, 0xb3, 0xc5, 0xaf, 0x7b, 0x9a, 0x83, 0xa7, 0x80, 0x71, 0x92,
	0x86, 0xb3, 0xf8, 0xf2, 0xf6, 0x3a, 0x22, 0xf3, 0x78, 0xb9, 0x8c, 0x17, 0x89, 0xd7, 0x0b, 0x52,
	0xf8, 0xf2, 0xb9, 0x1f, 0x68, 0xf0, 0x27, 0x70, 0x85, 0x09, 0x7d, 0x6b, 0xe4, 0x8c, 0x87, 0xd3,
	0xaf, 0x3f, 0xf3, 0xcf, 0xe4, 0x31, 0x3f, 0x78, 0x03, 0x2f, 0x3a, 0xea, 0x9c, 0x49, 0x8a, 0xaf,
	0x01, 0xce, 0xb7, 0x3c, 0xfb, 0x10, 0x57, 0x39, 0x33, 0x6e, 0xf7, 0x48, 0x87, 0x51, 0xd7, 0x6b,
	0x24, 0xdb, 0x5c, 0xaf, 0x06, 0xc1, 0x7b, 0xc0, 0x4e, 0xa3, 0x5f, 0x04, 0xad, 0x6b, 0x26, 0x70,
	0x02, 0xd8, 0x99, 0x8e, 0xf4, 0x5f, 0xf3, 0xfd, 0x1f, 0x0a, 0x8e, 0x60, 0xd8, 0x61, 0xdb, 0x89,
	0xef, 0x52, 0xc1, 0xdf, 0x0e, 0x78, 0x9d, 0x83, 0x52, 0x3d, 0xe7, 0xaf, 0xa0, 0x5f, 0x8b, 0x22,
	0x63, 0xba, 0xb3, 0x43, 0x0c, 0xc0, 0x33, 0x38, 0x5c, 0xd3, 0x66, 0x56, 0x94, 0x85, 0x6c, 0xbf,
	0xf5, 0x23, 0x56, 0x77, 0x4c, 0x4b, 0x7e, 0x57, 0x49, 0x7d, 0xc7, 0x0e, 0x69, 0x91, 0xda, 0xc2,
	0x9a, 0x3e, 0x6c, 0x39, 0xcd, 0xdb, 0x4d, 0x7a, 0x84, 0x6a, 0xfe, 0x59, 0x95, 0x89, 0x87, 0x5a,
	0xb2, 0x3c, 0x34, 0xa5, 0x7d, 0x33, 0xff, 0x9f, 0xd0, 0xf8, 0x3d, 0xbc, 0xdc, 0xf0, 0x92, 0x97,
	0x5c, 0xd4, 0x9b, 0x22, 0x6b, 0x73, 0xcd, 0x7e, 0xed, 0x0b, 0xca, 0xa2, 0x0e, 0x79, 0x4e, 0xb7,
	0x54, 0xad, 0x8e, 0x6b, 0x2c, 0xda, 0x57, 0x70, 0x02, 0x36, 0xaf, 0xf5, 0xea, 0x9d, 0x4c, 0x5f,
	0xef, 0x2f, 0x81, 0x36, 0x64, 0xb2, 0xa8, 0x33, 0x9e, 0x33, 0x62, 0xf3, 0x5a, 0x79, 0xc3, 0xee,
	0xa5, 0xa0, 0x7a, 0x1b, 0x8f, 0x89, 0x01, 0xf8, 0x23, 0x0c, 0x76, 0xa5, 0xde, 0x12, 0xf8, 0xff,
	0x4e, 0xa9, 0xce, 0x22, 0x6d, 0x76, 0xb0, 0x84, 0x81, 0xe9, 0x8d, 0x00, 0x83, 0x64, 0x41, 0xe6,
	0xe1, 0xcc, 0x3b, 0x50, 0xf1, 0xcd, 0xf5, 0x65, 0xb8, 0x8a, 0x3c, 0x4b, 0xc5, 0x57, 0x24, 0x8a,
	0x7e, 0x8b, 0x3c, 0x1b, 0x8f, 0xe1, 0xf0, 0x26, 0x69, 0x91, 0xa3, 0x94, 0xe5, 0xbb, 0xf8, 0x3a,
	0x9d, 0x7b, 0x3d, 0x1c, 0x82, 0x1b, 0x92, 0x8b, 0xb7, 0x71, 0x1a, 0x79, 0x79, 0x70, 0x06, 0x03,
	0x73, 0x0c, 0xba, 0xe0, 0x44, 0xe9, 0xdc, 0x3b, 0x50, 0xc1, 0xcf, 0xe9, 0xdc, 0xb3, 0x82, 0x15,
	0x40, 0x5c, 0xed, 0xf8, 0x07, 0x16, 0x8a, 0x75, 0xa3, 0x9e, 0x42, 0x75, 0x78, 0x3b, 0x41, 0x3a,
	0x56, 0xf3, 0x5a, 0x32, 0xb9, 0xe1, 0x79, 0x42, 0x4b, 0xb3, 0xf4, 0x47, 0xa4, 0xc3, 0xa8, 0x1a,
	0x2a, 0xd6, 0x8d, 0xef, 0x8c, 0x1c, 0x55, 0xa3, 0xe2, 0xe0, 0x5b, 0x70, 0xdb, 0x87, 0x47, 0x4d,
	0x49, 0xc5, 0x73, 0xa6, 0x1f, 0x34, 0xd3, 0xf6, 0x23, 0xfe, 0x7d, 0xa0, 0x5f, 0xec, 0x1f, 0xfe,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xf3, 0x2e, 0x25, 0xc6, 0x05, 0x00, 0x00,
}
