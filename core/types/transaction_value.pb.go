// Code generated by protoc-gen-go.
// source: transaction_value.proto
// DO NOT EDIT!

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TransactionValue_Opcode int32

const (
	TransactionValue_NORMAL   TransactionValue_Opcode = 0
	TransactionValue_UPDATE   TransactionValue_Opcode = 1
	TransactionValue_FREEZE   TransactionValue_Opcode = 2
	TransactionValue_UNFREEZE TransactionValue_Opcode = 3
	TransactionValue_SKIPVM   TransactionValue_Opcode = 4
	TransactionValue_ARCHIVE  TransactionValue_Opcode = 100
)

var TransactionValue_Opcode_name = map[int32]string{
	0:   "NORMAL",
	1:   "UPDATE",
	2:   "FREEZE",
	3:   "UNFREEZE",
	4:   "SKIPVM",
	100: "ARCHIVE",
}
var TransactionValue_Opcode_value = map[string]int32{
	"NORMAL":   0,
	"UPDATE":   1,
	"FREEZE":   2,
	"UNFREEZE": 3,
	"SKIPVM":   4,
	"ARCHIVE":  100,
}

func (x TransactionValue_Opcode) String() string {
	return proto.EnumName(TransactionValue_Opcode_name, int32(x))
}
func (TransactionValue_Opcode) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 0} }

type TransactionValue_VmType int32

const (
	TransactionValue_EVM TransactionValue_VmType = 0
	TransactionValue_JVM TransactionValue_VmType = 1
)

var TransactionValue_VmType_name = map[int32]string{
	0: "EVM",
	1: "JVM",
}
var TransactionValue_VmType_value = map[string]int32{
	"EVM": 0,
	"JVM": 1,
}

func (x TransactionValue_VmType) String() string {
	return proto.EnumName(TransactionValue_VmType_name, int32(x))
}
func (TransactionValue_VmType) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 1} }

type TransactionValue struct {
	Price              int64                   `protobuf:"varint,1,opt,name=price" json:"price,omitempty"`
	GasLimit           int64                   `protobuf:"varint,2,opt,name=gasLimit" json:"gasLimit,omitempty"`
	Amount             int64                   `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	Payload            []byte                  `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	EncryptedAmount    []byte                  `protobuf:"bytes,5,opt,name=encryptedAmount,proto3" json:"encryptedAmount,omitempty"`
	HomomorphicAmount  []byte                  `protobuf:"bytes,6,opt,name=homomorphicAmount,proto3" json:"homomorphicAmount,omitempty"`
	HomomorphicBalance []byte                  `protobuf:"bytes,7,opt,name=homomorphicBalance,proto3" json:"homomorphicBalance,omitempty"`
	Op                 TransactionValue_Opcode `protobuf:"varint,8,opt,name=op,enum=types.TransactionValue_Opcode" json:"op,omitempty"`
	VmType             TransactionValue_VmType `protobuf:"varint,9,opt,name=vmType,enum=types.TransactionValue_VmType" json:"vmType,omitempty"`
	Extra              []byte                  `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (m *TransactionValue) Reset()                    { *m = TransactionValue{} }
func (m *TransactionValue) String() string            { return proto.CompactTextString(m) }
func (*TransactionValue) ProtoMessage()               {}
func (*TransactionValue) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *TransactionValue) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TransactionValue) GetGasLimit() int64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *TransactionValue) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransactionValue) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TransactionValue) GetEncryptedAmount() []byte {
	if m != nil {
		return m.EncryptedAmount
	}
	return nil
}

func (m *TransactionValue) GetHomomorphicAmount() []byte {
	if m != nil {
		return m.HomomorphicAmount
	}
	return nil
}

func (m *TransactionValue) GetHomomorphicBalance() []byte {
	if m != nil {
		return m.HomomorphicBalance
	}
	return nil
}

func (m *TransactionValue) GetOp() TransactionValue_Opcode {
	if m != nil {
		return m.Op
	}
	return TransactionValue_NORMAL
}

func (m *TransactionValue) GetVmType() TransactionValue_VmType {
	if m != nil {
		return m.VmType
	}
	return TransactionValue_EVM
}

func (m *TransactionValue) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type InvokeArgs struct {
	Code       []byte   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	MethodName string   `protobuf:"bytes,2,opt,name=methodName" json:"methodName,omitempty"`
	Args       [][]byte `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *InvokeArgs) Reset()                    { *m = InvokeArgs{} }
func (m *InvokeArgs) String() string            { return proto.CompactTextString(m) }
func (*InvokeArgs) ProtoMessage()               {}
func (*InvokeArgs) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *InvokeArgs) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *InvokeArgs) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *InvokeArgs) GetArgs() [][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

func init() {
	proto.RegisterType((*TransactionValue)(nil), "types.TransactionValue")
	proto.RegisterType((*InvokeArgs)(nil), "types.InvokeArgs")
	proto.RegisterEnum("types.TransactionValue_Opcode", TransactionValue_Opcode_name, TransactionValue_Opcode_value)
	proto.RegisterEnum("types.TransactionValue_VmType", TransactionValue_VmType_name, TransactionValue_VmType_value)
}

func init() { proto.RegisterFile("transaction_value.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x97, 0xa6, 0x4d, 0xbb, 0x47, 0x05, 0xe6, 0x09, 0x81, 0xb5, 0xc3, 0x14, 0xe5, 0x94,
	0x03, 0xca, 0x01, 0x24, 0xee, 0x01, 0x82, 0x28, 0x2c, 0xdd, 0xe4, 0x65, 0x39, 0x70, 0x41, 0x26,
	0xb1, 0xda, 0x88, 0x26, 0xb6, 0x1c, 0xaf, 0x22, 0x7f, 0x34, 0xff, 0x03, 0xb2, 0x13, 0x60, 0x1a,
	0x68, 0xb7, 0xef, 0x7b, 0xdf, 0xef, 0x8b, 0xa3, 0x67, 0xc3, 0x0b, 0xa3, 0x79, 0xd7, 0xf3, 0xca,
	0x34, 0xb2, 0xfb, 0x7a, 0xe4, 0x87, 0x5b, 0x91, 0x28, 0x2d, 0x8d, 0xc4, 0x85, 0x19, 0x94, 0xe8,
	0xa3, 0x9f, 0x3e, 0x90, 0xe2, 0x2f, 0x52, 0x5a, 0x02, 0x9f, 0xc1, 0x42, 0xe9, 0xa6, 0x12, 0xd4,
	0x0b, 0xbd, 0xd8, 0x67, 0xa3, 0xc1, 0x33, 0x58, 0xed, 0x78, 0x7f, 0xd1, 0xb4, 0x8d, 0xa1, 0x33,
	0x17, 0xfc, 0xf1, 0xf8, 0x1c, 0x02, 0xde, 0xca, 0xdb, 0xce, 0x50, 0xdf, 0x25, 0x93, 0x43, 0x0a,
	0x4b, 0xc5, 0x87, 0x83, 0xe4, 0x35, 0x9d, 0x87, 0x5e, 0xbc, 0x66, 0xbf, 0x2d, 0xc6, 0xf0, 0x44,
	0x74, 0x95, 0x1e, 0x94, 0x11, 0x75, 0x3a, 0x56, 0x17, 0x8e, 0xb8, 0x3f, 0xc6, 0x97, 0xf0, 0x74,
	0x2f, 0x5b, 0xd9, 0x4a, 0xad, 0xf6, 0x4d, 0x35, 0xb1, 0x81, 0x63, 0xff, 0x0d, 0x30, 0x01, 0xbc,
	0x33, 0x7c, 0xcb, 0x0f, 0xbc, 0xab, 0x04, 0x5d, 0x3a, 0xfc, 0x3f, 0x09, 0x26, 0x30, 0x93, 0x8a,
	0xae, 0x42, 0x2f, 0x7e, 0xfc, 0xea, 0x3c, 0x71, 0x4b, 0x49, 0xee, 0x2f, 0x24, 0xb9, 0x54, 0x95,
	0xac, 0x05, 0x9b, 0x49, 0x85, 0x6f, 0x20, 0x38, 0xb6, 0xc5, 0xa0, 0x04, 0x3d, 0x7d, 0xb8, 0x53,
	0x3a, 0x8a, 0x4d, 0xb4, 0xdd, 0xa9, 0xf8, 0x61, 0x34, 0xa7, 0xe0, 0x7e, 0x65, 0x34, 0xd1, 0x35,
	0x04, 0xe3, 0xb7, 0x11, 0x20, 0xd8, 0x5e, 0xb2, 0x3c, 0xbd, 0x20, 0x27, 0x56, 0xdf, 0x5c, 0xbd,
	0x4f, 0x8b, 0x8c, 0x78, 0x56, 0x7f, 0x60, 0x59, 0xf6, 0x25, 0x23, 0x33, 0x5c, 0xc3, 0xea, 0x66,
	0x3b, 0x39, 0xdf, 0x26, 0xd7, 0x9f, 0x37, 0x57, 0x65, 0x4e, 0xe6, 0xf8, 0x08, 0x96, 0x29, 0x7b,
	0xf7, 0x71, 0x53, 0x66, 0xa4, 0x8e, 0xce, 0x20, 0x18, 0x0f, 0xc7, 0x25, 0xf8, 0x59, 0x99, 0x93,
	0x13, 0x2b, 0x3e, 0x95, 0x39, 0xf1, 0xa2, 0x02, 0x60, 0xd3, 0x1d, 0xe5, 0x77, 0x91, 0xea, 0x5d,
	0x8f, 0x08, 0x73, 0x7b, 0xb8, 0xbb, 0xe7, 0x35, 0x73, 0x1a, 0xcf, 0x01, 0x5a, 0x61, 0xf6, 0xb2,
	0xde, 0xf2, 0x56, 0xb8, 0x8b, 0x3e, 0x65, 0x77, 0x26, 0xb6, 0xc3, 0xf5, 0xae, 0xa7, 0x7e, 0xe8,
	0xdb, 0x8e, 0xd5, 0xdf, 0x02, 0xf7, 0xa6, 0x5e, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x37, 0x7c,
	0xb4, 0x96, 0x6e, 0x02, 0x00, 0x00,
}
