// Copyright 2016-2017 Hyperchain Corp.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax="proto3";
import "hyperchain/core/types/block.proto";
package executor;

message ChainSyncRequest{
    uint64  currentNumber  = 1;
    uint64  requiredNumber = 2;
    uint64  peerId         = 3;
    string  peerHash       = 4;
}

// nvp sends Consult message to vps to make sure whether genesis state transition is necessary.
message Consult {
    string nodeHash = 1;
    uint64 height = 2;
}

message ConsultReply {
    bool        transition = 1;
    types.Block genesisBlock = 2;
    uint64      peerId = 3;
}

message WsContext {
    string  filterId            = 1;
    bytes  initiatorIdOrHash   = 2;
    bytes  receiverIdOrHash    = 3;
}

message WsRequest {
    uint64  target              = 1;
    bytes   initiatorIdOrHash   = 2;
    bytes   receiverIdOrHash    = 3;
}

message WsHandshake {
    WsContext ctx           = 1;
    uint64    height        = 2;  // related chain height
    uint64    size          = 3;  // totally world state size
    uint64    packetSize    = 4;  // packet max size
    uint64    packetNum     = 5;  // packet number
}

message Ws {
    WsContext  ctx            = 1;
    uint64     packetId       = 2;
    uint64     packetSize     = 3;
    bytes      payload        = 4;
}


message WsAck {
   WsContext  ctx           = 1;
   uint64     packetId      = 2;  // received packet id
   enum STATUS {
        OK       = 0;
        FAILED   = 1;
   }
   STATUS     status        = 3;  // received packet status
   bytes      message       = 4;  // received detail message
}
