// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package executor is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	ChainSyncRequest
	WsContext
	WsRequest
	WsHandshake
	Ws
	WsAck
*/
package executor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WsAck_STATUS int32

const (
	WsAck_OK     WsAck_STATUS = 0
	WsAck_FAILED WsAck_STATUS = 1
)

var WsAck_STATUS_name = map[int32]string{
	0: "OK",
	1: "FAILED",
}
var WsAck_STATUS_value = map[string]int32{
	"OK":     0,
	"FAILED": 1,
}

func (x WsAck_STATUS) String() string {
	return proto.EnumName(WsAck_STATUS_name, int32(x))
}
func (WsAck_STATUS) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type ChainSyncRequest struct {
	CurrentNumber  uint64 `protobuf:"varint,1,opt,name=currentNumber" json:"currentNumber,omitempty"`
	RequiredNumber uint64 `protobuf:"varint,2,opt,name=requiredNumber" json:"requiredNumber,omitempty"`
	PeerId         uint64 `protobuf:"varint,3,opt,name=peerId" json:"peerId,omitempty"`
	PeerHash       string `protobuf:"bytes,4,opt,name=peerHash" json:"peerHash,omitempty"`
}

func (m *ChainSyncRequest) Reset()                    { *m = ChainSyncRequest{} }
func (m *ChainSyncRequest) String() string            { return proto.CompactTextString(m) }
func (*ChainSyncRequest) ProtoMessage()               {}
func (*ChainSyncRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ChainSyncRequest) GetCurrentNumber() uint64 {
	if m != nil {
		return m.CurrentNumber
	}
	return 0
}

func (m *ChainSyncRequest) GetRequiredNumber() uint64 {
	if m != nil {
		return m.RequiredNumber
	}
	return 0
}

func (m *ChainSyncRequest) GetPeerId() uint64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *ChainSyncRequest) GetPeerHash() string {
	if m != nil {
		return m.PeerHash
	}
	return ""
}

type WsContext struct {
	FilterId    string `protobuf:"bytes,1,opt,name=filterId" json:"filterId,omitempty"`
	InitiatorId uint64 `protobuf:"varint,2,opt,name=initiatorId" json:"initiatorId,omitempty"`
	ReceiverId  uint64 `protobuf:"varint,3,opt,name=receiverId" json:"receiverId,omitempty"`
}

func (m *WsContext) Reset()                    { *m = WsContext{} }
func (m *WsContext) String() string            { return proto.CompactTextString(m) }
func (*WsContext) ProtoMessage()               {}
func (*WsContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WsContext) GetFilterId() string {
	if m != nil {
		return m.FilterId
	}
	return ""
}

func (m *WsContext) GetInitiatorId() uint64 {
	if m != nil {
		return m.InitiatorId
	}
	return 0
}

func (m *WsContext) GetReceiverId() uint64 {
	if m != nil {
		return m.ReceiverId
	}
	return 0
}

type WsRequest struct {
	Target      uint64 `protobuf:"varint,1,opt,name=target" json:"target,omitempty"`
	InitiatorId uint64 `protobuf:"varint,2,opt,name=initiatorId" json:"initiatorId,omitempty"`
	ReceiverId  uint64 `protobuf:"varint,3,opt,name=receiverId" json:"receiverId,omitempty"`
}

func (m *WsRequest) Reset()                    { *m = WsRequest{} }
func (m *WsRequest) String() string            { return proto.CompactTextString(m) }
func (*WsRequest) ProtoMessage()               {}
func (*WsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WsRequest) GetTarget() uint64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *WsRequest) GetInitiatorId() uint64 {
	if m != nil {
		return m.InitiatorId
	}
	return 0
}

func (m *WsRequest) GetReceiverId() uint64 {
	if m != nil {
		return m.ReceiverId
	}
	return 0
}

type WsHandshake struct {
	Ctx        *WsContext `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Height     uint64     `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Size       uint64     `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	PacketSize uint64     `protobuf:"varint,4,opt,name=packetSize" json:"packetSize,omitempty"`
	PacketNum  uint64     `protobuf:"varint,5,opt,name=packetNum" json:"packetNum,omitempty"`
}

func (m *WsHandshake) Reset()                    { *m = WsHandshake{} }
func (m *WsHandshake) String() string            { return proto.CompactTextString(m) }
func (*WsHandshake) ProtoMessage()               {}
func (*WsHandshake) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WsHandshake) GetCtx() *WsContext {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *WsHandshake) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *WsHandshake) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *WsHandshake) GetPacketSize() uint64 {
	if m != nil {
		return m.PacketSize
	}
	return 0
}

func (m *WsHandshake) GetPacketNum() uint64 {
	if m != nil {
		return m.PacketNum
	}
	return 0
}

type Ws struct {
	Ctx        *WsContext `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	PacketId   uint64     `protobuf:"varint,2,opt,name=packetId" json:"packetId,omitempty"`
	PacketSize uint64     `protobuf:"varint,3,opt,name=packetSize" json:"packetSize,omitempty"`
	Payload    []byte     `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Ws) Reset()                    { *m = Ws{} }
func (m *Ws) String() string            { return proto.CompactTextString(m) }
func (*Ws) ProtoMessage()               {}
func (*Ws) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Ws) GetCtx() *WsContext {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Ws) GetPacketId() uint64 {
	if m != nil {
		return m.PacketId
	}
	return 0
}

func (m *Ws) GetPacketSize() uint64 {
	if m != nil {
		return m.PacketSize
	}
	return 0
}

func (m *Ws) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type WsAck struct {
	Ctx      *WsContext   `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	PacketId uint64       `protobuf:"varint,2,opt,name=packetId" json:"packetId,omitempty"`
	Status   WsAck_STATUS `protobuf:"varint,3,opt,name=status,enum=executor.WsAck_STATUS" json:"status,omitempty"`
	Message  []byte       `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *WsAck) Reset()                    { *m = WsAck{} }
func (m *WsAck) String() string            { return proto.CompactTextString(m) }
func (*WsAck) ProtoMessage()               {}
func (*WsAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WsAck) GetCtx() *WsContext {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *WsAck) GetPacketId() uint64 {
	if m != nil {
		return m.PacketId
	}
	return 0
}

func (m *WsAck) GetStatus() WsAck_STATUS {
	if m != nil {
		return m.Status
	}
	return WsAck_OK
}

func (m *WsAck) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*ChainSyncRequest)(nil), "executor.ChainSyncRequest")
	proto.RegisterType((*WsContext)(nil), "executor.WsContext")
	proto.RegisterType((*WsRequest)(nil), "executor.WsRequest")
	proto.RegisterType((*WsHandshake)(nil), "executor.WsHandshake")
	proto.RegisterType((*Ws)(nil), "executor.Ws")
	proto.RegisterType((*WsAck)(nil), "executor.WsAck")
	proto.RegisterEnum("executor.WsAck_STATUS", WsAck_STATUS_name, WsAck_STATUS_value)
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x86, 0x71, 0xdb, 0x85, 0xf5, 0x2b, 0x9b, 0x2a, 0x23, 0x55, 0x11, 0x9a, 0x50, 0x15, 0x01,
	0xda, 0x29, 0x87, 0xf1, 0x0b, 0xaa, 0x01, 0xda, 0x04, 0x1a, 0x52, 0x3a, 0x94, 0xb3, 0xe7, 0x7c,
	0x34, 0x56, 0xd6, 0x24, 0xb3, 0xbf, 0xa0, 0x8e, 0x1b, 0xff, 0x81, 0x33, 0x3f, 0x82, 0x5f, 0x88,
	0xec, 0x38, 0x59, 0x18, 0x17, 0x0e, 0xbd, 0xf9, 0x7d, 0xbf, 0x37, 0x7e, 0x1f, 0xc7, 0x32, 0x1c,
	0x6d, 0xd1, 0x18, 0xb1, 0xc1, 0xb8, 0xd6, 0x15, 0x55, 0xfc, 0x10, 0x77, 0x28, 0x1b, 0xaa, 0x74,
	0xf4, 0x93, 0xc1, 0xfc, 0x3c, 0x17, 0xaa, 0x5c, 0xdf, 0x97, 0x32, 0xc1, 0xbb, 0x06, 0x0d, 0xf1,
	0x57, 0x70, 0x24, 0x1b, 0xad, 0xb1, 0xa4, 0xab, 0x66, 0x7b, 0x83, 0x3a, 0x64, 0x4b, 0x76, 0x3a,
	0x49, 0xfe, 0x36, 0xf9, 0x1b, 0x38, 0xd6, 0x78, 0xd7, 0x28, 0x8d, 0x99, 0x8f, 0x8d, 0x5c, 0xec,
	0x91, 0xcb, 0x17, 0x10, 0xd4, 0x88, 0xfa, 0x32, 0x0b, 0xc7, 0x6e, 0xee, 0x15, 0x7f, 0x01, 0x87,
	0x76, 0x75, 0x21, 0x4c, 0x1e, 0x4e, 0x96, 0xec, 0x74, 0x9a, 0xf4, 0x3a, 0x52, 0x30, 0x4d, 0xcd,
	0x79, 0x55, 0x12, 0xee, 0xc8, 0x06, 0xbf, 0xaa, 0x5b, 0x72, 0x5b, 0xb0, 0x36, 0xd8, 0x69, 0xbe,
	0x84, 0x99, 0x2a, 0x15, 0x29, 0x41, 0x95, 0x1d, 0xb7, 0x04, 0x43, 0x8b, 0xbf, 0x04, 0xd0, 0x28,
	0x51, 0x7d, 0x1b, 0x20, 0x0c, 0x9c, 0x08, 0x6d, 0x55, 0x77, 0xf2, 0x05, 0x04, 0x24, 0xf4, 0x06,
	0xc9, 0x1f, 0xd9, 0xab, 0x3d, 0xd4, 0xfc, 0x62, 0x30, 0x4b, 0xcd, 0x85, 0x28, 0x33, 0x93, 0x8b,
	0x02, 0xf9, 0x6b, 0x18, 0x4b, 0xda, 0xb9, 0x9a, 0xd9, 0xd9, 0xf3, 0xb8, 0xbb, 0x90, 0xb8, 0x3f,
	0x76, 0x62, 0xe7, 0x16, 0x28, 0x47, 0xb5, 0xc9, 0xc9, 0x77, 0x7a, 0xc5, 0x39, 0x4c, 0x8c, 0xfa,
	0x8e, 0xbe, 0xc8, 0xad, 0x2d, 0x42, 0x2d, 0x64, 0x81, 0xb4, 0xb6, 0x93, 0x49, 0x8b, 0xf0, 0xe0,
	0xf0, 0x13, 0x98, 0xb6, 0xea, 0xaa, 0xd9, 0x86, 0x07, 0x6e, 0xfc, 0x60, 0x44, 0x3f, 0x18, 0x8c,
	0x52, 0xf3, 0xbf, 0x5c, 0xf6, 0xf2, 0xdc, 0xa7, 0xfd, 0xdf, 0xe8, 0xf5, 0x23, 0x8e, 0xf1, 0x3f,
	0x1c, 0x21, 0x3c, 0xad, 0xc5, 0xfd, 0x6d, 0x25, 0x32, 0x07, 0xf9, 0x2c, 0xe9, 0x64, 0xf4, 0x9b,
	0xc1, 0x41, 0x6a, 0x56, 0xb2, 0xd8, 0x07, 0x46, 0x0c, 0x81, 0x21, 0x41, 0x8d, 0x71, 0x08, 0xc7,
	0x67, 0x8b, 0xe1, 0x2e, 0x2b, 0x59, 0xc4, 0xeb, 0xeb, 0xd5, 0xf5, 0x97, 0x75, 0xe2, 0x53, 0x16,
	0xcb, 0xbf, 0x92, 0x0e, 0xcb, 0xcb, 0xe8, 0x04, 0x82, 0x36, 0xcb, 0x03, 0x18, 0x7d, 0xfe, 0x38,
	0x7f, 0xc2, 0x01, 0x82, 0x0f, 0xab, 0xcb, 0x4f, 0xef, 0xdf, 0xcd, 0xd9, 0x4d, 0xe0, 0xde, 0xd4,
	0xdb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xed, 0x9e, 0x39, 0xd5, 0x64, 0x03, 0x00, 0x00,
}
