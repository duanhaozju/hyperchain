// Code generated by protoc-gen-go.
// source: event.proto
// DO NOT EDIT!

/*
Package event is a generated protocol buffer package.

It is generated from these files:
	event.proto

It has these top-level messages:
	InformPrimaryEvent
	CommitEvent
	ValidationEvent
	VCResetEvent
	ExecutorToConsensusEvent
	ExecutorToP2PEvent
	SyncReplica
	ChainSyncReqEvent
	SnapshotEvent
	AddNamespaceEvent
	DeleteNamespaceEvent
	AdminResponseEvent
	DeleteSnapEvent
	ArchEvent
*/
package event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "hyperchain/core/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InformPrimaryEvent struct {
	Primary uint64 `protobuf:"varint,1,opt,name=Primary" json:"Primary,omitempty"`
}

func (m *InformPrimaryEvent) Reset()                    { *m = InformPrimaryEvent{} }
func (m *InformPrimaryEvent) String() string            { return proto.CompactTextString(m) }
func (*InformPrimaryEvent) ProtoMessage()               {}
func (*InformPrimaryEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InformPrimaryEvent) GetPrimary() uint64 {
	if m != nil {
		return m.Primary
	}
	return 0
}

// if the CommitStatus is true, we will commit the blocks and save the statedb
// or we will rollback the statedb
// Flag == true, commit; Flag == false, rollback
type CommitEvent struct {
	SeqNo      uint64 `protobuf:"varint,1,opt,name=SeqNo" json:"SeqNo,omitempty"`
	Timestamp  int64  `protobuf:"varint,2,opt,name=Timestamp" json:"Timestamp,omitempty"`
	CommitTime int64  `protobuf:"varint,3,opt,name=CommitTime" json:"CommitTime,omitempty"`
	Flag       bool   `protobuf:"varint,4,opt,name=Flag" json:"Flag,omitempty"`
	Hash       string `protobuf:"bytes,5,opt,name=Hash" json:"Hash,omitempty"`
	IsPrimary  bool   `protobuf:"varint,6,opt,name=IsPrimary" json:"IsPrimary,omitempty"`
}

func (m *CommitEvent) Reset()                    { *m = CommitEvent{} }
func (m *CommitEvent) String() string            { return proto.CompactTextString(m) }
func (*CommitEvent) ProtoMessage()               {}
func (*CommitEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommitEvent) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *CommitEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CommitEvent) GetCommitTime() int64 {
	if m != nil {
		return m.CommitTime
	}
	return 0
}

func (m *CommitEvent) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

func (m *CommitEvent) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *CommitEvent) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

// receive new block event from node consensus event for consensus module
type ValidationEvent struct {
	Digest       string               `protobuf:"bytes,1,opt,name=Digest" json:"Digest,omitempty"`
	Transactions []*types.Transaction `protobuf:"bytes,2,rep,name=Transactions" json:"Transactions,omitempty"`
	SeqNo        uint64               `protobuf:"varint,3,opt,name=SeqNo" json:"SeqNo,omitempty"`
	View         uint64               `protobuf:"varint,4,opt,name=View" json:"View,omitempty"`
	IsPrimary    bool                 `protobuf:"varint,5,opt,name=IsPrimary" json:"IsPrimary,omitempty"`
	Timestamp    int64                `protobuf:"varint,6,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *ValidationEvent) Reset()                    { *m = ValidationEvent{} }
func (m *ValidationEvent) String() string            { return proto.CompactTextString(m) }
func (*ValidationEvent) ProtoMessage()               {}
func (*ValidationEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ValidationEvent) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *ValidationEvent) GetTransactions() []*types.Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *ValidationEvent) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *ValidationEvent) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *ValidationEvent) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

func (m *ValidationEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// reset blockchain to a stable checkpoint status when `viewchange` occur.
type VCResetEvent struct {
	SeqNo uint64 `protobuf:"varint,1,opt,name=SeqNo" json:"SeqNo,omitempty"`
}

func (m *VCResetEvent) Reset()                    { *m = VCResetEvent{} }
func (m *VCResetEvent) String() string            { return proto.CompactTextString(m) }
func (*VCResetEvent) ProtoMessage()               {}
func (*VCResetEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VCResetEvent) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

// event send from executor to consensus.
type ExecutorToConsensusEvent struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Type    int32  `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
}

func (m *ExecutorToConsensusEvent) Reset()                    { *m = ExecutorToConsensusEvent{} }
func (m *ExecutorToConsensusEvent) String() string            { return proto.CompactTextString(m) }
func (*ExecutorToConsensusEvent) ProtoMessage()               {}
func (*ExecutorToConsensusEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ExecutorToConsensusEvent) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ExecutorToConsensusEvent) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// event send from executor to p2p.
type ExecutorToP2PEvent struct {
	Payload   []byte   `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Type      int32    `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	Peers     []uint64 `protobuf:"varint,3,rep,packed,name=Peers" json:"Peers,omitempty"`
	PeersHash []string `protobuf:"bytes,4,rep,name=PeersHash" json:"PeersHash,omitempty"`
}

func (m *ExecutorToP2PEvent) Reset()                    { *m = ExecutorToP2PEvent{} }
func (m *ExecutorToP2PEvent) String() string            { return proto.CompactTextString(m) }
func (*ExecutorToP2PEvent) ProtoMessage()               {}
func (*ExecutorToP2PEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ExecutorToP2PEvent) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ExecutorToP2PEvent) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ExecutorToP2PEvent) GetPeers() []uint64 {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *ExecutorToP2PEvent) GetPeersHash() []string {
	if m != nil {
		return m.PeersHash
	}
	return nil
}

// node receive checkpoint sync event and then,check db and send block require request to peers
type SyncReplica struct {
	Id      uint64 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=Height" json:"Height,omitempty"`
	Genesis uint64 `protobuf:"varint,3,opt,name=Genesis" json:"Genesis,omitempty"`
}

func (m *SyncReplica) Reset()                    { *m = SyncReplica{} }
func (m *SyncReplica) String() string            { return proto.CompactTextString(m) }
func (*SyncReplica) ProtoMessage()               {}
func (*SyncReplica) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SyncReplica) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SyncReplica) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *SyncReplica) GetGenesis() uint64 {
	if m != nil {
		return m.Genesis
	}
	return 0
}

type ChainSyncReqEvent struct {
	Id              uint64         `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	TargetHeight    uint64         `protobuf:"varint,2,opt,name=TargetHeight" json:"TargetHeight,omitempty"`
	TargetBlockHash []byte         `protobuf:"bytes,3,opt,name=TargetBlockHash,proto3" json:"TargetBlockHash,omitempty"`
	Replicas        []SyncReplica `protobuf:"bytes,4,rep,name=Replicas" json:"Replicas,omitempty"`
}

func (m *ChainSyncReqEvent) Reset()                    { *m = ChainSyncReqEvent{} }
func (m *ChainSyncReqEvent) String() string            { return proto.CompactTextString(m) }
func (*ChainSyncReqEvent) ProtoMessage()               {}
func (*ChainSyncReqEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ChainSyncReqEvent) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChainSyncReqEvent) GetTargetHeight() uint64 {
	if m != nil {
		return m.TargetHeight
	}
	return 0
}

func (m *ChainSyncReqEvent) GetTargetBlockHash() []byte {
	if m != nil {
		return m.TargetBlockHash
	}
	return nil
}

func (m *ChainSyncReqEvent) GetReplicas() []SyncReplica {
	if m != nil {
		return m.Replicas
	}
	return nil
}

type SnapshotEvent struct {
	FilterId    string `protobuf:"bytes,1,opt,name=FilterId" json:"FilterId,omitempty"`
	BlockNumber uint64 `protobuf:"varint,2,opt,name=BlockNumber" json:"BlockNumber,omitempty"`
}

func (m *SnapshotEvent) Reset()                    { *m = SnapshotEvent{} }
func (m *SnapshotEvent) String() string            { return proto.CompactTextString(m) }
func (*SnapshotEvent) ProtoMessage()               {}
func (*SnapshotEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SnapshotEvent) GetFilterId() string {
	if m != nil {
		return m.FilterId
	}
	return ""
}

func (m *SnapshotEvent) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type AddNamespaceEvent struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *AddNamespaceEvent) Reset()                    { *m = AddNamespaceEvent{} }
func (m *AddNamespaceEvent) String() string            { return proto.CompactTextString(m) }
func (*AddNamespaceEvent) ProtoMessage()               {}
func (*AddNamespaceEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AddNamespaceEvent) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type DeleteNamespaceEvent struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *DeleteNamespaceEvent) Reset()                    { *m = DeleteNamespaceEvent{} }
func (m *DeleteNamespaceEvent) String() string            { return proto.CompactTextString(m) }
func (*DeleteNamespaceEvent) ProtoMessage()               {}
func (*DeleteNamespaceEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteNamespaceEvent) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type AdminResponseEvent struct {
	Ok      bool   `protobuf:"varint,1,opt,name=Ok" json:"Ok,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (m *AdminResponseEvent) Reset()                    { *m = AdminResponseEvent{} }
func (m *AdminResponseEvent) String() string            { return proto.CompactTextString(m) }
func (*AdminResponseEvent) ProtoMessage()               {}
func (*AdminResponseEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AdminResponseEvent) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *AdminResponseEvent) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type DeleteSnapEvent struct {
	FilterId string `protobuf:"bytes,1,opt,name=FilterId" json:"FilterId,omitempty"`
}

func (m *DeleteSnapEvent) Reset()                    { *m = DeleteSnapEvent{} }
func (m *DeleteSnapEvent) String() string            { return proto.CompactTextString(m) }
func (*DeleteSnapEvent) ProtoMessage()               {}
func (*DeleteSnapEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DeleteSnapEvent) GetFilterId() string {
	if m != nil {
		return m.FilterId
	}
	return ""
}

type ArchEvent struct {
	FilterId string `protobuf:"bytes,1,opt,name=FilterId" json:"FilterId,omitempty"`
	Sync     bool   `protobuf:"varint,2,opt,name=Sync" json:"Sync,omitempty"`
}

func (m *ArchEvent) Reset()                    { *m = ArchEvent{} }
func (m *ArchEvent) String() string            { return proto.CompactTextString(m) }
func (*ArchEvent) ProtoMessage()               {}
func (*ArchEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ArchEvent) GetFilterId() string {
	if m != nil {
		return m.FilterId
	}
	return ""
}

func (m *ArchEvent) GetSync() bool {
	if m != nil {
		return m.Sync
	}
	return false
}

func init() {
	proto.RegisterType((*InformPrimaryEvent)(nil), "event.InformPrimaryEvent")
	proto.RegisterType((*CommitEvent)(nil), "event.CommitEvent")
	proto.RegisterType((*ValidationEvent)(nil), "event.ValidationEvent")
	proto.RegisterType((*VCResetEvent)(nil), "event.VCResetEvent")
	proto.RegisterType((*ExecutorToConsensusEvent)(nil), "event.ExecutorToConsensusEvent")
	proto.RegisterType((*ExecutorToP2PEvent)(nil), "event.ExecutorToP2PEvent")
	proto.RegisterType((*SyncReplica)(nil), "event.SyncReplica")
	proto.RegisterType((*ChainSyncReqEvent)(nil), "event.ChainSyncReqEvent")
	proto.RegisterType((*SnapshotEvent)(nil), "event.SnapshotEvent")
	proto.RegisterType((*AddNamespaceEvent)(nil), "event.AddNamespaceEvent")
	proto.RegisterType((*DeleteNamespaceEvent)(nil), "event.DeleteNamespaceEvent")
	proto.RegisterType((*AdminResponseEvent)(nil), "event.AdminResponseEvent")
	proto.RegisterType((*DeleteSnapEvent)(nil), "event.DeleteSnapEvent")
	proto.RegisterType((*ArchEvent)(nil), "event.ArchEvent")
}

func init() { proto.RegisterFile("event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0x95, 0x63, 0x27, 0x5f, 0x3c, 0xc9, 0x47, 0xd5, 0x55, 0x85, 0xac, 0xaa, 0x42, 0xd6, 0x0a,
	0x09, 0x5f, 0x48, 0x45, 0x41, 0x5c, 0x90, 0x90, 0x4a, 0xda, 0xd2, 0x1c, 0x68, 0xa3, 0x6d, 0xd4,
	0xfb, 0xd6, 0x1e, 0x92, 0x55, 0x6d, 0xaf, 0xbb, 0xbb, 0x2d, 0xe4, 0xe7, 0x70, 0xe2, 0xa7, 0xf0,
	0xb7, 0xd0, 0xae, 0x9d, 0x3a, 0xc9, 0x81, 0x0a, 0x6e, 0xf3, 0x9e, 0x67, 0x67, 0xde, 0x9b, 0xd9,
	0x35, 0x0c, 0xf0, 0x01, 0x4b, 0x33, 0xaa, 0x94, 0x34, 0x92, 0x74, 0x1d, 0xd8, 0x7f, 0xb5, 0x58,
	0x56, 0xa8, 0xd2, 0x05, 0x17, 0xe5, 0x61, 0x2a, 0x15, 0x1e, 0x9a, 0x65, 0x85, 0xfa, 0xd0, 0x28,
	0x5e, 0x6a, 0x9e, 0x1a, 0x21, 0xcb, 0x3a, 0x9f, 0x8e, 0x80, 0x4c, 0xca, 0xaf, 0x52, 0x15, 0x53,
	0x25, 0x0a, 0xae, 0x96, 0xa7, 0xf6, 0x38, 0x89, 0xe0, 0xbf, 0x06, 0x47, 0x5e, 0xec, 0x25, 0x01,
	0x5b, 0x41, 0xfa, 0xd3, 0x83, 0xc1, 0x58, 0x16, 0x85, 0x30, 0x75, 0xe6, 0x1e, 0x74, 0xaf, 0xf0,
	0xee, 0x42, 0x36, 0x79, 0x35, 0x20, 0x07, 0x10, 0xce, 0x44, 0x81, 0xda, 0xf0, 0xa2, 0x8a, 0x3a,
	0xb1, 0x97, 0xf8, 0xac, 0x25, 0xc8, 0x0b, 0x80, 0xba, 0x84, 0xa5, 0x22, 0xdf, 0x7d, 0x5e, 0x63,
	0x08, 0x81, 0xe0, 0x2c, 0xe7, 0xf3, 0x28, 0x88, 0xbd, 0xa4, 0xcf, 0x5c, 0x6c, 0xb9, 0x73, 0xae,
	0x17, 0x51, 0x37, 0xf6, 0x92, 0x90, 0xb9, 0xd8, 0x76, 0x99, 0xe8, 0x95, 0xce, 0x9e, 0x4b, 0x6e,
	0x09, 0xfa, 0xcb, 0x83, 0x9d, 0x6b, 0x9e, 0x8b, 0x8c, 0x5b, 0xbb, 0xb5, 0xda, 0xe7, 0xd0, 0x3b,
	0x11, 0x73, 0xd4, 0xc6, 0xc9, 0x0d, 0x59, 0x83, 0xc8, 0x7b, 0x18, 0xce, 0xda, 0xd1, 0xe8, 0xa8,
	0x13, 0xfb, 0xc9, 0xe0, 0x88, 0x8c, 0xdc, 0xd4, 0x46, 0x6b, 0x9f, 0xd8, 0x46, 0x5e, 0xeb, 0xde,
	0x5f, 0x77, 0x4f, 0x20, 0xb8, 0x16, 0xf8, 0xcd, 0xe9, 0x0f, 0x98, 0x8b, 0x37, 0xb5, 0x76, 0xb7,
	0xb4, 0x6e, 0xce, 0xab, 0xb7, 0x35, 0x2f, 0xfa, 0x12, 0x86, 0xd7, 0x63, 0x86, 0x1a, 0xff, 0x34,
	0x73, 0x7a, 0x0e, 0xd1, 0xe9, 0x77, 0x4c, 0xef, 0x8d, 0x54, 0x33, 0x39, 0x96, 0xa5, 0xc6, 0x52,
	0xdf, 0xeb, 0x76, 0x9f, 0x7c, 0x99, 0x4b, 0x9e, 0xb9, 0x33, 0x43, 0xb6, 0x82, 0x56, 0xeb, 0x6c,
	0x59, 0xa1, 0x5b, 0x52, 0x97, 0xb9, 0x98, 0x3e, 0x00, 0x69, 0x2b, 0x4d, 0x8f, 0xa6, 0xff, 0x50,
	0xc3, 0x6a, 0x9c, 0x22, 0x2a, 0x1d, 0xf9, 0xb1, 0x6f, 0x35, 0x3a, 0x60, 0x7d, 0xba, 0xc0, 0xad,
	0x32, 0x88, 0xfd, 0x24, 0x64, 0x2d, 0x41, 0x2f, 0x61, 0x70, 0xb5, 0x2c, 0x53, 0x86, 0x55, 0x2e,
	0x52, 0x4e, 0x9e, 0x41, 0x67, 0x92, 0x35, 0x1e, 0x3b, 0x93, 0xcc, 0x2e, 0xef, 0x1c, 0xc5, 0x7c,
	0x61, 0x5c, 0xa3, 0x80, 0x35, 0xc8, 0x0a, 0xfb, 0x8c, 0x25, 0x6a, 0xa1, 0x9b, 0x35, 0xac, 0x20,
	0xfd, 0xe1, 0xc1, 0xee, 0xd8, 0xbe, 0x81, 0xba, 0xec, 0x5d, 0x6d, 0x64, 0xbb, 0x2e, 0x85, 0xe1,
	0x8c, 0xab, 0x39, 0x9a, 0x8d, 0xea, 0x1b, 0x1c, 0x49, 0x60, 0xa7, 0xc6, 0x9f, 0x72, 0x99, 0xde,
	0x3a, 0xf9, 0xbe, 0x1b, 0xc2, 0x36, 0x4d, 0x46, 0xd0, 0x6f, 0x0c, 0x68, 0xe7, 0xd0, 0x5e, 0xa3,
	0xfa, 0x81, 0xae, 0x79, 0x63, 0x8f, 0x39, 0xf4, 0x0b, 0xfc, 0x7f, 0x55, 0xf2, 0x4a, 0x2f, 0x64,
	0xb3, 0xdd, 0x7d, 0xe8, 0x9f, 0x89, 0xdc, 0xa0, 0x6a, 0x44, 0x86, 0xec, 0x11, 0x93, 0x18, 0x06,
	0xae, 0xd3, 0xc5, 0x7d, 0x71, 0x83, 0xaa, 0x51, 0xba, 0x4e, 0xd1, 0x37, 0xb0, 0x7b, 0x9c, 0x65,
	0x17, 0xbc, 0x40, 0x5d, 0xf1, 0x14, 0xeb, 0x92, 0x07, 0x10, 0x96, 0x2b, 0xa6, 0xa9, 0xd9, 0x12,
	0xf4, 0x1d, 0xec, 0x9d, 0x60, 0x8e, 0x06, 0xff, 0xea, 0xd4, 0x47, 0x20, 0xc7, 0x59, 0x21, 0x4a,
	0x86, 0xba, 0xb2, 0x97, 0xed, 0x71, 0xb6, 0x97, 0xb7, 0x2e, 0xb9, 0xcf, 0x3a, 0x97, 0xb7, 0xeb,
	0x97, 0xa6, 0xb3, 0x71, 0x69, 0xe8, 0x6b, 0xd8, 0xa9, 0xbb, 0x5a, 0xf7, 0x4f, 0x3a, 0xa7, 0x1f,
	0x20, 0x3c, 0x56, 0xe9, 0xe2, 0xe9, 0x11, 0x11, 0x08, 0xec, 0xa0, 0x5d, 0xbb, 0x3e, 0x73, 0xf1,
	0x4d, 0xcf, 0xfd, 0xeb, 0xde, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x70, 0x52, 0xc5, 0x2a,
	0x05, 0x00, 0x00,
}
