// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event.proto

/*
Package event is a generated protocol buffer package.

It is generated from these files:
	event.proto

It has these top-level messages:
	AddNamespaceEvent
	DeleteNamespaceEvent
	AdminResponseEvent
	TestEvent
	ValidationEvent
	RollbackEvent
	OpLogAck
	OpLogFetch
	CheckpointAck
*/
package event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/hyperchain/hyperchain/core/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddNamespaceEvent struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *AddNamespaceEvent) Reset()                    { *m = AddNamespaceEvent{} }
func (m *AddNamespaceEvent) String() string            { return proto.CompactTextString(m) }
func (*AddNamespaceEvent) ProtoMessage()               {}
func (*AddNamespaceEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddNamespaceEvent) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type DeleteNamespaceEvent struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *DeleteNamespaceEvent) Reset()                    { *m = DeleteNamespaceEvent{} }
func (m *DeleteNamespaceEvent) String() string            { return proto.CompactTextString(m) }
func (*DeleteNamespaceEvent) ProtoMessage()               {}
func (*DeleteNamespaceEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeleteNamespaceEvent) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type AdminResponseEvent struct {
	Ok  bool   `protobuf:"varint,1,opt,name=Ok" json:"Ok,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *AdminResponseEvent) Reset()                    { *m = AdminResponseEvent{} }
func (m *AdminResponseEvent) String() string            { return proto.CompactTextString(m) }
func (*AdminResponseEvent) ProtoMessage()               {}
func (*AdminResponseEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AdminResponseEvent) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *AdminResponseEvent) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type TestEvent struct {
	Id  uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *TestEvent) Reset()                    { *m = TestEvent{} }
func (m *TestEvent) String() string            { return proto.CompactTextString(m) }
func (*TestEvent) ProtoMessage()               {}
func (*TestEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TestEvent) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TestEvent) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// receive new block event from node consensus event for consensus module
type ValidationEvent struct {
	PreHash             string                            `protobuf:"bytes,1,opt,name=PreHash" json:"PreHash,omitempty"`
	Digest              string                            `protobuf:"bytes,2,opt,name=Digest" json:"Digest,omitempty"`
	Transactions        []*types.Transaction              `protobuf:"bytes,3,rep,name=Transactions" json:"Transactions,omitempty"`
	InvalidTransactions []*types.InvalidTransactionRecord `protobuf:"bytes,4,rep,name=InvalidTransactions" json:"InvalidTransactions,omitempty"`
	SeqNo               uint64                            `protobuf:"varint,5,opt,name=SeqNo" json:"SeqNo,omitempty"`
	View                uint64                            `protobuf:"varint,6,opt,name=View" json:"View,omitempty"`
	IsPrimary           bool                              `protobuf:"varint,7,opt,name=IsPrimary" json:"IsPrimary,omitempty"`
	Timestamp           int64                             `protobuf:"varint,8,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *ValidationEvent) Reset()                    { *m = ValidationEvent{} }
func (m *ValidationEvent) String() string            { return proto.CompactTextString(m) }
func (*ValidationEvent) ProtoMessage()               {}
func (*ValidationEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ValidationEvent) GetPreHash() string {
	if m != nil {
		return m.PreHash
	}
	return ""
}

func (m *ValidationEvent) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *ValidationEvent) GetTransactions() []*types.Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *ValidationEvent) GetInvalidTransactions() []*types.InvalidTransactionRecord {
	if m != nil {
		return m.InvalidTransactions
	}
	return nil
}

func (m *ValidationEvent) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *ValidationEvent) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *ValidationEvent) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

func (m *ValidationEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type RollbackEvent struct {
	SeqNo uint64 `protobuf:"varint,1,opt,name=SeqNo" json:"SeqNo,omitempty"`
	Lid   uint64 `protobuf:"varint,2,opt,name=Lid" json:"Lid,omitempty"`
}

func (m *RollbackEvent) Reset()                    { *m = RollbackEvent{} }
func (m *RollbackEvent) String() string            { return proto.CompactTextString(m) }
func (*RollbackEvent) ProtoMessage()               {}
func (*RollbackEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RollbackEvent) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *RollbackEvent) GetLid() uint64 {
	if m != nil {
		return m.Lid
	}
	return 0
}

type OpLogAck struct {
	ExecuteOk bool   `protobuf:"varint,1,opt,name=executeOk" json:"executeOk,omitempty"`
	SeqNo     uint64 `protobuf:"varint,2,opt,name=seqNo" json:"seqNo,omitempty"`
}

func (m *OpLogAck) Reset()                    { *m = OpLogAck{} }
func (m *OpLogAck) String() string            { return proto.CompactTextString(m) }
func (*OpLogAck) ProtoMessage()               {}
func (*OpLogAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OpLogAck) GetExecuteOk() bool {
	if m != nil {
		return m.ExecuteOk
	}
	return false
}

func (m *OpLogAck) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

type OpLogFetch struct {
	LogID uint64 `protobuf:"varint,1,opt,name=logID" json:"logID,omitempty"`
}

func (m *OpLogFetch) Reset()                    { *m = OpLogFetch{} }
func (m *OpLogFetch) String() string            { return proto.CompactTextString(m) }
func (*OpLogFetch) ProtoMessage()               {}
func (*OpLogFetch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *OpLogFetch) GetLogID() uint64 {
	if m != nil {
		return m.LogID
	}
	return 0
}

type CheckpointAck struct {
	IsStableCkpt bool   `protobuf:"varint,1,opt,name=isStableCkpt" json:"isStableCkpt,omitempty"`
	Cid          uint64 `protobuf:"varint,2,opt,name=cid" json:"cid,omitempty"`
}

func (m *CheckpointAck) Reset()                    { *m = CheckpointAck{} }
func (m *CheckpointAck) String() string            { return proto.CompactTextString(m) }
func (*CheckpointAck) ProtoMessage()               {}
func (*CheckpointAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CheckpointAck) GetIsStableCkpt() bool {
	if m != nil {
		return m.IsStableCkpt
	}
	return false
}

func (m *CheckpointAck) GetCid() uint64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func init() {
	proto.RegisterType((*AddNamespaceEvent)(nil), "event.AddNamespaceEvent")
	proto.RegisterType((*DeleteNamespaceEvent)(nil), "event.DeleteNamespaceEvent")
	proto.RegisterType((*AdminResponseEvent)(nil), "event.AdminResponseEvent")
	proto.RegisterType((*TestEvent)(nil), "event.TestEvent")
	proto.RegisterType((*ValidationEvent)(nil), "event.ValidationEvent")
	proto.RegisterType((*RollbackEvent)(nil), "event.RollbackEvent")
	proto.RegisterType((*OpLogAck)(nil), "event.OpLogAck")
	proto.RegisterType((*OpLogFetch)(nil), "event.OpLogFetch")
	proto.RegisterType((*CheckpointAck)(nil), "event.CheckpointAck")
}

func init() { proto.RegisterFile("event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x55, 0x93, 0xb6, 0x6b, 0xef, 0x36, 0x18, 0x66, 0x42, 0x11, 0x42, 0xa2, 0xf2, 0x53, 0x5f,
	0x68, 0xc5, 0x87, 0xc6, 0x13, 0x48, 0xd5, 0x3a, 0x44, 0xa5, 0xb1, 0x0e, 0xaf, 0xda, 0xbb, 0xeb,
	0x5c, 0x25, 0x56, 0x3e, 0x6c, 0x62, 0x6f, 0xd0, 0xff, 0xc5, 0x0f, 0x44, 0x76, 0xd2, 0xa6, 0x15,
	0xbc, 0xf0, 0x76, 0xcf, 0xf1, 0x39, 0xf7, 0xd8, 0x27, 0x81, 0x63, 0x7c, 0xc4, 0xd2, 0x4e, 0x74,
	0xa5, 0xac, 0x22, 0x3d, 0x0f, 0x5e, 0x7e, 0x4a, 0xa4, 0x4d, 0x1f, 0xd6, 0x13, 0xa1, 0x8a, 0x69,
	0xba, 0xd1, 0x58, 0x89, 0x94, 0xcb, 0x72, 0x7f, 0x14, 0xaa, 0xc2, 0xa9, 0xdd, 0x68, 0x34, 0x53,
	0x5b, 0xf1, 0xd2, 0x70, 0x61, 0xa5, 0x2a, 0xeb, 0x2d, 0xf4, 0x2d, 0x3c, 0x9b, 0xc5, 0xf1, 0x0d,
	0x2f, 0xd0, 0x68, 0x2e, 0xf0, 0xca, 0xed, 0x24, 0xaf, 0x60, 0x58, 0x6e, 0x99, 0xa8, 0x33, 0xea,
	0x8c, 0x87, 0xac, 0x25, 0xe8, 0x07, 0x38, 0x9f, 0x63, 0x8e, 0x16, 0xff, 0xcb, 0x75, 0x01, 0x64,
	0x16, 0x17, 0xb2, 0x64, 0x68, 0xb4, 0x2a, 0x4d, 0xe3, 0x79, 0x02, 0xc1, 0x32, 0xf3, 0xe2, 0x01,
	0x0b, 0x96, 0x19, 0x39, 0x83, 0xf0, 0x9b, 0x49, 0xa2, 0xc0, 0xbb, 0xdd, 0x48, 0xdf, 0xc0, 0x70,
	0x85, 0xc6, 0xee, 0xe4, 0x32, 0xf6, 0xf2, 0x2e, 0x0b, 0x64, 0xec, 0xe4, 0x45, 0x2b, 0x2f, 0x4c,
	0x42, 0x7f, 0x07, 0xf0, 0xf4, 0x9e, 0xe7, 0x32, 0xe6, 0xee, 0x91, 0xb5, 0x2b, 0x82, 0xa3, 0xdb,
	0x0a, 0xbf, 0x72, 0x93, 0x36, 0xd7, 0xda, 0x42, 0xf2, 0x02, 0xfa, 0x73, 0x99, 0xa0, 0xb1, 0xcd,
	0x8a, 0x06, 0x91, 0x0b, 0x38, 0x59, 0xb5, 0x55, 0x99, 0x28, 0x1c, 0x85, 0xe3, 0xe3, 0x77, 0x64,
	0xe2, 0x5b, 0x9c, 0xec, 0x1d, 0xb1, 0x03, 0x1d, 0xf9, 0x0e, 0xcf, 0x17, 0xe5, 0xa3, 0x8b, 0x3f,
	0xb0, 0x77, 0xbd, 0xfd, 0x75, 0x63, 0xff, 0x5b, 0xc1, 0x50, 0xa8, 0x2a, 0x66, 0xff, 0xf2, 0x92,
	0x73, 0xe8, 0xdd, 0xe1, 0x8f, 0x1b, 0x15, 0xf5, 0xfc, 0xab, 0x6b, 0x40, 0x08, 0x74, 0xef, 0x25,
	0xfe, 0x8c, 0xfa, 0x9e, 0xf4, 0xb3, 0xeb, 0x7f, 0x61, 0x6e, 0x2b, 0x59, 0xf0, 0x6a, 0x13, 0x1d,
	0xf9, 0x4a, 0x5b, 0xc2, 0x9d, 0xae, 0x64, 0x81, 0xc6, 0xf2, 0x42, 0x47, 0x83, 0x51, 0x67, 0x1c,
	0xb2, 0x96, 0xa0, 0x1f, 0xe1, 0x94, 0xa9, 0x3c, 0x5f, 0x73, 0x91, 0xd5, 0x9d, 0xed, 0x62, 0x3b,
	0xfb, 0xb1, 0x67, 0x10, 0x5e, 0xcb, 0xd8, 0x97, 0xd5, 0x65, 0x6e, 0xa4, 0x9f, 0x61, 0xb0, 0xd4,
	0xd7, 0x2a, 0x99, 0x89, 0xcc, 0x45, 0xe0, 0x2f, 0x14, 0x0f, 0x16, 0x77, 0xdf, 0xb4, 0x25, 0xdc,
	0x46, 0xe3, 0x37, 0xd6, 0xee, 0x1a, 0x50, 0x0a, 0xe0, 0xfd, 0x5f, 0xd0, 0x8a, 0xd4, 0x69, 0x72,
	0x95, 0x2c, 0xe6, 0xdb, 0x54, 0x0f, 0xe8, 0x15, 0x9c, 0x5e, 0xa6, 0x28, 0x32, 0xad, 0x64, 0x69,
	0x5d, 0x10, 0x85, 0x13, 0x69, 0xee, 0x2c, 0x5f, 0xe7, 0x78, 0x99, 0x69, 0xdb, 0x64, 0x1d, 0x70,
	0xee, 0xaa, 0xa2, 0xbd, 0xaa, 0x90, 0xf1, 0xba, 0xef, 0xff, 0xf8, 0xf7, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x41, 0xb9, 0x46, 0x51, 0x46, 0x03, 0x00, 0x00,
}
