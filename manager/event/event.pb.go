// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event.proto

/*
Package event is a generated protocol buffer package.

It is generated from these files:
	event.proto

It has these top-level messages:
	InformPrimaryEvent
	CommitEvent
	ValidationEvent
	VCResetEvent
*/
package event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "hyperchain/core/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InformPrimaryEvent struct {
	Primary uint64 `protobuf:"varint,1,opt,name=Primary" json:"Primary,omitempty"`
}

func (m *InformPrimaryEvent) Reset()                    { *m = InformPrimaryEvent{} }
func (m *InformPrimaryEvent) String() string            { return proto.CompactTextString(m) }
func (*InformPrimaryEvent) ProtoMessage()               {}
func (*InformPrimaryEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InformPrimaryEvent) GetPrimary() uint64 {
	if m != nil {
		return m.Primary
	}
	return 0
}

// if the CommitStatus is true, we will commit the blocks and save the statedb
// or we will rollback the statedb
// Flag == true, commit; Flag == false, rollback
type CommitEvent struct {
	SeqNo      uint64 `protobuf:"varint,1,opt,name=SeqNo" json:"SeqNo,omitempty"`
	Timestamp  int64  `protobuf:"varint,2,opt,name=Timestamp" json:"Timestamp,omitempty"`
	CommitTime int64  `protobuf:"varint,3,opt,name=CommitTime" json:"CommitTime,omitempty"`
	Flag       bool   `protobuf:"varint,4,opt,name=Flag" json:"Flag,omitempty"`
	Hash       string `protobuf:"bytes,5,opt,name=Hash" json:"Hash,omitempty"`
	IsPrimary  bool   `protobuf:"varint,6,opt,name=IsPrimary" json:"IsPrimary,omitempty"`
}

func (m *CommitEvent) Reset()                    { *m = CommitEvent{} }
func (m *CommitEvent) String() string            { return proto.CompactTextString(m) }
func (*CommitEvent) ProtoMessage()               {}
func (*CommitEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommitEvent) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *CommitEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CommitEvent) GetCommitTime() int64 {
	if m != nil {
		return m.CommitTime
	}
	return 0
}

func (m *CommitEvent) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

func (m *CommitEvent) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *CommitEvent) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

// receive new block event from node consensus event for consensus module
type ValidationEvent struct {
	Digest       string               `protobuf:"bytes,1,opt,name=Digest" json:"Digest,omitempty"`
	Transactions []*types.Transaction `protobuf:"bytes,2,rep,name=Transactions" json:"Transactions,omitempty"`
	SeqNo        uint64               `protobuf:"varint,3,opt,name=SeqNo" json:"SeqNo,omitempty"`
	View         uint64               `protobuf:"varint,4,opt,name=View" json:"View,omitempty"`
	IsPrimary    bool                 `protobuf:"varint,5,opt,name=IsPrimary" json:"IsPrimary,omitempty"`
	Timestamp    int64                `protobuf:"varint,6,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *ValidationEvent) Reset()                    { *m = ValidationEvent{} }
func (m *ValidationEvent) String() string            { return proto.CompactTextString(m) }
func (*ValidationEvent) ProtoMessage()               {}
func (*ValidationEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ValidationEvent) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *ValidationEvent) GetTransactions() []*types.Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *ValidationEvent) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *ValidationEvent) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *ValidationEvent) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

func (m *ValidationEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// reset blockchain to a stable checkpoint status when `viewchange` occur
type VCResetEvent struct {
	SeqNo uint64 `protobuf:"varint,1,opt,name=SeqNo" json:"SeqNo,omitempty"`
}

func (m *VCResetEvent) Reset()                    { *m = VCResetEvent{} }
func (m *VCResetEvent) String() string            { return proto.CompactTextString(m) }
func (*VCResetEvent) ProtoMessage()               {}
func (*VCResetEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VCResetEvent) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func init() {
	proto.RegisterType((*InformPrimaryEvent)(nil), "event.InformPrimaryEvent")
	proto.RegisterType((*CommitEvent)(nil), "event.CommitEvent")
	proto.RegisterType((*ValidationEvent)(nil), "event.ValidationEvent")
	proto.RegisterType((*VCResetEvent)(nil), "event.VCResetEvent")
}

func init() { proto.RegisterFile("event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x51, 0xdd, 0x4a, 0xc3, 0x30,
	0x18, 0x25, 0xeb, 0x8f, 0xee, 0xdb, 0x40, 0x08, 0x22, 0x41, 0x44, 0x4a, 0x11, 0xec, 0x55, 0x0b,
	0x0a, 0xbe, 0xc0, 0x54, 0xdc, 0x8d, 0x48, 0x1c, 0xbd, 0x8f, 0x35, 0xae, 0x81, 0xa5, 0xa9, 0x49,
	0x50, 0xfa, 0x44, 0x3e, 0x8a, 0xaf, 0x25, 0x4d, 0x3b, 0xda, 0xee, 0xc2, 0xbb, 0xef, 0x9c, 0xef,
	0x24, 0x39, 0xe7, 0x04, 0x16, 0xfc, 0x8b, 0x57, 0x36, 0xad, 0xb5, 0xb2, 0x0a, 0x07, 0x0e, 0x9c,
	0x5f, 0x97, 0x4d, 0xcd, 0x75, 0x51, 0x32, 0x51, 0x65, 0x85, 0xd2, 0x3c, 0xb3, 0x4d, 0xcd, 0x4d,
	0x66, 0x35, 0xab, 0x0c, 0x2b, 0xac, 0x50, 0x55, 0xa7, 0x8f, 0x53, 0xc0, 0xeb, 0xea, 0x43, 0x69,
	0xf9, 0xa2, 0x85, 0x64, 0xba, 0x79, 0x68, 0x8f, 0x63, 0x02, 0x47, 0x3d, 0x26, 0x28, 0x42, 0x89,
	0x4f, 0xf7, 0x30, 0xfe, 0x41, 0xb0, 0x58, 0x29, 0x29, 0x85, 0xed, 0x94, 0xa7, 0x10, 0xbc, 0xf2,
	0xcf, 0x67, 0xd5, 0xeb, 0x3a, 0x80, 0x2f, 0x60, 0xbe, 0x11, 0x92, 0x1b, 0xcb, 0x64, 0x4d, 0x66,
	0x11, 0x4a, 0x3c, 0x3a, 0x10, 0xf8, 0x12, 0xa0, 0xbb, 0xa2, 0xa5, 0x88, 0xe7, 0xd6, 0x23, 0x06,
	0x63, 0xf0, 0x1f, 0x77, 0x6c, 0x4b, 0xfc, 0x08, 0x25, 0xc7, 0xd4, 0xcd, 0x2d, 0xf7, 0xc4, 0x4c,
	0x49, 0x82, 0x08, 0x25, 0x73, 0xea, 0xe6, 0xf6, 0x95, 0xb5, 0xd9, 0xfb, 0x0c, 0x9d, 0x78, 0x20,
	0xe2, 0x5f, 0x04, 0x27, 0x39, 0xdb, 0x89, 0x77, 0xd6, 0xc6, 0xed, 0xdc, 0x9e, 0x41, 0x78, 0x2f,
	0xb6, 0xdc, 0x58, 0x67, 0x77, 0x4e, 0x7b, 0x84, 0xef, 0x60, 0xb9, 0x19, 0xaa, 0x31, 0x64, 0x16,
	0x79, 0xc9, 0xe2, 0x06, 0xa7, 0xae, 0xb5, 0x74, 0xb4, 0xa2, 0x13, 0xdd, 0x90, 0xde, 0x1b, 0xa7,
	0xc7, 0xe0, 0xe7, 0x82, 0x7f, 0x3b, 0xff, 0x3e, 0x75, 0xf3, 0xd4, 0x6b, 0x70, 0xe0, 0x75, 0xda,
	0x57, 0x78, 0xd0, 0x57, 0x7c, 0x05, 0xcb, 0x7c, 0x45, 0xb9, 0xe1, 0xff, 0x75, 0xfe, 0x16, 0xba,
	0x0f, 0xbd, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x83, 0xf6, 0xfd, 0x74, 0x0f, 0x02, 0x00, 0x00,
}
