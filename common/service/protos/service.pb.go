// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	IMessage
	RegisterMessage
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_UNDEFINED    Type = 0
	Type_REGISTER     Type = 1
	Type_NORMAL       Type = 2
	Type_ADMIN        Type = 3
	Type_RESPONSE     Type = 4
	Type_EVENT        Type = 5
	Type_SYNC_REQUEST Type = 6
	Type_OP_LOG       Type = 7
)

var Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "REGISTER",
	2: "NORMAL",
	3: "ADMIN",
	4: "RESPONSE",
	5: "EVENT",
	6: "SYNC_REQUEST",
	7: "OP_LOG",
}
var Type_value = map[string]int32{
	"UNDEFINED":    0,
	"REGISTER":     1,
	"NORMAL":       2,
	"ADMIN":        3,
	"RESPONSE":     4,
	"EVENT":        5,
	"SYNC_REQUEST": 6,
	"OP_LOG":       7,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FROM int32

const (
	FROM_APISERVER     FROM = 0
	FROM_CONSENSUS     FROM = 1
	FROM_EXECUTOR      FROM = 2
	FROM_NETWORK       FROM = 3
	FROM_EVENTHUB      FROM = 4
	FROM_ADMINISTRATOR FROM = 5
	FROM_ORDER         FROM = 6
)

var FROM_name = map[int32]string{
	0: "APISERVER",
	1: "CONSENSUS",
	2: "EXECUTOR",
	3: "NETWORK",
	4: "EVENTHUB",
	5: "ADMINISTRATOR",
	6: "ORDER",
}
var FROM_value = map[string]int32{
	"APISERVER":     0,
	"CONSENSUS":     1,
	"EXECUTOR":      2,
	"NETWORK":       3,
	"EVENTHUB":      4,
	"ADMINISTRATOR": 5,
	"ORDER":         6,
}

func (x FROM) String() string {
	return proto.EnumName(FROM_name, int32(x))
}
func (FROM) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Event int32

const (
	// 1.Admin event
	Event_AddNamespaceEvent    Event = 0
	Event_DeleteNamespaceEvent Event = 1
	Event_AdminResponseEvent   Event = 2
	Event_OpLogAck             Event = 3
	Event_OpLogFetch           Event = 4
)

var Event_name = map[int32]string{
	0: "AddNamespaceEvent",
	1: "DeleteNamespaceEvent",
	2: "AdminResponseEvent",
	3: "OpLogAck",
	4: "OpLogFetch",
}
var Event_value = map[string]int32{
	"AddNamespaceEvent":    0,
	"DeleteNamespaceEvent": 1,
	"AdminResponseEvent":   2,
	"OpLogAck":             3,
	"OpLogFetch":           4,
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// IMessage is the wrapper of specific message used for internal component
type IMessage struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type    Type   `protobuf:"varint,2,opt,name=type,enum=Type" json:"type,omitempty"`
	From    FROM   `protobuf:"varint,3,opt,name=from,enum=FROM" json:"from,omitempty"`
	Event   Event  `protobuf:"varint,4,opt,name=event,enum=Event" json:"event,omitempty"`
	Ok      bool   `protobuf:"varint,5,opt,name=ok" json:"ok,omitempty"`
	Payload []byte `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	Cid     uint64 `protobuf:"varint,7,opt,name=cid" json:"cid,omitempty"`
}

func (m *IMessage) Reset()                    { *m = IMessage{} }
func (m *IMessage) String() string            { return proto.CompactTextString(m) }
func (*IMessage) ProtoMessage()               {}
func (*IMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IMessage) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_UNDEFINED
}

func (m *IMessage) GetFrom() FROM {
	if m != nil {
		return m.From
	}
	return FROM_APISERVER
}

func (m *IMessage) GetEvent() Event {
	if m != nil {
		return m.Event
	}
	return Event_AddNamespaceEvent
}

func (m *IMessage) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *IMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *IMessage) GetCid() uint64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

// RegisterMessage used by service component to connect to Dispatcher.
type RegisterMessage struct {
	Address   string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Port      string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Payload   []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *RegisterMessage) Reset()                    { *m = RegisterMessage{} }
func (m *RegisterMessage) String() string            { return proto.CompactTextString(m) }
func (*RegisterMessage) ProtoMessage()               {}
func (*RegisterMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterMessage) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RegisterMessage) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *RegisterMessage) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RegisterMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*IMessage)(nil), "IMessage")
	proto.RegisterType((*RegisterMessage)(nil), "RegisterMessage")
	proto.RegisterEnum("Type", Type_name, Type_value)
	proto.RegisterEnum("FROM", FROM_name, FROM_value)
	proto.RegisterEnum("Event", Event_name, Event_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dispatcher service

type DispatcherClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (Dispatcher_RegisterClient, error)
}

type dispatcherClient struct {
	cc *grpc.ClientConn
}

func NewDispatcherClient(cc *grpc.ClientConn) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) Register(ctx context.Context, opts ...grpc.CallOption) (Dispatcher_RegisterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Dispatcher_serviceDesc.Streams[0], c.cc, "/Dispatcher/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &dispatcherRegisterClient{stream}
	return x, nil
}

type Dispatcher_RegisterClient interface {
	Send(*IMessage) error
	Recv() (*IMessage, error)
	grpc.ClientStream
}

type dispatcherRegisterClient struct {
	grpc.ClientStream
}

func (x *dispatcherRegisterClient) Send(m *IMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dispatcherRegisterClient) Recv() (*IMessage, error) {
	m := new(IMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Dispatcher service

type DispatcherServer interface {
	Register(Dispatcher_RegisterServer) error
}

func RegisterDispatcherServer(s *grpc.Server, srv DispatcherServer) {
	s.RegisterService(&_Dispatcher_serviceDesc, srv)
}

func _Dispatcher_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DispatcherServer).Register(&dispatcherRegisterServer{stream})
}

type Dispatcher_RegisterServer interface {
	Send(*IMessage) error
	Recv() (*IMessage, error)
	grpc.ServerStream
}

type dispatcherRegisterServer struct {
	grpc.ServerStream
}

func (x *dispatcherRegisterServer) Send(m *IMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dispatcherRegisterServer) Recv() (*IMessage, error) {
	m := new(IMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Dispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Dispatcher_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 491 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x51, 0x8f, 0x93, 0x4e,
	0x14, 0xc5, 0x0b, 0x05, 0x5a, 0xee, 0xbf, 0xed, 0x7f, 0xf6, 0x46, 0x0d, 0x9a, 0x7d, 0x68, 0xfa,
	0x60, 0x9a, 0x3e, 0x34, 0x66, 0xf5, 0x0b, 0x60, 0x99, 0xae, 0xc4, 0x16, 0xea, 0x85, 0xae, 0xfa,
	0xb4, 0x41, 0x18, 0xbb, 0xa4, 0xdb, 0x82, 0x40, 0xd6, 0xf4, 0x2b, 0xf9, 0x29, 0xcd, 0x4c, 0x97,
	0xac, 0xfa, 0x76, 0xcf, 0x39, 0xe4, 0x9e, 0x1f, 0x33, 0x03, 0xc3, 0x5a, 0x54, 0x0f, 0x79, 0x2a,
	0xe6, 0x65, 0x55, 0x34, 0xc5, 0xe4, 0x97, 0x06, 0x7d, 0x7f, 0x2d, 0xea, 0x3a, 0xd9, 0x09, 0x1c,
	0x81, 0x9e, 0x67, 0x8e, 0x36, 0xd6, 0xa6, 0x06, 0xe9, 0x79, 0x86, 0x2f, 0xc1, 0x68, 0x4e, 0xa5,
	0x70, 0xf4, 0xb1, 0x36, 0x1d, 0x5d, 0x99, 0xf3, 0xf8, 0x54, 0x0a, 0x52, 0x96, 0x8c, 0xbe, 0x57,
	0xc5, 0xc1, 0xe9, 0x3e, 0x46, 0x4b, 0x0a, 0xd7, 0xa4, 0x2c, 0xbc, 0x04, 0x53, 0x3c, 0x88, 0x63,
	0xe3, 0x18, 0x2a, 0xb3, 0xe6, 0x5c, 0x2a, 0x3a, 0x9b, 0xb2, 0xa3, 0xd8, 0x3b, 0xe6, 0x58, 0x9b,
	0xf6, 0x49, 0x2f, 0xf6, 0xe8, 0x40, 0xaf, 0x4c, 0x4e, 0xf7, 0x45, 0x92, 0x39, 0xd6, 0x58, 0x9b,
	0x0e, 0xa8, 0x95, 0xc8, 0xa0, 0x9b, 0xe6, 0x99, 0xd3, 0x53, 0x38, 0x72, 0x9c, 0xfc, 0x84, 0xff,
	0x49, 0xec, 0xf2, 0xba, 0x11, 0x55, 0x8b, 0xec, 0x40, 0x2f, 0xc9, 0xb2, 0x4a, 0xd4, 0xb5, 0xe2,
	0xb6, 0xa9, 0x95, 0x88, 0x60, 0x94, 0x45, 0xd5, 0x28, 0x78, 0x9b, 0xd4, 0x8c, 0x97, 0x60, 0x1f,
	0x93, 0x83, 0xa8, 0xcb, 0x24, 0x15, 0x0a, 0xdd, 0xa6, 0x27, 0xe3, 0x4f, 0x14, 0xe3, 0x2f, 0x94,
	0xd9, 0x0f, 0x30, 0xe4, 0xbf, 0xe3, 0x10, 0xec, 0x6d, 0xe0, 0xf1, 0xa5, 0x1f, 0x70, 0x8f, 0x75,
	0x70, 0x00, 0x7d, 0xe2, 0xd7, 0x7e, 0x14, 0x73, 0x62, 0x1a, 0x02, 0x58, 0x41, 0x48, 0x6b, 0x77,
	0xc5, 0x74, 0xb4, 0xc1, 0x74, 0xbd, 0xb5, 0x1f, 0xb0, 0xee, 0xf9, 0xa3, 0x68, 0x13, 0x06, 0x11,
	0x67, 0x86, 0x0c, 0xf8, 0x0d, 0x0f, 0x62, 0x66, 0x22, 0x83, 0x41, 0xf4, 0x35, 0x58, 0xdc, 0x12,
	0xff, 0xb4, 0xe5, 0x51, 0xcc, 0x2c, 0xb9, 0x21, 0xdc, 0xdc, 0xae, 0xc2, 0x6b, 0xd6, 0x9b, 0xed,
	0xc1, 0x90, 0x67, 0x2a, 0x2b, 0xdd, 0x8d, 0x1f, 0x71, 0xba, 0xe1, 0xc4, 0x3a, 0x52, 0x2e, 0xe4,
	0xaa, 0x20, 0xda, 0x46, 0x4c, 0x93, 0xcb, 0xf9, 0x17, 0xbe, 0xd8, 0xc6, 0x21, 0x31, 0x1d, 0xff,
	0x83, 0x5e, 0xc0, 0xe3, 0xcf, 0x21, 0x7d, 0x3c, 0xf7, 0xaa, 0xa6, 0x0f, 0xdb, 0xf7, 0xcc, 0xc0,
	0x0b, 0x18, 0x2a, 0x20, 0x3f, 0x8a, 0xc9, 0x95, 0x5f, 0x9b, 0x12, 0x25, 0x24, 0x8f, 0x13, 0xb3,
	0x66, 0x47, 0x30, 0xd5, 0x25, 0xe1, 0x73, 0xb8, 0x70, 0xb3, 0x2c, 0x68, 0x8f, 0x44, 0x99, 0xac,
	0x83, 0x0e, 0x3c, 0xf3, 0xc4, 0xbd, 0x68, 0xc4, 0x3f, 0x89, 0x86, 0x2f, 0x00, 0xdd, 0xec, 0x90,
	0x1f, 0x49, 0xd4, 0x65, 0x71, 0xac, 0x1f, 0x7d, 0x5d, 0xb6, 0x87, 0xe5, 0xaa, 0xd8, 0xb9, 0xe9,
	0x9e, 0x75, 0x71, 0x04, 0xa0, 0xd4, 0x52, 0x34, 0xe9, 0x1d, 0x33, 0xae, 0xde, 0x01, 0x78, 0x79,
	0x5d, 0x26, 0x4d, 0x7a, 0x27, 0x2a, 0x7c, 0x0d, 0xfd, 0xf6, 0x5a, 0xd1, 0x9e, 0xb7, 0xaf, 0xf1,
	0xd5, 0xd3, 0x38, 0xe9, 0x4c, 0xb5, 0x37, 0xda, 0x37, 0x4b, 0x3d, 0xd9, 0xb7, 0xbf, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x52, 0xa8, 0x7a, 0xb4, 0xc3, 0x02, 0x00, 0x00,
}
