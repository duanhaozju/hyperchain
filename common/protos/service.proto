syntax = "proto3";

// Dispatcher response for Message distribute.
service Dispatcher {
    rpc Register(stream IMessage) returns(stream IMessage) {}
}

// IMessage is the wrapper of specific message used for internal component
message IMessage {
    uint64 id       = 1;
    Type type       = 2; // The basic message type.
    FROM from       = 3; // Define where the message come from.
    Event event     = 4; // Define the event type.
    bool ok         = 5; // used for response
    bytes payload   = 6; // The message body.
}

// RegisterMessage used by service component to connect to Dispatcher.
message RegisterMessage {
    string address      = 1;
    string port         = 2;
    string namespace    = 3;
    bytes payload       = 4; // retained field
}

enum Type {
    UNDEFINED = 0;
    REGISTER = 1;
    DISPATCH = 2;
    ADMIN = 3;
    RESPONSE = 4;
    EVENT = 5;
}

enum FROM {
    APISERVER = 0;
    CONSENSUS = 1;
    EXECUTOR  = 2;
    NETWORK   = 3;
    EVENTHUB  = 4;
    ADMINISTRATOR = 5;
}

enum Event {
    //1.Admin event
    AddNamespaceEvent = 0;
    DeleteNamespaceEvent = 1;
    AdminResponseEvent = 2;

    // 1.Executor event
    VCResetEvent = 3;
    ValidationEvent = 4;
    CommitEvent = 5;
    ChainSyncReqEvent = 6;
    ExecutorToP2PEvent = 7;
    ExecutorToConsensusEvent = 8;
}