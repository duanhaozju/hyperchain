syntax = "proto3";

// Dispatcher response for Message distribute.
service Dispatcher {
    rpc Register(stream Message) returns(stream Message) {}
}

// Message is the wrapper of specific message
message Message {

    enum Type {
        UNDEFINED = 0;
        REGISTER = 1;
        DISPATCH = 2;
        ADMIN = 3;
        RESPONSE = 4;
    }

    enum FROM {
        APISERVER = 0;
        CONSENSUS = 1;
        EXECUTOR  = 2;
        NETWORK   = 3;
    }

    Type type       = 1; // The basic message type.
    FROM from       = 2; // Define where the message come from.
    bool ok         = 3;
    bytes payload   = 4; // The message body.
}

// RegisterMessage used by service component to connect to Dispatcher.
message RegisterMessage {
    string address      = 1;
    string port         = 2;
    string namespace    = 3;
    bytes payload       = 4; // retained field
}

message ConsenterMessage {
    enum Type {
        InformPrimaryEvent = 0;
        VCResetEvent = 1;
    }
    Type type = 1;
    string namespace = 2;
    bytes payload = 3;
}

message ExecutorMessage {
    enum Type {
        UNDEFINED = 0;
        //TODO: specific message type
    }
    Type type = 1;
    string namespace = 2;
    bytes payload = 3;
}

message NetworkMessage {
    enum Type {
        UNDEFINED = 0;
        //TODO: specific message type
    }
    Type type = 1;
    string namespace = 2;
    bytes payload = 3;
}

message APIServerMessage {
    enum Type {
        UNDEFINED = 0;
        //TODO: specific message type
    }
    Type type = 1;
    string namespace = 2;
    bytes payload = 3;
}