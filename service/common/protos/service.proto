syntax = "proto3";

//Dispatcher response for Message distribute.
service Dispatcher {
    rpc Register(stream Message) returns(stream Message) {}
}

//Message is the wrapper of specific message
message Message {

    enum Type {
        UNDEFINED = 0;
        REGISTER = 1;
    }

    enum FROM {
        UNDEFINED = 0;
        APISERVER = 1;
        CONSENSUS = 2;
        EXECUTOR  = 3;
        NETWORK   = 4;
    }

    Type type       = 1; // The basic message type.
    FROM from       = 2; // Define where the message come from.
    bytes payload   = 3; // The message body.
}

//RegisterMessage used by service component to connect to Dispatcher.
message RegisterMessage {
    string address      = 1;
    string port         = 2;
    string namespace    = 3;
    bytes payload       = 4; // retained field
}

//ServiceMessage used by service component to send to Dispatcher.
message ServiceMessage {
    enum Type {

    }
    Type type = 1;
    bytes payload = 2;
}

//DispatcherMessage used by Dispatcher to send to specific service node.
message DispatcherMessage {
    enum Type {

    }
    Type type = 1;
    bytes payload = 2;
}