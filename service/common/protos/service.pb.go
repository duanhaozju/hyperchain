// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Message
	RegisterMessage
	ServiceMessage
	DispatcherMessage
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message_Type int32

const (
	Message_UNDEFINED Message_Type = 0
	Message_REGISTER  Message_Type = 1
	Message_INVOKE    Message_Type = 2
)

var Message_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "REGISTER",
	2: "INVOKE",
}
var Message_Type_value = map[string]int32{
	"UNDEFINED": 0,
	"REGISTER":  1,
	"INVOKE":    2,
}

func (x Message_Type) String() string {
	return proto.EnumName(Message_Type_name, int32(x))
}
func (Message_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Message_FROM int32

const (
	Message_APISERVER Message_FROM = 0
	Message_CONSENSUS Message_FROM = 1
	Message_EXECUTOR  Message_FROM = 2
	Message_NETWORK   Message_FROM = 3
)

var Message_FROM_name = map[int32]string{
	0: "APISERVER",
	1: "CONSENSUS",
	2: "EXECUTOR",
	3: "NETWORK",
}
var Message_FROM_value = map[string]int32{
	"APISERVER": 0,
	"CONSENSUS": 1,
	"EXECUTOR":  2,
	"NETWORK":   3,
}

func (x Message_FROM) String() string {
	return proto.EnumName(Message_FROM_name, int32(x))
}
func (Message_FROM) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type ServiceMessage_Type int32

const (
	ServiceMessage_InformPrimaryEvent ServiceMessage_Type = 0
	ServiceMessage_VCResetEvent       ServiceMessage_Type = 1
)

var ServiceMessage_Type_name = map[int32]string{
	0: "InformPrimaryEvent",
	1: "VCResetEvent",
}
var ServiceMessage_Type_value = map[string]int32{
	"InformPrimaryEvent": 0,
	"VCResetEvent":       1,
}

func (x ServiceMessage_Type) String() string {
	return proto.EnumName(ServiceMessage_Type_name, int32(x))
}
func (ServiceMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type DispatcherMessage_Type int32

const (
	DispatcherMessage_Test DispatcherMessage_Type = 0
)

var DispatcherMessage_Type_name = map[int32]string{
	0: "Test",
}
var DispatcherMessage_Type_value = map[string]int32{
	"Test": 0,
}

func (x DispatcherMessage_Type) String() string {
	return proto.EnumName(DispatcherMessage_Type_name, int32(x))
}
func (DispatcherMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

// Message is the wrapper of specific message
type Message struct {
	Type    Message_Type `protobuf:"varint,1,opt,name=type,enum=Message_Type" json:"type,omitempty"`
	From    Message_FROM `protobuf:"varint,2,opt,name=from,enum=Message_FROM" json:"from,omitempty"`
	Payload []byte       `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetType() Message_Type {
	if m != nil {
		return m.Type
	}
	return Message_UNDEFINED
}

func (m *Message) GetFrom() Message_FROM {
	if m != nil {
		return m.From
	}
	return Message_APISERVER
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// RegisterMessage used by service component to connect to Dispatcher.
type RegisterMessage struct {
	Address   string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Port      string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Payload   []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *RegisterMessage) Reset()                    { *m = RegisterMessage{} }
func (m *RegisterMessage) String() string            { return proto.CompactTextString(m) }
func (*RegisterMessage) ProtoMessage()               {}
func (*RegisterMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterMessage) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RegisterMessage) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *RegisterMessage) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RegisterMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// ServiceMessage used by service component to send to Dispatcher.
type ServiceMessage struct {
	Type      ServiceMessage_Type `protobuf:"varint,1,opt,name=type,enum=ServiceMessage_Type" json:"type,omitempty"`
	Namespace string              `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Payload   []byte              `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ServiceMessage) Reset()                    { *m = ServiceMessage{} }
func (m *ServiceMessage) String() string            { return proto.CompactTextString(m) }
func (*ServiceMessage) ProtoMessage()               {}
func (*ServiceMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServiceMessage) GetType() ServiceMessage_Type {
	if m != nil {
		return m.Type
	}
	return ServiceMessage_InformPrimaryEvent
}

func (m *ServiceMessage) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ServiceMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// DispatcherMessage used by Dispatcher to send to specific service node.
type DispatcherMessage struct {
	Type    DispatcherMessage_Type `protobuf:"varint,1,opt,name=type,enum=DispatcherMessage_Type" json:"type,omitempty"`
	Payload []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *DispatcherMessage) Reset()                    { *m = DispatcherMessage{} }
func (m *DispatcherMessage) String() string            { return proto.CompactTextString(m) }
func (*DispatcherMessage) ProtoMessage()               {}
func (*DispatcherMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DispatcherMessage) GetType() DispatcherMessage_Type {
	if m != nil {
		return m.Type
	}
	return DispatcherMessage_Test
}

func (m *DispatcherMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "Message")
	proto.RegisterType((*RegisterMessage)(nil), "RegisterMessage")
	proto.RegisterType((*ServiceMessage)(nil), "ServiceMessage")
	proto.RegisterType((*DispatcherMessage)(nil), "DispatcherMessage")
	proto.RegisterEnum("Message_Type", Message_Type_name, Message_Type_value)
	proto.RegisterEnum("Message_FROM", Message_FROM_name, Message_FROM_value)
	proto.RegisterEnum("ServiceMessage_Type", ServiceMessage_Type_name, ServiceMessage_Type_value)
	proto.RegisterEnum("DispatcherMessage_Type", DispatcherMessage_Type_name, DispatcherMessage_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dispatcher service

type DispatcherClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (Dispatcher_RegisterClient, error)
}

type dispatcherClient struct {
	cc *grpc.ClientConn
}

func NewDispatcherClient(cc *grpc.ClientConn) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) Register(ctx context.Context, opts ...grpc.CallOption) (Dispatcher_RegisterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Dispatcher_serviceDesc.Streams[0], c.cc, "/Dispatcher/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &dispatcherRegisterClient{stream}
	return x, nil
}

type Dispatcher_RegisterClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type dispatcherRegisterClient struct {
	grpc.ClientStream
}

func (x *dispatcherRegisterClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dispatcherRegisterClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Dispatcher service

type DispatcherServer interface {
	Register(Dispatcher_RegisterServer) error
}

func RegisterDispatcherServer(s *grpc.Server, srv DispatcherServer) {
	s.RegisterService(&_Dispatcher_serviceDesc, srv)
}

func _Dispatcher_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DispatcherServer).Register(&dispatcherRegisterServer{stream})
}

type Dispatcher_RegisterServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type dispatcherRegisterServer struct {
	grpc.ServerStream
}

func (x *dispatcherRegisterServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dispatcherRegisterServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Dispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Dispatcher_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0xdd, 0x8e, 0x93, 0x40,
	0x14, 0x66, 0x58, 0xb2, 0xc0, 0xb1, 0x5d, 0xc7, 0x89, 0x51, 0x62, 0xbc, 0x58, 0x89, 0x17, 0x24,
	0x26, 0xb8, 0xa9, 0x0f, 0x60, 0x4c, 0x3b, 0x6b, 0xc8, 0x66, 0xa1, 0x19, 0x68, 0xf5, 0x76, 0x6c,
	0xa7, 0x95, 0xa4, 0x14, 0x32, 0x33, 0xa9, 0xe1, 0x7d, 0x7c, 0x2b, 0x5f, 0xc6, 0x40, 0x8b, 0x85,
	0x9a, 0xec, 0xdd, 0x9c, 0xdf, 0xef, 0x67, 0x0e, 0x8c, 0x95, 0x90, 0x87, 0x7c, 0x25, 0xc2, 0x4a,
	0x96, 0xba, 0xf4, 0xff, 0x20, 0xb0, 0x1f, 0x85, 0x52, 0x7c, 0x2b, 0xc8, 0x3b, 0xb0, 0x74, 0x5d,
	0x09, 0x0f, 0xdd, 0xa2, 0xe0, 0x66, 0x32, 0x0e, 0x4f, 0xf9, 0x30, 0xab, 0x2b, 0xc1, 0xda, 0x52,
	0xd3, 0xb2, 0x91, 0x65, 0xe1, 0x99, 0x17, 0x2d, 0xf7, 0x2c, 0x79, 0x64, 0x6d, 0x89, 0x78, 0x60,
	0x57, 0xbc, 0xde, 0x95, 0x7c, 0xed, 0x5d, 0xdd, 0xa2, 0x60, 0xc4, 0xba, 0xd0, 0xff, 0x08, 0x56,
	0xb3, 0x8a, 0x8c, 0xc1, 0x5d, 0xc4, 0x33, 0x7a, 0x1f, 0xc5, 0x74, 0x86, 0x0d, 0x32, 0x02, 0x87,
	0xd1, 0xaf, 0x51, 0x9a, 0x51, 0x86, 0x11, 0x01, 0xb8, 0x8e, 0xe2, 0x65, 0xf2, 0x40, 0xb1, 0xe9,
	0x7f, 0x06, 0xab, 0x59, 0xdc, 0x0c, 0x7c, 0x99, 0x47, 0x29, 0x65, 0x4b, 0xca, 0xb0, 0xd1, 0x84,
	0xd3, 0x24, 0x4e, 0x69, 0x9c, 0x2e, 0x52, 0x8c, 0x9a, 0x79, 0xfa, 0x9d, 0x4e, 0x17, 0x59, 0xc2,
	0xb0, 0x49, 0x9e, 0x81, 0x1d, 0xd3, 0xec, 0x5b, 0xc2, 0x1e, 0xf0, 0x95, 0xff, 0x0b, 0x9e, 0x33,
	0xb1, 0xcd, 0x95, 0x16, 0xb2, 0x13, 0xe9, 0x81, 0xcd, 0xd7, 0x6b, 0x29, 0x94, 0x6a, 0x75, 0xba,
	0xac, 0x0b, 0x09, 0x01, 0xab, 0x2a, 0xa5, 0x6e, 0xb5, 0xb9, 0xac, 0x7d, 0x93, 0xb7, 0xe0, 0xee,
	0x79, 0x21, 0x54, 0xc5, 0x57, 0xa2, 0x95, 0xe3, 0xb2, 0x73, 0xa2, 0x2f, 0xd5, 0x1a, 0x4a, 0xfd,
	0x8d, 0xe0, 0x26, 0x3d, 0x1a, 0xdd, 0x01, 0x07, 0x03, 0x77, 0x5f, 0x86, 0xc3, 0x72, 0xdf, 0xe4,
	0x01, 0xa8, 0xf9, 0x04, 0xe8, 0x85, 0xbf, 0x77, 0x27, 0x7f, 0x5f, 0x01, 0x89, 0xf6, 0x9b, 0x52,
	0x16, 0x73, 0x99, 0x17, 0x5c, 0xd6, 0xf4, 0x20, 0xf6, 0x1a, 0x1b, 0x04, 0xc3, 0x68, 0x39, 0x65,
	0x42, 0x09, 0x7d, 0xcc, 0x20, 0x7f, 0x07, 0x2f, 0x66, 0xb9, 0xaa, 0xb8, 0x5e, 0xfd, 0x3c, 0x3b,
	0xf4, 0x61, 0x40, 0xf4, 0x75, 0xf8, 0x5f, 0x47, 0x9f, 0x6b, 0x8f, 0x8d, 0x39, 0x64, 0x83, 0x4f,
	0x6c, 0x1c, 0xb0, 0x32, 0xa1, 0x34, 0x36, 0x26, 0x13, 0x80, 0xf3, 0x2e, 0xf2, 0x1e, 0x9c, 0xee,
	0x6f, 0x88, 0xd3, 0x1d, 0xd2, 0x9b, 0x7f, 0x2f, 0xdf, 0x08, 0xd0, 0x1d, 0xfa, 0x71, 0xdd, 0x9e,
	0xe9, 0xa7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xfe, 0x38, 0x15, 0xb7, 0x02, 0x00, 0x00,
}
