// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Message
	RegisterMessage
	ConsenterMessage
	ExecutorMessage
	NetworkMessage
	APIServerMessage
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message_Type int32

const (
	Message_UNDEFINED Message_Type = 0
	Message_REGISTER  Message_Type = 1
	Message_DISPATCH  Message_Type = 2
	Message_ADMIN     Message_Type = 3
	Message_RESPONSE  Message_Type = 4
)

var Message_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "REGISTER",
	2: "DISPATCH",
	3: "ADMIN",
	4: "RESPONSE",
}
var Message_Type_value = map[string]int32{
	"UNDEFINED": 0,
	"REGISTER":  1,
	"DISPATCH":  2,
	"ADMIN":     3,
	"RESPONSE":  4,
}

func (x Message_Type) String() string {
	return proto.EnumName(Message_Type_name, int32(x))
}
func (Message_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Message_FROM int32

const (
	Message_APISERVER Message_FROM = 0
	Message_CONSENSUS Message_FROM = 1
	Message_EXECUTOR  Message_FROM = 2
	Message_NETWORK   Message_FROM = 3
	Message_EVENTHUB  Message_FROM = 4
)

var Message_FROM_name = map[int32]string{
	0: "APISERVER",
	1: "CONSENSUS",
	2: "EXECUTOR",
	3: "NETWORK",
	4: "EVENTHUB",
}
var Message_FROM_value = map[string]int32{
	"APISERVER": 0,
	"CONSENSUS": 1,
	"EXECUTOR":  2,
	"NETWORK":   3,
	"EVENTHUB":  4,
}

func (x Message_FROM) String() string {
	return proto.EnumName(Message_FROM_name, int32(x))
}
func (Message_FROM) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type ConsenterMessage_Type int32

const (
	ConsenterMessage_InformPrimaryEvent ConsenterMessage_Type = 0
	ConsenterMessage_VCResetEvent       ConsenterMessage_Type = 1
)

var ConsenterMessage_Type_name = map[int32]string{
	0: "InformPrimaryEvent",
	1: "VCResetEvent",
}
var ConsenterMessage_Type_value = map[string]int32{
	"InformPrimaryEvent": 0,
	"VCResetEvent":       1,
}

func (x ConsenterMessage_Type) String() string {
	return proto.EnumName(ConsenterMessage_Type_name, int32(x))
}
func (ConsenterMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type ExecutorMessage_Type int32

const (
	ExecutorMessage_UNDEFINED ExecutorMessage_Type = 0
)

var ExecutorMessage_Type_name = map[int32]string{
	0: "UNDEFINED",
}
var ExecutorMessage_Type_value = map[string]int32{
	"UNDEFINED": 0,
}

func (x ExecutorMessage_Type) String() string {
	return proto.EnumName(ExecutorMessage_Type_name, int32(x))
}
func (ExecutorMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type NetworkMessage_Type int32

const (
	NetworkMessage_UNDEFINED NetworkMessage_Type = 0
)

var NetworkMessage_Type_name = map[int32]string{
	0: "UNDEFINED",
}
var NetworkMessage_Type_value = map[string]int32{
	"UNDEFINED": 0,
}

func (x NetworkMessage_Type) String() string {
	return proto.EnumName(NetworkMessage_Type_name, int32(x))
}
func (NetworkMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type APIServerMessage_Type int32

const (
	APIServerMessage_UNDEFINED APIServerMessage_Type = 0
)

var APIServerMessage_Type_name = map[int32]string{
	0: "UNDEFINED",
}
var APIServerMessage_Type_value = map[string]int32{
	"UNDEFINED": 0,
}

func (x APIServerMessage_Type) String() string {
	return proto.EnumName(APIServerMessage_Type_name, int32(x))
}
func (APIServerMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

// Message is the wrapper of specific message
type Message struct {
	Type    Message_Type `protobuf:"varint,1,opt,name=type,enum=Message_Type" json:"type,omitempty"`
	From    Message_FROM `protobuf:"varint,2,opt,name=from,enum=Message_FROM" json:"from,omitempty"`
	Ok      bool         `protobuf:"varint,3,opt,name=ok" json:"ok,omitempty"`
	Payload []byte       `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetType() Message_Type {
	if m != nil {
		return m.Type
	}
	return Message_UNDEFINED
}

func (m *Message) GetFrom() Message_FROM {
	if m != nil {
		return m.From
	}
	return Message_APISERVER
}

func (m *Message) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// RegisterMessage used by service component to connect to Dispatcher.
type RegisterMessage struct {
	Address   string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Port      string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Payload   []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *RegisterMessage) Reset()                    { *m = RegisterMessage{} }
func (m *RegisterMessage) String() string            { return proto.CompactTextString(m) }
func (*RegisterMessage) ProtoMessage()               {}
func (*RegisterMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterMessage) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RegisterMessage) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *RegisterMessage) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RegisterMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ConsenterMessage struct {
	Type      ConsenterMessage_Type `protobuf:"varint,1,opt,name=type,enum=ConsenterMessage_Type" json:"type,omitempty"`
	Namespace string                `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Payload   []byte                `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ConsenterMessage) Reset()                    { *m = ConsenterMessage{} }
func (m *ConsenterMessage) String() string            { return proto.CompactTextString(m) }
func (*ConsenterMessage) ProtoMessage()               {}
func (*ConsenterMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConsenterMessage) GetType() ConsenterMessage_Type {
	if m != nil {
		return m.Type
	}
	return ConsenterMessage_InformPrimaryEvent
}

func (m *ConsenterMessage) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ConsenterMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ExecutorMessage struct {
	Type      ExecutorMessage_Type `protobuf:"varint,1,opt,name=type,enum=ExecutorMessage_Type" json:"type,omitempty"`
	Namespace string               `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Payload   []byte               `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ExecutorMessage) Reset()                    { *m = ExecutorMessage{} }
func (m *ExecutorMessage) String() string            { return proto.CompactTextString(m) }
func (*ExecutorMessage) ProtoMessage()               {}
func (*ExecutorMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ExecutorMessage) GetType() ExecutorMessage_Type {
	if m != nil {
		return m.Type
	}
	return ExecutorMessage_UNDEFINED
}

func (m *ExecutorMessage) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ExecutorMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type NetworkMessage struct {
	Type      NetworkMessage_Type `protobuf:"varint,1,opt,name=type,enum=NetworkMessage_Type" json:"type,omitempty"`
	Namespace string              `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Payload   []byte              `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *NetworkMessage) Reset()                    { *m = NetworkMessage{} }
func (m *NetworkMessage) String() string            { return proto.CompactTextString(m) }
func (*NetworkMessage) ProtoMessage()               {}
func (*NetworkMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NetworkMessage) GetType() NetworkMessage_Type {
	if m != nil {
		return m.Type
	}
	return NetworkMessage_UNDEFINED
}

func (m *NetworkMessage) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *NetworkMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type APIServerMessage struct {
	Type      APIServerMessage_Type `protobuf:"varint,1,opt,name=type,enum=APIServerMessage_Type" json:"type,omitempty"`
	Namespace string                `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Payload   []byte                `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *APIServerMessage) Reset()                    { *m = APIServerMessage{} }
func (m *APIServerMessage) String() string            { return proto.CompactTextString(m) }
func (*APIServerMessage) ProtoMessage()               {}
func (*APIServerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *APIServerMessage) GetType() APIServerMessage_Type {
	if m != nil {
		return m.Type
	}
	return APIServerMessage_UNDEFINED
}

func (m *APIServerMessage) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *APIServerMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "Message")
	proto.RegisterType((*RegisterMessage)(nil), "RegisterMessage")
	proto.RegisterType((*ConsenterMessage)(nil), "ConsenterMessage")
	proto.RegisterType((*ExecutorMessage)(nil), "ExecutorMessage")
	proto.RegisterType((*NetworkMessage)(nil), "NetworkMessage")
	proto.RegisterType((*APIServerMessage)(nil), "APIServerMessage")
	proto.RegisterEnum("Message_Type", Message_Type_name, Message_Type_value)
	proto.RegisterEnum("Message_FROM", Message_FROM_name, Message_FROM_value)
	proto.RegisterEnum("ConsenterMessage_Type", ConsenterMessage_Type_name, ConsenterMessage_Type_value)
	proto.RegisterEnum("ExecutorMessage_Type", ExecutorMessage_Type_name, ExecutorMessage_Type_value)
	proto.RegisterEnum("NetworkMessage_Type", NetworkMessage_Type_name, NetworkMessage_Type_value)
	proto.RegisterEnum("APIServerMessage_Type", APIServerMessage_Type_name, APIServerMessage_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dispatcher service

type DispatcherClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (Dispatcher_RegisterClient, error)
}

type dispatcherClient struct {
	cc *grpc.ClientConn
}

func NewDispatcherClient(cc *grpc.ClientConn) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) Register(ctx context.Context, opts ...grpc.CallOption) (Dispatcher_RegisterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Dispatcher_serviceDesc.Streams[0], c.cc, "/Dispatcher/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &dispatcherRegisterClient{stream}
	return x, nil
}

type Dispatcher_RegisterClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type dispatcherRegisterClient struct {
	grpc.ClientStream
}

func (x *dispatcherRegisterClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dispatcherRegisterClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Dispatcher service

type DispatcherServer interface {
	Register(Dispatcher_RegisterServer) error
}

func RegisterDispatcherServer(s *grpc.Server, srv DispatcherServer) {
	s.RegisterService(&_Dispatcher_serviceDesc, srv)
}

func _Dispatcher_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DispatcherServer).Register(&dispatcherRegisterServer{stream})
}

type Dispatcher_RegisterServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type dispatcherRegisterServer struct {
	grpc.ServerStream
}

func (x *dispatcherRegisterServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dispatcherRegisterServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Dispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Dispatcher_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb3, 0x8e, 0x21, 0xf1, 0x90, 0xa4, 0xab, 0x15, 0xad, 0x2c, 0xc4, 0x21, 0x58, 0x1c,
	0x02, 0x07, 0xab, 0x0a, 0x4f, 0x10, 0xec, 0x2d, 0x35, 0x28, 0x4e, 0xb4, 0x76, 0x02, 0x57, 0x93,
	0x4c, 0x4b, 0x14, 0xe2, 0xb5, 0x76, 0x4d, 0x4a, 0x1e, 0x01, 0x21, 0x6e, 0x3c, 0x04, 0x8f, 0x89,
	0xec, 0xd4, 0xa5, 0x8e, 0xa0, 0x27, 0x7a, 0xdb, 0x99, 0xf9, 0x35, 0xf3, 0xe9, 0x9f, 0xb1, 0xa1,
	0xab, 0x51, 0x6d, 0x57, 0x0b, 0x74, 0x33, 0x25, 0x73, 0xe9, 0xfc, 0x34, 0xa0, 0x35, 0x46, 0xad,
	0x93, 0x4b, 0x64, 0xcf, 0xc0, 0xcc, 0x77, 0x19, 0xda, 0xa4, 0x4f, 0x06, 0xbd, 0x61, 0xd7, 0xbd,
	0xce, 0xbb, 0xf1, 0x2e, 0x43, 0x51, 0x96, 0x0a, 0xc9, 0x85, 0x92, 0x1b, 0xdb, 0x38, 0x90, 0x9c,
	0x89, 0xc9, 0x58, 0x94, 0x25, 0xd6, 0x03, 0x43, 0xae, 0xed, 0x66, 0x9f, 0x0c, 0xda, 0xc2, 0x90,
	0x6b, 0x66, 0x43, 0x2b, 0x4b, 0x76, 0x9f, 0x65, 0xb2, 0xb4, 0xcd, 0x3e, 0x19, 0x74, 0x44, 0x15,
	0x3a, 0x6f, 0xc1, 0x2c, 0x5a, 0xb3, 0x2e, 0x58, 0xb3, 0xd0, 0xe7, 0x67, 0x41, 0xc8, 0x7d, 0xda,
	0x60, 0x1d, 0x68, 0x0b, 0xfe, 0x26, 0x88, 0x62, 0x2e, 0x28, 0x29, 0x22, 0x3f, 0x88, 0xa6, 0xa3,
	0xd8, 0x3b, 0xa7, 0x06, 0xb3, 0xe0, 0xc1, 0xc8, 0x1f, 0x07, 0x21, 0x6d, 0xee, 0x65, 0xd1, 0x74,
	0x12, 0x46, 0x9c, 0x9a, 0xce, 0x18, 0xcc, 0x82, 0xa1, 0xe8, 0x35, 0x9a, 0x06, 0x11, 0x17, 0x73,
	0x2e, 0x68, 0xa3, 0x08, 0xbd, 0x42, 0x11, 0x46, 0xb3, 0x68, 0xdf, 0x8c, 0x7f, 0xe0, 0xde, 0x2c,
	0x9e, 0x08, 0x6a, 0xb0, 0x47, 0xd0, 0x0a, 0x79, 0xfc, 0x7e, 0x22, 0xde, 0xed, 0xdb, 0xf1, 0x39,
	0x0f, 0xe3, 0xf3, 0xd9, 0x6b, 0x6a, 0x3a, 0x57, 0x70, 0x24, 0xf0, 0x72, 0xa5, 0x73, 0x54, 0x95,
	0x3b, 0x36, 0xb4, 0x92, 0xe5, 0x52, 0xa1, 0xd6, 0xa5, 0x41, 0x96, 0xa8, 0x42, 0xc6, 0xc0, 0xcc,
	0xa4, 0xca, 0x4b, 0x53, 0x2c, 0x51, 0xbe, 0xd9, 0x53, 0xb0, 0xd2, 0x64, 0x83, 0x3a, 0x4b, 0x16,
	0x58, 0x9a, 0x61, 0x89, 0x3f, 0x89, 0x3b, 0x3c, 0xf9, 0x45, 0x80, 0x7a, 0x32, 0xd5, 0x98, 0xde,
	0x1a, 0xfd, 0xb2, 0xb6, 0x98, 0x13, 0xf7, 0x50, 0x70, 0x7b, 0x43, 0xb5, 0xc1, 0xc6, 0x1d, 0x83,
	0x9b, 0xf5, 0xc1, 0xa7, 0xd7, 0xcb, 0x38, 0x01, 0x16, 0xa4, 0x17, 0x52, 0x6d, 0xa6, 0x6a, 0xb5,
	0x49, 0xd4, 0x8e, 0x6f, 0x31, 0xcd, 0x69, 0x83, 0x51, 0xe8, 0xcc, 0x3d, 0x81, 0x1a, 0xf3, 0x7d,
	0x86, 0x38, 0xdf, 0x09, 0x1c, 0xf1, 0xaf, 0xb8, 0xf8, 0x92, 0xcb, 0x1b, 0xd2, 0x17, 0x35, 0xd2,
	0x63, 0xf7, 0xa0, 0xfe, 0x3f, 0x40, 0x8f, 0xff, 0x7a, 0x35, 0xce, 0x37, 0x02, 0xbd, 0x10, 0xf3,
	0x2b, 0xa9, 0xd6, 0x15, 0xcc, 0xa0, 0x06, 0xf3, 0xd8, 0xad, 0x97, 0xef, 0x91, 0xe5, 0x07, 0x01,
	0x5a, 0x5c, 0x21, 0xaa, 0xed, 0xbf, 0x97, 0x78, 0x28, 0xb8, 0x3f, 0x9e, 0xe1, 0x10, 0xc0, 0x5f,
	0xe9, 0x2c, 0xc9, 0x17, 0x9f, 0x50, 0xb1, 0xe7, 0xd0, 0xae, 0x6e, 0x9b, 0xb5, 0xab, 0x2f, 0xf8,
	0xc9, 0xcd, 0xcb, 0x69, 0x0c, 0xc8, 0x29, 0xf9, 0xf8, 0xb0, 0xfc, 0x3f, 0xbc, 0xfa, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0xa6, 0x72, 0x91, 0x3e, 0x30, 0x04, 0x00, 0x00,
}
