package builtin

import (
	"fmt"
	"regexp"
	"strconv"
	"sync"
	"time"
)

var (
	NHcode = ""
	// NewUser
	NHmethod1 = "0x32c1680c100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000"
	// QueryUser
	NHmethod2 = "0xb5cf8eab"
)

func NHBANK(duration, tps, instant, estimation int, simulate bool) {
	_, globalAccounts = read(accountList, accountNumber)
	logger.Notice(len(globalAccounts))
	contractAddr, success := deploy()
	NHcontract = contractAddr
	if success == false {
		logger.Error("Deploy Failed!")
		return
	}
	newUser(contractAddr, globalAccounts)
	logger.Notice("New User Finish")
	time.Sleep(10 * time.Second)
	timeBegin := time.Now().UnixNano()
	getUserInfo(duration, tps, instant, simulate)
	timeEnd := time.Now().UnixNano()
	queryStatistic(timeBegin+int64(estimation)*time.Second.Nanoseconds(), timeEnd-int64(estimation)*time.Second.Nanoseconds(), globalNodes[2])
}
func deploy() (string, bool) {
	node := globalNodes[0]
	pattern, err := regexp.Compile(".*:..(.*):(.*)")
	if err != nil {
		return "", false
	}
	ret := pattern.FindStringSubmatch(string(node))
	if ret == nil || len(ret) < 3 {
		return "", false
	}
	ip := ret[1]
	port, _ := strconv.ParseInt(ret[2], 10, 64)
	resp, success := ExecuteTransaction(genesisPassword, globalAccounts[0], "", time.Now().UnixNano(), 0, NHcode, 1, ip, int(port), true, false)
	if success == false {
		return "", false
	} else {
		pattern, err := regexp.Compile(".*contractAddress...(.*?)\"")
		if err != nil {
			return "", false
		}
		ret := pattern.FindStringSubmatch(string(resp))
		if ret == nil || len(ret) < 2 {
			return "", false
		}
		logger.Notice("Deploy contract success! Contract Address:", ret[1])
		return ret[1], true
	}
}
func newUser(contractAddr string, accounts []string) {
	node := globalNodes[0]
	pattern, err := regexp.Compile(".*:..(.*):(.*)")
	if err != nil {
		return
	}
	ret := pattern.FindStringSubmatch(string(node))
	if ret == nil || len(ret) < 3 {
		return
	}
	ip := ret[1]
	port, _ := strconv.ParseInt(ret[2], 10, 64)
	logger.Notice(ip, port)
	// deploy account to blockchain
	for i := 0; i < len(accounts); i += 1 {
		command, success := NewTransaction(genesisPassword, "0x"+accounts[i], contractAddr, time.Now().UnixNano(), 0, NHmethod1, 1, ip, int(port), false, false)
		if success == false {
			logger.Error("create transaction failed")
		} else {
			pattern, _ := regexp.Compile(".*'(.*?)'")
			ret := pattern.FindStringSubmatch(command)
			if ret == nil || len(ret) < 2 {
				logger.Error("create transaction failed")
			}
			cmd := ret[1]
			logger.Notice(command)
			server := fmt.Sprintf("http://%s:%d", ip, port)
			resp, err := communication(cmd, server)
			if err != nil {
				logger.Error("execute transaction failed")
			} else {
				logger.Notice("Result:", string(resp))
			}
		}
	}
}
func getUserInfo(tps, instant, duration int, simulate bool) {
	if tps == 0 || instant == 0 {
		output(false, "invalid tps or instant parameter")
		return
	}
	start := time.Now().Unix()
	end := start + int64(duration)
	var interval time.Duration
	tmp := float64(instant) / float64(tps)
	if tmp >= 1 {
		output(false, "invalid tps or instant parameter")
		return
	} else if tmp >= 0.001 && tmp < 1 {
		interval = time.Duration(tmp*1000) * time.Millisecond
	} else if tmp < 0.001 && tmp >= 0.001*0.001 {
		interval = time.Duration(tmp*1000*1000) * time.Microsecond
	} else {
		interval = time.Duration(tmp*1000*1000*1000) * time.Nanosecond
	}
	logger.Notice("=============== Stress Test Begin ===============")
	logger.Notice("=============== Arguments =======================")
	logger.Notice("\tTPS: ", tps)
	logger.Notice("\tInstant Concurrency: ", instant)
	logger.Notice("\tDuration: ", duration)
	var wg sync.WaitGroup
	var testType int
	if simulate == true {
		testType = 3
	} else {
		testType = 2
	}
	for time.Now().Unix() < end {
		go sendBatch(globalNodes, len(globalNodes), instant, testType, 0, wg)
		time.Sleep(interval)
	}
	wg.Wait()
	logger.Notice("=============== Stress Test Finish ===============")
}
