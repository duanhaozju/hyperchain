// Code generated by protoc-gen-go.
// source: node.proto
// DO NOT EDIT!

/*
Package trie is a generated protocol buffer package.

It is generated from these files:
	node.proto

It has these top-level messages:
	Node
	ShortNode
	FullNode
	HashNode
	ValueNode
	BlankNode
*/
package trie

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Node struct {
	// Types that are valid to be assigned to Val:
	//	*Node_Shortnode
	//	*Node_Fullnode
	//	*Node_Hashnode
	//	*Node_Valuenode
	//	*Node_Blanknode
	Val isNode_Val `protobuf_oneof:"val"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isNode_Val interface {
	isNode_Val()
}

type Node_Shortnode struct {
	Shortnode *ShortNode `protobuf:"bytes,1,opt,name=shortnode,oneof"`
}
type Node_Fullnode struct {
	Fullnode *FullNode `protobuf:"bytes,2,opt,name=fullnode,oneof"`
}
type Node_Hashnode struct {
	Hashnode *HashNode `protobuf:"bytes,3,opt,name=hashnode,oneof"`
}
type Node_Valuenode struct {
	Valuenode *ValueNode `protobuf:"bytes,4,opt,name=valuenode,oneof"`
}
type Node_Blanknode struct {
	Blanknode *BlankNode `protobuf:"bytes,5,opt,name=blanknode,oneof"`
}

func (*Node_Shortnode) isNode_Val() {}
func (*Node_Fullnode) isNode_Val()  {}
func (*Node_Hashnode) isNode_Val()  {}
func (*Node_Valuenode) isNode_Val() {}
func (*Node_Blanknode) isNode_Val() {}

func (m *Node) GetVal() isNode_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *Node) GetShortnode() *ShortNode {
	if x, ok := m.GetVal().(*Node_Shortnode); ok {
		return x.Shortnode
	}
	return nil
}

func (m *Node) GetFullnode() *FullNode {
	if x, ok := m.GetVal().(*Node_Fullnode); ok {
		return x.Fullnode
	}
	return nil
}

func (m *Node) GetHashnode() *HashNode {
	if x, ok := m.GetVal().(*Node_Hashnode); ok {
		return x.Hashnode
	}
	return nil
}

func (m *Node) GetValuenode() *ValueNode {
	if x, ok := m.GetVal().(*Node_Valuenode); ok {
		return x.Valuenode
	}
	return nil
}

func (m *Node) GetBlanknode() *BlankNode {
	if x, ok := m.GetVal().(*Node_Blanknode); ok {
		return x.Blanknode
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Node) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Node_OneofMarshaler, _Node_OneofUnmarshaler, _Node_OneofSizer, []interface{}{
		(*Node_Shortnode)(nil),
		(*Node_Fullnode)(nil),
		(*Node_Hashnode)(nil),
		(*Node_Valuenode)(nil),
		(*Node_Blanknode)(nil),
	}
}

func _Node_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Node)
	// val
	switch x := m.Val.(type) {
	case *Node_Shortnode:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Shortnode); err != nil {
			return err
		}
	case *Node_Fullnode:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Fullnode); err != nil {
			return err
		}
	case *Node_Hashnode:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hashnode); err != nil {
			return err
		}
	case *Node_Valuenode:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Valuenode); err != nil {
			return err
		}
	case *Node_Blanknode:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Blanknode); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Node.Val has unexpected type %T", x)
	}
	return nil
}

func _Node_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Node)
	switch tag {
	case 1: // val.shortnode
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ShortNode)
		err := b.DecodeMessage(msg)
		m.Val = &Node_Shortnode{msg}
		return true, err
	case 2: // val.fullnode
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FullNode)
		err := b.DecodeMessage(msg)
		m.Val = &Node_Fullnode{msg}
		return true, err
	case 3: // val.hashnode
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashNode)
		err := b.DecodeMessage(msg)
		m.Val = &Node_Hashnode{msg}
		return true, err
	case 4: // val.valuenode
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ValueNode)
		err := b.DecodeMessage(msg)
		m.Val = &Node_Valuenode{msg}
		return true, err
	case 5: // val.blanknode
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlankNode)
		err := b.DecodeMessage(msg)
		m.Val = &Node_Blanknode{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Node_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Node)
	// val
	switch x := m.Val.(type) {
	case *Node_Shortnode:
		s := proto.Size(x.Shortnode)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_Fullnode:
		s := proto.Size(x.Fullnode)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_Hashnode:
		s := proto.Size(x.Hashnode)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_Valuenode:
		s := proto.Size(x.Valuenode)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_Blanknode:
		s := proto.Size(x.Blanknode)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ShortNode struct {
	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Dirty     bool   `protobuf:"varint,2,opt,name=dirty" json:"dirty,omitempty"`
	Hash      []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Val       *Node  `protobuf:"bytes,4,opt,name=val" json:"val,omitempty"`
	Extension bool   `protobuf:"varint,5,opt,name=extension" json:"extension,omitempty"`
}

func (m *ShortNode) Reset()                    { *m = ShortNode{} }
func (m *ShortNode) String() string            { return proto.CompactTextString(m) }
func (*ShortNode) ProtoMessage()               {}
func (*ShortNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ShortNode) GetVal() *Node {
	if m != nil {
		return m.Val
	}
	return nil
}

type FullNode struct {
	Dirty    bool    `protobuf:"varint,1,opt,name=dirty" json:"dirty,omitempty"`
	Hash     []byte  `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Children []*Node `protobuf:"bytes,3,rep,name=children" json:"children,omitempty"`
}

func (m *FullNode) Reset()                    { *m = FullNode{} }
func (m *FullNode) String() string            { return proto.CompactTextString(m) }
func (*FullNode) ProtoMessage()               {}
func (*FullNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FullNode) GetChildren() []*Node {
	if m != nil {
		return m.Children
	}
	return nil
}

type HashNode struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *HashNode) Reset()                    { *m = HashNode{} }
func (m *HashNode) String() string            { return proto.CompactTextString(m) }
func (*HashNode) ProtoMessage()               {}
func (*HashNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ValueNode struct {
	Val []byte `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *ValueNode) Reset()                    { *m = ValueNode{} }
func (m *ValueNode) String() string            { return proto.CompactTextString(m) }
func (*ValueNode) ProtoMessage()               {}
func (*ValueNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type BlankNode struct {
}

func (m *BlankNode) Reset()                    { *m = BlankNode{} }
func (m *BlankNode) String() string            { return proto.CompactTextString(m) }
func (*BlankNode) ProtoMessage()               {}
func (*BlankNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*Node)(nil), "trie.Node")
	proto.RegisterType((*ShortNode)(nil), "trie.shortNode")
	proto.RegisterType((*FullNode)(nil), "trie.fullNode")
	proto.RegisterType((*HashNode)(nil), "trie.hashNode")
	proto.RegisterType((*ValueNode)(nil), "trie.valueNode")
	proto.RegisterType((*BlankNode)(nil), "trie.blankNode")
}

func init() { proto.RegisterFile("node.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x71, 0x93, 0xa0, 0xf4, 0x5a, 0x01, 0xb2, 0x18, 0x18, 0x00, 0xa1, 0x0c, 0x88, 0x01,
	0x05, 0x09, 0xbe, 0x01, 0x13, 0x13, 0x83, 0x67, 0x96, 0x94, 0x18, 0x25, 0xaa, 0x65, 0x23, 0xc7,
	0x45, 0x74, 0xe6, 0x6b, 0x33, 0x90, 0x3b, 0xff, 0x49, 0x84, 0xba, 0x39, 0xef, 0x7e, 0x77, 0xf7,
	0xee, 0x29, 0x00, 0xda, 0xb4, 0xb2, 0xfe, 0xb4, 0xc6, 0x19, 0x9e, 0x3b, 0xdb, 0xcb, 0xea, 0x97,
	0x41, 0xfe, 0x3a, 0x8a, 0xfc, 0x01, 0x96, 0x43, 0x67, 0xac, 0x43, 0xe2, 0x82, 0xdd, 0xb0, 0xbb,
	0xd5, 0xe3, 0x69, 0x8d, 0x48, 0x4d, 0x32, 0x32, 0x2f, 0x47, 0x62, 0x62, 0xf8, 0x3d, 0x94, 0x1f,
	0x3b, 0xa5, 0x88, 0x5f, 0x10, 0x7f, 0xe2, 0x79, 0x54, 0x03, 0x9e, 0x08, 0xa4, 0xbb, 0x66, 0xe8,
	0x88, 0xce, 0xe6, 0x34, 0xaa, 0x91, 0x8e, 0x04, 0x9a, 0xf9, 0x6a, 0xd4, 0x4e, 0x12, 0x9e, 0xcf,
	0xcd, 0x90, 0x1c, 0xcd, 0x24, 0x06, 0x1b, 0x36, 0xaa, 0xd1, 0x5b, 0x6a, 0x28, 0xe6, 0x0d, 0x24,
	0xc7, 0x86, 0xc4, 0x3c, 0x17, 0x90, 0x8d, 0xdd, 0xd5, 0x0f, 0x0b, 0x67, 0x53, 0x06, 0x67, 0x90,
	0x6d, 0xe5, 0x9e, 0xae, 0x5f, 0x0b, 0x7c, 0xf2, 0x73, 0x28, 0xda, 0xde, 0xba, 0x3d, 0x5d, 0x58,
	0x0a, 0xff, 0xc1, 0x39, 0xe4, 0x68, 0x95, 0x0e, 0x59, 0x0b, 0x7a, 0xf3, 0x4b, 0x1a, 0x18, 0xcc,
	0x82, 0xdf, 0x8d, 0x43, 0x05, 0xca, 0x63, 0x75, 0x29, 0xbf, 0x9d, 0xd4, 0x43, 0x6f, 0x34, 0xf9,
	0x2b, 0xc5, 0x24, 0x54, 0x6f, 0x3e, 0x4a, 0xf2, 0x90, 0x36, 0xb2, 0x43, 0x1b, 0x17, 0xb3, 0x8d,
	0xb7, 0x50, 0xbe, 0x77, 0xbd, 0x6a, 0xad, 0xd4, 0xa3, 0x93, 0xec, 0xdf, 0xda, 0x54, 0xab, 0xae,
	0x7d, 0xf4, 0x34, 0x3d, 0xce, 0x61, 0xd3, 0x9c, 0xea, 0x2a, 0x84, 0x1d, 0x23, 0xc0, 0x33, 0x42,
	0x04, 0x18, 0xd1, 0x2a, 0x44, 0x8b, 0xe5, 0xcd, 0x31, 0xfd, 0x3b, 0x4f, 0x7f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x36, 0x30, 0x01, 0xca, 0x49, 0x02, 0x00, 0x00,
}
