// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
Package pbft is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	ConsensusMessage
	TransactionBatch
	PrePrepare
	Prepare
	Commit
	BlockInfo
	Checkpoint
	ViewChange
	PQset
	NewView
	FetchRequestBatch
	NegotiateView
	NegotiateViewResponse
	RecoveryInit
	RecoveryResponse
	AddNode
	RoutingTable
*/
package pbft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "hyperchain/core/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConsensusMessage_Type int32

const (
	ConsensusMessage_TRANSACTION             ConsensusMessage_Type = 0
	ConsensusMessage_TRANSATION_BATCH        ConsensusMessage_Type = 1
	ConsensusMessage_PRE_PREPARE             ConsensusMessage_Type = 2
	ConsensusMessage_PREPARE                 ConsensusMessage_Type = 3
	ConsensusMessage_COMMIT                  ConsensusMessage_Type = 4
	ConsensusMessage_CHECKPOINT              ConsensusMessage_Type = 5
	ConsensusMessage_VIEW_CHANGE             ConsensusMessage_Type = 6
	ConsensusMessage_NEW_VIEW                ConsensusMessage_Type = 7
	ConsensusMessage_FRTCH_REQUEST_BATCH     ConsensusMessage_Type = 8
	ConsensusMessage_RETURN_REQUEST_BATCH    ConsensusMessage_Type = 9
	ConsensusMessage_NEGOTIATE_VIEW          ConsensusMessage_Type = 10
	ConsensusMessage_NEGOTIATE_VIEW_RESPONSE ConsensusMessage_Type = 11
	ConsensusMessage_RECOVERY_INIT           ConsensusMessage_Type = 12
	ConsensusMessage_RECOVERY_RESPONSE       ConsensusMessage_Type = 13
	ConsensusMessage_ADD_NODE                ConsensusMessage_Type = 14
)

var ConsensusMessage_Type_name = map[int32]string{
	0:  "TRANSACTION",
	1:  "TRANSATION_BATCH",
	2:  "PRE_PREPARE",
	3:  "PREPARE",
	4:  "COMMIT",
	5:  "CHECKPOINT",
	6:  "VIEW_CHANGE",
	7:  "NEW_VIEW",
	8:  "FRTCH_REQUEST_BATCH",
	9:  "RETURN_REQUEST_BATCH",
	10: "NEGOTIATE_VIEW",
	11: "NEGOTIATE_VIEW_RESPONSE",
	12: "RECOVERY_INIT",
	13: "RECOVERY_RESPONSE",
	14: "ADD_NODE",
}
var ConsensusMessage_Type_value = map[string]int32{
	"TRANSACTION":             0,
	"TRANSATION_BATCH":        1,
	"PRE_PREPARE":             2,
	"PREPARE":                 3,
	"COMMIT":                  4,
	"CHECKPOINT":              5,
	"VIEW_CHANGE":             6,
	"NEW_VIEW":                7,
	"FRTCH_REQUEST_BATCH":     8,
	"RETURN_REQUEST_BATCH":    9,
	"NEGOTIATE_VIEW":          10,
	"NEGOTIATE_VIEW_RESPONSE": 11,
	"RECOVERY_INIT":           12,
	"RECOVERY_RESPONSE":       13,
	"ADD_NODE":                14,
}

func (x ConsensusMessage_Type) String() string {
	return proto.EnumName(ConsensusMessage_Type_name, int32(x))
}
func (ConsensusMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type ConsensusMessage struct {
	Type    ConsensusMessage_Type `protobuf:"varint,1,opt,name=type,enum=pbft.ConsensusMessage_Type" json:"type,omitempty"`
	Payload []byte                `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ConsensusMessage) Reset()                    { *m = ConsensusMessage{} }
func (m *ConsensusMessage) String() string            { return proto.CompactTextString(m) }
func (*ConsensusMessage) ProtoMessage()               {}
func (*ConsensusMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TransactionBatch struct {
	Batch     []*types.Transaction `protobuf:"bytes,1,rep,name=batch" json:"batch,omitempty"`
	Timestamp int64                `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *TransactionBatch) Reset()                    { *m = TransactionBatch{} }
func (m *TransactionBatch) String() string            { return proto.CompactTextString(m) }
func (*TransactionBatch) ProtoMessage()               {}
func (*TransactionBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TransactionBatch) GetBatch() []*types.Transaction {
	if m != nil {
		return m.Batch
	}
	return nil
}

type PrePrepare struct {
	View             uint64            `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	SequenceNumber   uint64            `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	BatchDigest      string            `protobuf:"bytes,3,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	TransactionBatch *TransactionBatch `protobuf:"bytes,4,opt,name=transaction_batch,json=transactionBatch" json:"transaction_batch,omitempty"`
	ReplicaId        uint64            `protobuf:"varint,5,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *PrePrepare) Reset()                    { *m = PrePrepare{} }
func (m *PrePrepare) String() string            { return proto.CompactTextString(m) }
func (*PrePrepare) ProtoMessage()               {}
func (*PrePrepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PrePrepare) GetTransactionBatch() *TransactionBatch {
	if m != nil {
		return m.TransactionBatch
	}
	return nil
}

type Prepare struct {
	View           uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	BatchDigest    string `protobuf:"bytes,3,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	ReplicaId      uint64 `protobuf:"varint,4,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *Prepare) Reset()                    { *m = Prepare{} }
func (m *Prepare) String() string            { return proto.CompactTextString(m) }
func (*Prepare) ProtoMessage()               {}
func (*Prepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Commit struct {
	View           uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	BatchDigest    string `protobuf:"bytes,3,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	ReplicaId      uint64 `protobuf:"varint,4,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type BlockInfo struct {
	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
	BlockHash   []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *BlockInfo) Reset()                    { *m = BlockInfo{} }
func (m *BlockInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()               {}
func (*BlockInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Checkpoint struct {
	SequenceNumber uint64 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	ReplicaId      uint64 `protobuf:"varint,2,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *Checkpoint) Reset()                    { *m = Checkpoint{} }
func (m *Checkpoint) String() string            { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()               {}
func (*Checkpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ViewChange struct {
	View      uint64           `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	H         uint64           `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	Cset      []*ViewChange_C  `protobuf:"bytes,3,rep,name=cset" json:"cset,omitempty"`
	Pset      []*ViewChange_PQ `protobuf:"bytes,4,rep,name=pset" json:"pset,omitempty"`
	Qset      []*ViewChange_PQ `protobuf:"bytes,5,rep,name=qset" json:"qset,omitempty"`
	ReplicaId uint64           `protobuf:"varint,6,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Signature []byte           `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *ViewChange) Reset()                    { *m = ViewChange{} }
func (m *ViewChange) String() string            { return proto.CompactTextString(m) }
func (*ViewChange) ProtoMessage()               {}
func (*ViewChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ViewChange) GetCset() []*ViewChange_C {
	if m != nil {
		return m.Cset
	}
	return nil
}

func (m *ViewChange) GetPset() []*ViewChange_PQ {
	if m != nil {
		return m.Pset
	}
	return nil
}

func (m *ViewChange) GetQset() []*ViewChange_PQ {
	if m != nil {
		return m.Qset
	}
	return nil
}

// This message should go away and become a checkpoint once replica_id is removed
type ViewChange_C struct {
	SequenceNumber uint64 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *ViewChange_C) Reset()                    { *m = ViewChange_C{} }
func (m *ViewChange_C) String() string            { return proto.CompactTextString(m) }
func (*ViewChange_C) ProtoMessage()               {}
func (*ViewChange_C) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type ViewChange_PQ struct {
	SequenceNumber uint64 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	BatchDigest    string `protobuf:"bytes,2,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	View           uint64 `protobuf:"varint,3,opt,name=view" json:"view,omitempty"`
}

func (m *ViewChange_PQ) Reset()                    { *m = ViewChange_PQ{} }
func (m *ViewChange_PQ) String() string            { return proto.CompactTextString(m) }
func (*ViewChange_PQ) ProtoMessage()               {}
func (*ViewChange_PQ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 1} }

type PQset struct {
	Set []*ViewChange_PQ `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
}

func (m *PQset) Reset()                    { *m = PQset{} }
func (m *PQset) String() string            { return proto.CompactTextString(m) }
func (*PQset) ProtoMessage()               {}
func (*PQset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PQset) GetSet() []*ViewChange_PQ {
	if m != nil {
		return m.Set
	}
	return nil
}

type NewView struct {
	View      uint64            `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Vset      []*ViewChange     `protobuf:"bytes,2,rep,name=vset" json:"vset,omitempty"`
	Xset      map[uint64]string `protobuf:"bytes,3,rep,name=xset" json:"xset,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ReplicaId uint64            `protobuf:"varint,4,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *NewView) Reset()                    { *m = NewView{} }
func (m *NewView) String() string            { return proto.CompactTextString(m) }
func (*NewView) ProtoMessage()               {}
func (*NewView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *NewView) GetVset() []*ViewChange {
	if m != nil {
		return m.Vset
	}
	return nil
}

func (m *NewView) GetXset() map[uint64]string {
	if m != nil {
		return m.Xset
	}
	return nil
}

type FetchRequestBatch struct {
	BatchDigest string `protobuf:"bytes,1,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	ReplicaId   uint64 `protobuf:"varint,2,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *FetchRequestBatch) Reset()                    { *m = FetchRequestBatch{} }
func (m *FetchRequestBatch) String() string            { return proto.CompactTextString(m) }
func (*FetchRequestBatch) ProtoMessage()               {}
func (*FetchRequestBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type NegotiateView struct {
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *NegotiateView) Reset()                    { *m = NegotiateView{} }
func (m *NegotiateView) String() string            { return proto.CompactTextString(m) }
func (*NegotiateView) ProtoMessage()               {}
func (*NegotiateView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type NegotiateViewResponse struct {
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	View      uint64 `protobuf:"varint,2,opt,name=view" json:"view,omitempty"`
}

func (m *NegotiateViewResponse) Reset()                    { *m = NegotiateViewResponse{} }
func (m *NegotiateViewResponse) String() string            { return proto.CompactTextString(m) }
func (*NegotiateViewResponse) ProtoMessage()               {}
func (*NegotiateViewResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type RecoveryInit struct {
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *RecoveryInit) Reset()                    { *m = RecoveryInit{} }
func (m *RecoveryInit) String() string            { return proto.CompactTextString(m) }
func (*RecoveryInit) ProtoMessage()               {}
func (*RecoveryInit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type RecoveryResponse struct {
	ReplicaId uint64       `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Blocks    []*BlockInfo `protobuf:"bytes,2,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *RecoveryResponse) Reset()                    { *m = RecoveryResponse{} }
func (m *RecoveryResponse) String() string            { return proto.CompactTextString(m) }
func (*RecoveryResponse) ProtoMessage()               {}
func (*RecoveryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *RecoveryResponse) GetBlocks() []*BlockInfo {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type AddNode struct {
	ReplicaId   uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Ip          string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	TableDigest string `protobuf:"bytes,3,opt,name=table_digest,json=tableDigest" json:"table_digest,omitempty"`
}

func (m *AddNode) Reset()                    { *m = AddNode{} }
func (m *AddNode) String() string            { return proto.CompactTextString(m) }
func (*AddNode) ProtoMessage()               {}
func (*AddNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type RoutingTable struct {
	Table string `protobuf:"bytes,1,opt,name=table" json:"table,omitempty"`
}

func (m *RoutingTable) Reset()                    { *m = RoutingTable{} }
func (m *RoutingTable) String() string            { return proto.CompactTextString(m) }
func (*RoutingTable) ProtoMessage()               {}
func (*RoutingTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func init() {
	proto.RegisterType((*ConsensusMessage)(nil), "pbft.consensus_message")
	proto.RegisterType((*TransactionBatch)(nil), "pbft.transaction_batch")
	proto.RegisterType((*PrePrepare)(nil), "pbft.pre_prepare")
	proto.RegisterType((*Prepare)(nil), "pbft.prepare")
	proto.RegisterType((*Commit)(nil), "pbft.commit")
	proto.RegisterType((*BlockInfo)(nil), "pbft.block_info")
	proto.RegisterType((*Checkpoint)(nil), "pbft.checkpoint")
	proto.RegisterType((*ViewChange)(nil), "pbft.view_change")
	proto.RegisterType((*ViewChange_C)(nil), "pbft.view_change.C")
	proto.RegisterType((*ViewChange_PQ)(nil), "pbft.view_change.PQ")
	proto.RegisterType((*PQset)(nil), "pbft.PQset")
	proto.RegisterType((*NewView)(nil), "pbft.new_view")
	proto.RegisterType((*FetchRequestBatch)(nil), "pbft.fetch_request_batch")
	proto.RegisterType((*NegotiateView)(nil), "pbft.negotiate_view")
	proto.RegisterType((*NegotiateViewResponse)(nil), "pbft.negotiate_view_response")
	proto.RegisterType((*RecoveryInit)(nil), "pbft.recovery_init")
	proto.RegisterType((*RecoveryResponse)(nil), "pbft.recovery_response")
	proto.RegisterType((*AddNode)(nil), "pbft.add_node")
	proto.RegisterType((*RoutingTable)(nil), "pbft.routing_table")
	proto.RegisterEnum("pbft.ConsensusMessage_Type", ConsensusMessage_Type_name, ConsensusMessage_Type_value)
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 938 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc6, 0x3f, 0x92, 0x36, 0xcf, 0x69, 0xd6, 0x99, 0x16, 0x35, 0x2a, 0xbb, 0x12, 0x58, 0x5a,
	0xe8, 0x01, 0x19, 0x54, 0x0e, 0x20, 0xc4, 0x25, 0xeb, 0x98, 0x6d, 0x04, 0xeb, 0xa4, 0x53, 0xef,
	0x2e, 0x08, 0x24, 0xcb, 0xb1, 0xa7, 0x89, 0xd5, 0xc4, 0xf6, 0xda, 0x93, 0x42, 0xee, 0x48, 0x70,
	0xe1, 0x9f, 0xe0, 0xdf, 0xe1, 0xc6, 0x5f, 0xc4, 0xcc, 0xd8, 0x49, 0x1a, 0x27, 0x6a, 0x7a, 0x82,
	0x43, 0xa4, 0x99, 0x6f, 0xbe, 0xf7, 0xe6, 0xbd, 0xef, 0x9b, 0x19, 0x07, 0x5a, 0x33, 0x92, 0xe7,
	0xfe, 0x98, 0xe4, 0x66, 0x9a, 0x25, 0x34, 0x41, 0x6a, 0x3a, 0xba, 0xa1, 0x67, 0x6d, 0x9a, 0xf9,
	0x71, 0xee, 0x07, 0x34, 0x4a, 0xe2, 0x62, 0xc1, 0xf8, 0x4d, 0x81, 0x76, 0x90, 0xc4, 0x39, 0x89,
	0xf3, 0x79, 0xee, 0x95, 0x51, 0xe8, 0x73, 0x50, 0xe9, 0x22, 0x25, 0x1d, 0xe9, 0x43, 0xe9, 0xbc,
	0x75, 0xf1, 0xd4, 0xe4, 0xd1, 0xe6, 0x16, 0xcd, 0x74, 0x19, 0x07, 0x0b, 0x26, 0xea, 0xc0, 0x41,
	0xea, 0x2f, 0xa6, 0x89, 0x1f, 0x76, 0x64, 0x16, 0xd4, 0xc4, 0xcb, 0xa9, 0xf1, 0x97, 0x0c, 0x2a,
	0x27, 0xa2, 0x27, 0xa0, 0xb9, 0xb8, 0xeb, 0x5c, 0x77, 0x2d, 0xb7, 0x3f, 0x70, 0xf4, 0xf7, 0xd0,
	0x09, 0xe8, 0x05, 0xc0, 0xe7, 0xde, 0x8b, 0xae, 0x6b, 0x5d, 0xea, 0x12, 0xa7, 0x0d, 0xb1, 0xed,
	0xb1, 0xdf, 0xb0, 0x8b, 0x6d, 0x5d, 0x46, 0x1a, 0x1c, 0x2c, 0x27, 0x0a, 0x02, 0xa8, 0x5b, 0x83,
	0x57, 0xaf, 0xfa, 0xae, 0xae, 0xa2, 0x16, 0x80, 0x75, 0x69, 0x5b, 0xdf, 0x0d, 0x07, 0x7d, 0xc7,
	0xd5, 0x6b, 0x3c, 0xf2, 0x4d, 0xdf, 0x7e, 0xeb, 0x59, 0x97, 0x5d, 0xe7, 0xa5, 0xad, 0xd7, 0x51,
	0x13, 0x0e, 0x1d, 0x36, 0xe7, 0xa0, 0x7e, 0x80, 0x4e, 0xe1, 0xf8, 0x5b, 0xcc, 0xf6, 0xf0, 0xb0,
	0x7d, 0xf5, 0xda, 0xbe, 0x76, 0xcb, 0x1d, 0x0f, 0x59, 0xed, 0x27, 0xd8, 0x76, 0x5f, 0x63, 0xa7,
	0xb2, 0xd2, 0x40, 0x08, 0x5a, 0x8e, 0xfd, 0x72, 0xe0, 0xf6, 0xbb, 0xae, 0x5d, 0xa4, 0x01, 0xf4,
	0x01, 0x9c, 0x6e, 0x62, 0x2c, 0xea, 0x7a, 0x38, 0x70, 0xae, 0x6d, 0x5d, 0x43, 0x6d, 0x38, 0xc2,
	0xb6, 0x35, 0x78, 0x63, 0xe3, 0x1f, 0xbd, 0xbe, 0xc3, 0xaa, 0x6c, 0xa2, 0xf7, 0xa1, 0xbd, 0x82,
	0x56, 0xcc, 0x23, 0x5e, 0x5b, 0xb7, 0xd7, 0xf3, 0x9c, 0x41, 0xcf, 0xd6, 0x5b, 0xc6, 0x4f, 0x70,
	0xdf, 0x1b, 0x6f, 0xe4, 0xd3, 0x60, 0x82, 0xce, 0xa1, 0x26, 0x06, 0xcc, 0x06, 0xe5, 0x5c, 0xbb,
	0x40, 0x26, 0x57, 0x3a, 0x37, 0xdd, 0x35, 0x11, 0x17, 0x04, 0xf4, 0x14, 0x1a, 0x34, 0x62, 0xae,
	0x50, 0x7f, 0x96, 0x0a, 0xfd, 0x15, 0xbc, 0x06, 0x8c, 0x7f, 0x24, 0xd0, 0xd2, 0x8c, 0x78, 0xec,
	0x97, 0xfa, 0x19, 0x61, 0x5d, 0xa9, 0x77, 0x11, 0xf9, 0x45, 0xb8, 0xab, 0x62, 0x31, 0x46, 0x9f,
	0xc0, 0x93, 0x9c, 0xbc, 0x9b, 0x93, 0x38, 0x20, 0x5e, 0x3c, 0x9f, 0x8d, 0x48, 0x26, 0xf2, 0xa8,
	0xb8, 0xb5, 0x84, 0x1d, 0x81, 0xa2, 0x8f, 0xa0, 0x29, 0xf6, 0xf4, 0xc2, 0x88, 0x1d, 0x2f, 0xda,
	0x51, 0x18, 0xab, 0x81, 0x35, 0x81, 0xf5, 0x04, 0x84, 0x7a, 0x3b, 0x9a, 0xe9, 0xa8, 0x8c, 0xa7,
	0x5d, 0x9c, 0x16, 0x47, 0x69, 0x6b, 0x19, 0xeb, 0xf7, 0xa0, 0x17, 0xa2, 0xa7, 0x67, 0x00, 0xac,
	0xde, 0x69, 0x14, 0xf8, 0x5e, 0x14, 0x76, 0x6a, 0xa2, 0x98, 0x46, 0x89, 0xf4, 0x43, 0xe3, 0x0f,
	0x89, 0x9d, 0xb8, 0xff, 0xa8, 0xa1, 0xcd, 0x52, 0xd4, 0x6a, 0x29, 0xbf, 0x4b, 0x50, 0x0f, 0x92,
	0xd9, 0x2c, 0xa2, 0xff, 0x77, 0x25, 0x0e, 0xc0, 0x68, 0x9a, 0x04, 0xb7, 0x5e, 0x14, 0xdf, 0x24,
	0x22, 0x9f, 0x98, 0x95, 0xbb, 0x16, 0x45, 0x69, 0x02, 0x2b, 0xb7, 0x7c, 0xb6, 0x0c, 0x98, 0xf8,
	0xf9, 0xa4, 0xbc, 0xb9, 0x0d, 0x81, 0x5c, 0x32, 0xc0, 0x08, 0x01, 0x82, 0x09, 0x09, 0x6e, 0xd3,
	0x24, 0x8a, 0xe9, 0xae, 0x46, 0xa4, 0x9d, 0x8d, 0x6c, 0x56, 0x29, 0x57, 0xaa, 0x64, 0xf7, 0x56,
	0x66, 0x70, 0xd1, 0x1d, 0x1b, 0x19, 0x7f, 0x2a, 0xa0, 0x71, 0xa5, 0xbc, 0x60, 0xe2, 0xc7, 0xe3,
	0xdd, 0x76, 0x36, 0x41, 0x9a, 0x94, 0x99, 0xa4, 0x09, 0xab, 0x44, 0x0d, 0x72, 0xc2, 0x15, 0xe2,
	0x17, 0xe3, 0xb8, 0x38, 0x54, 0xf7, 0x52, 0x98, 0x16, 0x16, 0x04, 0x76, 0x85, 0xd4, 0x94, 0x13,
	0x55, 0x41, 0x3c, 0xd9, 0x26, 0x0e, 0xaf, 0xb0, 0x60, 0x70, 0xe6, 0x3b, 0xce, 0xac, 0x3d, 0xc4,
	0xe4, 0x8c, 0x4a, 0x77, 0xf5, 0x6a, 0x77, 0xec, 0x2e, 0xe6, 0xd1, 0x38, 0xf6, 0xe9, 0x3c, 0x23,
	0x9d, 0x83, 0x42, 0xd1, 0x15, 0x70, 0xf6, 0x0d, 0x48, 0xd6, 0xe3, 0x85, 0xac, 0x28, 0x75, 0x16,
	0x82, 0x3c, 0xbc, 0x7a, 0x7c, 0x78, 0xf5, 0x40, 0xc9, 0xdb, 0x07, 0x6a, 0xa9, 0xb5, 0xb2, 0xd6,
	0xda, 0xf8, 0x0c, 0x6a, 0xc3, 0x2b, 0xde, 0xe9, 0xc7, 0xa0, 0x70, 0x49, 0xa4, 0x07, 0x24, 0xe1,
	0x04, 0xe3, 0x6f, 0x09, 0x0e, 0x63, 0x06, 0x0b, 0xa7, 0x76, 0xb9, 0xf7, 0x9c, 0x61, 0x3c, 0x93,
	0x2c, 0x32, 0xb5, 0xb7, 0x32, 0x61, 0xb1, 0x8c, 0x3e, 0x05, 0xf5, 0xd7, 0xb5, 0xad, 0x9d, 0x82,
	0xb6, 0x4c, 0x6c, 0xfe, 0xc0, 0x96, 0xec, 0x98, 0x66, 0x0b, 0x2c, 0x58, 0x7b, 0xee, 0xc2, 0xd9,
	0x97, 0xd0, 0x58, 0x45, 0x20, 0x1d, 0x94, 0x5b, 0xb2, 0x28, 0x6b, 0xe2, 0x43, 0xf6, 0xf1, 0xa9,
	0xdd, 0xf9, 0xd3, 0x39, 0x29, 0x45, 0x29, 0x26, 0x5f, 0xcb, 0x5f, 0x49, 0xc6, 0x5b, 0x38, 0xbe,
	0x21, 0x5c, 0xb5, 0x8c, 0xab, 0x99, 0xd3, 0xf2, 0x35, 0xae, 0x8a, 0x29, 0xed, 0xbb, 0x9d, 0xd5,
	0x73, 0xcf, 0x74, 0x6d, 0xc5, 0x64, 0x9c, 0xd0, 0xc8, 0xa7, 0xa4, 0xd0, 0x6a, 0x33, 0x40, 0xaa,
	0x06, 0x7c, 0x0f, 0xa7, 0x9b, 0x01, 0xac, 0xa4, 0x3c, 0xe5, 0x9f, 0xe1, 0x3d, 0x91, 0x2b, 0x13,
	0xe4, 0x7b, 0xb6, 0x9a, 0x70, 0x94, 0x91, 0x20, 0xb9, 0x23, 0xd9, 0x82, 0xbd, 0x0f, 0x11, 0xdd,
	0xb7, 0xfb, 0xcf, 0xd0, 0x5e, 0xf1, 0x1f, 0xbb, 0xef, 0x39, 0xd4, 0xc5, 0xeb, 0x91, 0x97, 0x56,
	0xeb, 0x85, 0x87, 0xeb, 0x47, 0x09, 0x97, 0xeb, 0x2c, 0xfb, 0xa1, 0x1f, 0x86, 0x5e, 0x9c, 0x84,
	0x7b, 0x93, 0xf2, 0x5b, 0x90, 0x96, 0x3e, 0xb1, 0x11, 0x77, 0x82, 0xfa, 0xa3, 0x29, 0xa9, 0xbc,
	0x93, 0x02, 0x2b, 0x9c, 0x30, 0x9e, 0xb3, 0x5e, 0x93, 0x39, 0x8d, 0xe2, 0xb1, 0x27, 0x60, 0x6e,
	0xb7, 0x18, 0x94, 0xb6, 0x15, 0x93, 0x51, 0x5d, 0xfc, 0x09, 0xfa, 0xe2, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xcb, 0x8a, 0x84, 0x82, 0x2f, 0x09, 0x00, 0x00,
}
