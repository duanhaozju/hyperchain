/*
Copyright Hyperchain Corp. 2016 All Rights Reserved.
*/

syntax = "proto3";

import "hyperchain/core/types/transaction.proto";

package pbft;
/*
 * mapping to PBFT paper names
 *
 * PBFT name: local name
 *
 * o: transaction
 * t: timestamp
 * c: client
 * v: view
 * n: sequenceNumber
 * D(m): requestDigest
 * i: replicaId
 */

message consensus_message {
    enum Type {
        TRANSACTION = 0;
        PRE_PREPARE = 1;
        PREPARE = 2;
        COMMIT = 3;
        CHECKPOINT = 4;
        VIEW_CHANGE = 5;
        NEW_VIEW = 6;
        FINISH_VCRESET = 7;
        FRTCH_REQUEST_BATCH = 8;
        RETURN_REQUEST_BATCH = 9;
        NEGOTIATE_VIEW = 10;
        NEGOTIATE_VIEW_RESPONSE = 11;
        RECOVERY_INIT = 12;
        RECOVERY_RESPONSE = 13;
        RECOVERY_FETCH_QPC = 14;
        RECOVERY_RETURN_QPC = 15;
        ADD_NODE = 16;
        DEL_NODE = 17;
        READY_FOR_N = 18;
        AGREE_UPDATE_N = 19;
        UPDATE_N = 20;
        FINISH_UPDATE = 21;
    }
    Type type = 1;
    bytes payload = 2;
}

message transaction_batch {
    bytes version = 1;
    repeated types.Transaction batch = 2;
    int64 timestamp = 3;
}

message return_request_batch {
    bytes version = 1;
    string digest = 2;
    transaction_batch batch = 3;
    int64 timestamp = 4;
}

message pre_prepare {
    bytes version = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
    transaction_batch transaction_batch = 5;
    uint64 replica_id = 6;
    int64 timestamp = 7;
}

message prepare {
    bytes version = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
    uint64 replica_id = 5;
    int64 timestamp = 6;
}

message commit {
    bytes version = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
    uint64 replica_id = 5;
    int64 timestamp = 6;
}

message checkpoint {
    bytes version = 1;
    uint64 sequence_number = 2;
    uint64 replica_id = 3;
    string id = 4;
    int64 timestamp = 5;
}

message view_change {
    /* This message should go away and become a checkpoint once replica_id is removed */
    message C {
        uint64 sequence_number = 1;
        string id = 3;
    }
    message PQ {
        uint64 sequence_number = 1;
        string batch_digest = 2;
        uint64 view = 3;
    }

    bytes version = 1;
    uint64 view = 2;
    uint64 h = 3;
    repeated C cset = 4;
    repeated PQ pset = 5;
    repeated PQ qset = 6;
    uint64 replica_id = 7;
    bytes signature = 8;
    int64 timestamp = 9;
}

message new_view {
    bytes version = 1;
    uint64 view = 2;
    repeated view_change vset = 3;
    map<uint64, string> xset = 4;
    uint64 replica_id = 5;
    int64 timestamp = 6;
}

message finish_vcReset {
    bytes version = 1;
    uint64 replica_id = 2;
    uint64 view = 3;
    uint64 h = 4;
    int64 timestamp = 5;
}

message fetch_request_batch {
    bytes version = 1;
    string batch_digest = 2;
    uint64 replica_id = 3;
    int64 timestamp = 4;
}

message negotiate_view {
    bytes version = 1;
    uint64 replica_id = 2;
    int64 timestamp = 3;
}

message negotiate_view_response {
    bytes version = 1;
    uint64 replica_id = 2;
    uint64 view = 3;
    uint64 n = 4;
    bytes routers = 5;
    int64 timestamp = 6;
}

message recovery_init {
    bytes version = 1;
    uint64 replica_id = 2;
    int64 timestamp = 3;
}

message recovery_response {
    bytes version = 1;
    uint64               replica_id    = 2;
    map<uint64, string>  chkpts        = 3;
    uint64               blockHeight   = 4;
    string               lastBlockHash = 5;
    int64 timestamp = 6;
}

message recovery_fetchPQC {
    bytes version = 1;
    uint64 replica_id = 2;
    uint64 h          = 3;
    int64 timestamp = 4;
}

message recovery_returnPQC {
    bytes version = 1;
    uint64                  replica_id = 2;
    repeated pre_prepare    prepre_set = 3;
    repeated bool           pre_sent   = 4;
    repeated bool           cmt_sent   = 5;
    int64 timestamp = 6;
}

message Pset {
    bytes version = 1;
    repeated prepare set = 2;
}

message Cset {
    bytes version = 1;
    repeated commit set = 2;
}

message add_node {
    bytes version = 1;
    uint64 replica_id = 2;
    string key = 3;
    int64 timestamp = 4;
}

message del_node {
    bytes version = 1;
    uint64 replica_id = 2;
    string key = 3;
    string router_hash = 4;
    int64 timestamp = 5;
}

message ready_for_n {
    bytes version = 1;
    uint64 replica_id = 2;
    string key = 3;
    int64 timestamp = 4;
}

message agree_update_n {
    bytes version = 1;
    bool flag = 2;
    uint64 replica_id = 3;
    string key = 4;
    string routerHash = 5;
    int64 n = 6;
    uint64 view = 7;
    uint64 h = 8;
    repeated view_change.C cset = 9;
    repeated view_change.PQ pset = 10;
    repeated view_change.PQ qset = 11;
    int64 timestamp = 12;
}

message update_n {
    bytes version = 1;
    bool flag = 2;
    uint64 replica_id = 3;
    string key = 4;
    int64 n = 5;
    uint64 view = 6;
    repeated agree_update_n aset = 7;
    map<uint64, string> xset = 8;
    int64 timestamp = 9;
}

message finish_update {
    bytes version = 1;
    uint64 replica_id = 2;
    uint64 view = 3;
    uint64 h = 4;
    int64 timestamp = 5;
}