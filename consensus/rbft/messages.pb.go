// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages.proto

/*
Package rbft is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	ConsensusMessage
	TransactionBatch
	HashBatch
	ReturnRequestBatch
	FetchMissingTransaction
	ReturnMissingTransaction
	PrePrepare
	Prepare
	Commit
	BlockInfo
	Checkpoint
	Vc_C
	Vc_PQ
	VcBasis
	ViewChange
	NewView
	FinishVcReset
	FetchRequestBatch
	NegotiateView
	NegotiateViewResponse
	RecoveryInit
	RecoveryResponse
	RecoveryFetchPQC
	RecoveryReturnPQC
	Pset
	Cset
	AddNode
	DelNode
	ReadyForN
	AgreeUpdateN
	UpdateN
	FinishUpdate
*/
package rbft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/hyperchain/hyperchain/core/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConsensusMessage_Type int32

const (
	ConsensusMessage_TRANSACTION                ConsensusMessage_Type = 0
	ConsensusMessage_PRE_PREPARE                ConsensusMessage_Type = 1
	ConsensusMessage_PREPARE                    ConsensusMessage_Type = 2
	ConsensusMessage_COMMIT                     ConsensusMessage_Type = 3
	ConsensusMessage_CHECKPOINT                 ConsensusMessage_Type = 4
	ConsensusMessage_VIEW_CHANGE                ConsensusMessage_Type = 5
	ConsensusMessage_NEW_VIEW                   ConsensusMessage_Type = 6
	ConsensusMessage_FINISH_VCRESET             ConsensusMessage_Type = 7
	ConsensusMessage_FRTCH_REQUEST_BATCH        ConsensusMessage_Type = 8
	ConsensusMessage_RETURN_REQUEST_BATCH       ConsensusMessage_Type = 9
	ConsensusMessage_NEGOTIATE_VIEW             ConsensusMessage_Type = 10
	ConsensusMessage_NEGOTIATE_VIEW_RESPONSE    ConsensusMessage_Type = 11
	ConsensusMessage_RECOVERY_INIT              ConsensusMessage_Type = 12
	ConsensusMessage_RECOVERY_RESPONSE          ConsensusMessage_Type = 13
	ConsensusMessage_RECOVERY_FETCH_QPC         ConsensusMessage_Type = 14
	ConsensusMessage_RECOVERY_RETURN_QPC        ConsensusMessage_Type = 15
	ConsensusMessage_ADD_NODE                   ConsensusMessage_Type = 16
	ConsensusMessage_DEL_NODE                   ConsensusMessage_Type = 17
	ConsensusMessage_READY_FOR_N                ConsensusMessage_Type = 18
	ConsensusMessage_AGREE_UPDATE_N             ConsensusMessage_Type = 19
	ConsensusMessage_UPDATE_N                   ConsensusMessage_Type = 20
	ConsensusMessage_FINISH_UPDATE              ConsensusMessage_Type = 21
	ConsensusMessage_FETCH_MISSING_TRANSACTION  ConsensusMessage_Type = 22
	ConsensusMessage_RETURN_MISSING_TRANSACTION ConsensusMessage_Type = 23
)

var ConsensusMessage_Type_name = map[int32]string{
	0:  "TRANSACTION",
	1:  "PRE_PREPARE",
	2:  "PREPARE",
	3:  "COMMIT",
	4:  "CHECKPOINT",
	5:  "VIEW_CHANGE",
	6:  "NEW_VIEW",
	7:  "FINISH_VCRESET",
	8:  "FRTCH_REQUEST_BATCH",
	9:  "RETURN_REQUEST_BATCH",
	10: "NEGOTIATE_VIEW",
	11: "NEGOTIATE_VIEW_RESPONSE",
	12: "RECOVERY_INIT",
	13: "RECOVERY_RESPONSE",
	14: "RECOVERY_FETCH_QPC",
	15: "RECOVERY_RETURN_QPC",
	16: "ADD_NODE",
	17: "DEL_NODE",
	18: "READY_FOR_N",
	19: "AGREE_UPDATE_N",
	20: "UPDATE_N",
	21: "FINISH_UPDATE",
	22: "FETCH_MISSING_TRANSACTION",
	23: "RETURN_MISSING_TRANSACTION",
}
var ConsensusMessage_Type_value = map[string]int32{
	"TRANSACTION":                0,
	"PRE_PREPARE":                1,
	"PREPARE":                    2,
	"COMMIT":                     3,
	"CHECKPOINT":                 4,
	"VIEW_CHANGE":                5,
	"NEW_VIEW":                   6,
	"FINISH_VCRESET":             7,
	"FRTCH_REQUEST_BATCH":        8,
	"RETURN_REQUEST_BATCH":       9,
	"NEGOTIATE_VIEW":             10,
	"NEGOTIATE_VIEW_RESPONSE":    11,
	"RECOVERY_INIT":              12,
	"RECOVERY_RESPONSE":          13,
	"RECOVERY_FETCH_QPC":         14,
	"RECOVERY_RETURN_QPC":        15,
	"ADD_NODE":                   16,
	"DEL_NODE":                   17,
	"READY_FOR_N":                18,
	"AGREE_UPDATE_N":             19,
	"UPDATE_N":                   20,
	"FINISH_UPDATE":              21,
	"FETCH_MISSING_TRANSACTION":  22,
	"RETURN_MISSING_TRANSACTION": 23,
}

func (x ConsensusMessage_Type) String() string {
	return proto.EnumName(ConsensusMessage_Type_name, int32(x))
}
func (ConsensusMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type ConsensusMessage struct {
	Type    ConsensusMessage_Type `protobuf:"varint,1,opt,name=type,enum=rbft.ConsensusMessage_Type" json:"type,omitempty"`
	Payload []byte                `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ConsensusMessage) Reset()                    { *m = ConsensusMessage{} }
func (m *ConsensusMessage) String() string            { return proto.CompactTextString(m) }
func (*ConsensusMessage) ProtoMessage()               {}
func (*ConsensusMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConsensusMessage) GetType() ConsensusMessage_Type {
	if m != nil {
		return m.Type
	}
	return ConsensusMessage_TRANSACTION
}

func (m *ConsensusMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type TransactionBatch struct {
	TxList     []*types.Transaction `protobuf:"bytes,1,rep,name=tx_list,json=txList" json:"tx_list,omitempty"`
	HashList   []string             `protobuf:"bytes,2,rep,name=hash_list,json=hashList" json:"hash_list,omitempty"`
	Timestamp  int64                `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	SeqNo      uint64               `protobuf:"varint,4,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	ResultHash string               `protobuf:"bytes,5,opt,name=resultHash" json:"resultHash,omitempty"`
}

func (m *TransactionBatch) Reset()                    { *m = TransactionBatch{} }
func (m *TransactionBatch) String() string            { return proto.CompactTextString(m) }
func (*TransactionBatch) ProtoMessage()               {}
func (*TransactionBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TransactionBatch) GetTxList() []*types.Transaction {
	if m != nil {
		return m.TxList
	}
	return nil
}

func (m *TransactionBatch) GetHashList() []string {
	if m != nil {
		return m.HashList
	}
	return nil
}

func (m *TransactionBatch) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TransactionBatch) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *TransactionBatch) GetResultHash() string {
	if m != nil {
		return m.ResultHash
	}
	return ""
}

type HashBatch struct {
	List      []string `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Timestamp int64    `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *HashBatch) Reset()                    { *m = HashBatch{} }
func (m *HashBatch) String() string            { return proto.CompactTextString(m) }
func (*HashBatch) ProtoMessage()               {}
func (*HashBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HashBatch) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *HashBatch) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ReturnRequestBatch struct {
	Batch       *TransactionBatch `protobuf:"bytes,1,opt,name=batch" json:"batch,omitempty"`
	BatchDigest string            `protobuf:"bytes,2,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	ReplicaId   uint64            `protobuf:"varint,3,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *ReturnRequestBatch) Reset()                    { *m = ReturnRequestBatch{} }
func (m *ReturnRequestBatch) String() string            { return proto.CompactTextString(m) }
func (*ReturnRequestBatch) ProtoMessage()               {}
func (*ReturnRequestBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReturnRequestBatch) GetBatch() *TransactionBatch {
	if m != nil {
		return m.Batch
	}
	return nil
}

func (m *ReturnRequestBatch) GetBatchDigest() string {
	if m != nil {
		return m.BatchDigest
	}
	return ""
}

func (m *ReturnRequestBatch) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

type FetchMissingTransaction struct {
	View           uint64            `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	SequenceNumber uint64            `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	BatchDigest    string            `protobuf:"bytes,3,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	HashList       map[uint64]string `protobuf:"bytes,4,rep,name=hash_list,json=hashList" json:"hash_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ReplicaId      uint64            `protobuf:"varint,5,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *FetchMissingTransaction) Reset()                    { *m = FetchMissingTransaction{} }
func (m *FetchMissingTransaction) String() string            { return proto.CompactTextString(m) }
func (*FetchMissingTransaction) ProtoMessage()               {}
func (*FetchMissingTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FetchMissingTransaction) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *FetchMissingTransaction) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *FetchMissingTransaction) GetBatchDigest() string {
	if m != nil {
		return m.BatchDigest
	}
	return ""
}

func (m *FetchMissingTransaction) GetHashList() map[uint64]string {
	if m != nil {
		return m.HashList
	}
	return nil
}

func (m *FetchMissingTransaction) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

type ReturnMissingTransaction struct {
	View           uint64                        `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	SequenceNumber uint64                        `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	BatchDigest    string                        `protobuf:"bytes,3,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	HashList       map[uint64]string             `protobuf:"bytes,4,rep,name=hash_list,json=hashList" json:"hash_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TxList         map[uint64]*types.Transaction `protobuf:"bytes,5,rep,name=tx_list,json=txList" json:"tx_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ReplicaId      uint64                        `protobuf:"varint,6,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *ReturnMissingTransaction) Reset()                    { *m = ReturnMissingTransaction{} }
func (m *ReturnMissingTransaction) String() string            { return proto.CompactTextString(m) }
func (*ReturnMissingTransaction) ProtoMessage()               {}
func (*ReturnMissingTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReturnMissingTransaction) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *ReturnMissingTransaction) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *ReturnMissingTransaction) GetBatchDigest() string {
	if m != nil {
		return m.BatchDigest
	}
	return ""
}

func (m *ReturnMissingTransaction) GetHashList() map[uint64]string {
	if m != nil {
		return m.HashList
	}
	return nil
}

func (m *ReturnMissingTransaction) GetTxList() map[uint64]*types.Transaction {
	if m != nil {
		return m.TxList
	}
	return nil
}

func (m *ReturnMissingTransaction) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

type PrePrepare struct {
	View           uint64     `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	SequenceNumber uint64     `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	BatchDigest    string     `protobuf:"bytes,3,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	HashBatch      *HashBatch `protobuf:"bytes,4,opt,name=hash_batch,json=hashBatch" json:"hash_batch,omitempty"`
	ReplicaId      uint64     `protobuf:"varint,5,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *PrePrepare) Reset()                    { *m = PrePrepare{} }
func (m *PrePrepare) String() string            { return proto.CompactTextString(m) }
func (*PrePrepare) ProtoMessage()               {}
func (*PrePrepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PrePrepare) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *PrePrepare) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *PrePrepare) GetBatchDigest() string {
	if m != nil {
		return m.BatchDigest
	}
	return ""
}

func (m *PrePrepare) GetHashBatch() *HashBatch {
	if m != nil {
		return m.HashBatch
	}
	return nil
}

func (m *PrePrepare) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

type Prepare struct {
	View           uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	BatchDigest    string `protobuf:"bytes,3,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	ReplicaId      uint64 `protobuf:"varint,4,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *Prepare) Reset()                    { *m = Prepare{} }
func (m *Prepare) String() string            { return proto.CompactTextString(m) }
func (*Prepare) ProtoMessage()               {}
func (*Prepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Prepare) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *Prepare) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *Prepare) GetBatchDigest() string {
	if m != nil {
		return m.BatchDigest
	}
	return ""
}

func (m *Prepare) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

type Commit struct {
	View           uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	BatchDigest    string `protobuf:"bytes,3,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	InvalidTxsHash string `protobuf:"bytes,4,opt,name=invalid_txs_hash,json=invalidTxsHash" json:"invalid_txs_hash,omitempty"`
	ReplicaId      uint64 `protobuf:"varint,5,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Commit) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *Commit) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *Commit) GetBatchDigest() string {
	if m != nil {
		return m.BatchDigest
	}
	return ""
}

func (m *Commit) GetInvalidTxsHash() string {
	if m != nil {
		return m.InvalidTxsHash
	}
	return ""
}

func (m *Commit) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

type BlockInfo struct {
	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
	BlockHash   []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *BlockInfo) Reset()                    { *m = BlockInfo{} }
func (m *BlockInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()               {}
func (*BlockInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BlockInfo) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *BlockInfo) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type Checkpoint struct {
	SequenceNumber uint64 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	ReplicaId      uint64 `protobuf:"varint,2,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Genesis        uint64 `protobuf:"varint,4,opt,name=genesis" json:"genesis,omitempty"`
}

func (m *Checkpoint) Reset()                    { *m = Checkpoint{} }
func (m *Checkpoint) String() string            { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()               {}
func (*Checkpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Checkpoint) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *Checkpoint) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *Checkpoint) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Checkpoint) GetGenesis() uint64 {
	if m != nil {
		return m.Genesis
	}
	return 0
}

// This message should go away and become a checkpoint once replica_id is removed
type Vc_C struct {
	SequenceNumber uint64 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *Vc_C) Reset()                    { *m = Vc_C{} }
func (m *Vc_C) String() string            { return proto.CompactTextString(m) }
func (*Vc_C) ProtoMessage()               {}
func (*Vc_C) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Vc_C) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *Vc_C) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Vc_PQ struct {
	SequenceNumber uint64 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	BatchDigest    string `protobuf:"bytes,2,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	View           uint64 `protobuf:"varint,3,opt,name=view" json:"view,omitempty"`
}

func (m *Vc_PQ) Reset()                    { *m = Vc_PQ{} }
func (m *Vc_PQ) String() string            { return proto.CompactTextString(m) }
func (*Vc_PQ) ProtoMessage()               {}
func (*Vc_PQ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Vc_PQ) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *Vc_PQ) GetBatchDigest() string {
	if m != nil {
		return m.BatchDigest
	}
	return ""
}

func (m *Vc_PQ) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

type VcBasis struct {
	View      uint64   `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	H         uint64   `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	Cset      []*Vc_C  `protobuf:"bytes,3,rep,name=cset" json:"cset,omitempty"`
	Pset      []*Vc_PQ `protobuf:"bytes,4,rep,name=pset" json:"pset,omitempty"`
	Qset      []*Vc_PQ `protobuf:"bytes,5,rep,name=qset" json:"qset,omitempty"`
	ReplicaId uint64   `protobuf:"varint,6,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Genesis   uint64   `protobuf:"varint,7,opt,name=genesis" json:"genesis,omitempty"`
}

func (m *VcBasis) Reset()                    { *m = VcBasis{} }
func (m *VcBasis) String() string            { return proto.CompactTextString(m) }
func (*VcBasis) ProtoMessage()               {}
func (*VcBasis) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *VcBasis) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *VcBasis) GetH() uint64 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *VcBasis) GetCset() []*Vc_C {
	if m != nil {
		return m.Cset
	}
	return nil
}

func (m *VcBasis) GetPset() []*Vc_PQ {
	if m != nil {
		return m.Pset
	}
	return nil
}

func (m *VcBasis) GetQset() []*Vc_PQ {
	if m != nil {
		return m.Qset
	}
	return nil
}

func (m *VcBasis) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *VcBasis) GetGenesis() uint64 {
	if m != nil {
		return m.Genesis
	}
	return 0
}

type ViewChange struct {
	Basis     *VcBasis `protobuf:"bytes,1,opt,name=basis" json:"basis,omitempty"`
	Signature []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Timestamp int64    `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ViewChange) Reset()                    { *m = ViewChange{} }
func (m *ViewChange) String() string            { return proto.CompactTextString(m) }
func (*ViewChange) ProtoMessage()               {}
func (*ViewChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ViewChange) GetBasis() *VcBasis {
	if m != nil {
		return m.Basis
	}
	return nil
}

func (m *ViewChange) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ViewChange) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type NewView struct {
	View      uint64            `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Xset      map[uint64]string `protobuf:"bytes,2,rep,name=xset" json:"xset,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ReplicaId uint64            `protobuf:"varint,3,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *NewView) Reset()                    { *m = NewView{} }
func (m *NewView) String() string            { return proto.CompactTextString(m) }
func (*NewView) ProtoMessage()               {}
func (*NewView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *NewView) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NewView) GetXset() map[uint64]string {
	if m != nil {
		return m.Xset
	}
	return nil
}

func (m *NewView) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

type FinishVcReset struct {
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	View      uint64 `protobuf:"varint,2,opt,name=view" json:"view,omitempty"`
	LowH      uint64 `protobuf:"varint,3,opt,name=low_h,json=lowH" json:"low_h,omitempty"`
}

func (m *FinishVcReset) Reset()                    { *m = FinishVcReset{} }
func (m *FinishVcReset) String() string            { return proto.CompactTextString(m) }
func (*FinishVcReset) ProtoMessage()               {}
func (*FinishVcReset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FinishVcReset) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *FinishVcReset) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *FinishVcReset) GetLowH() uint64 {
	if m != nil {
		return m.LowH
	}
	return 0
}

type FetchRequestBatch struct {
	BatchDigest string `protobuf:"bytes,1,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	ReplicaId   uint64 `protobuf:"varint,2,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *FetchRequestBatch) Reset()                    { *m = FetchRequestBatch{} }
func (m *FetchRequestBatch) String() string            { return proto.CompactTextString(m) }
func (*FetchRequestBatch) ProtoMessage()               {}
func (*FetchRequestBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *FetchRequestBatch) GetBatchDigest() string {
	if m != nil {
		return m.BatchDigest
	}
	return ""
}

func (m *FetchRequestBatch) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

type NegotiateView struct {
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *NegotiateView) Reset()                    { *m = NegotiateView{} }
func (m *NegotiateView) String() string            { return proto.CompactTextString(m) }
func (*NegotiateView) ProtoMessage()               {}
func (*NegotiateView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *NegotiateView) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

type NegotiateViewResponse struct {
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	View      uint64 `protobuf:"varint,2,opt,name=view" json:"view,omitempty"`
	N         uint64 `protobuf:"varint,3,opt,name=n" json:"n,omitempty"`
	Routers   []byte `protobuf:"bytes,4,opt,name=routers,proto3" json:"routers,omitempty"`
}

func (m *NegotiateViewResponse) Reset()                    { *m = NegotiateViewResponse{} }
func (m *NegotiateViewResponse) String() string            { return proto.CompactTextString(m) }
func (*NegotiateViewResponse) ProtoMessage()               {}
func (*NegotiateViewResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *NegotiateViewResponse) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *NegotiateViewResponse) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NegotiateViewResponse) GetN() uint64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *NegotiateViewResponse) GetRouters() []byte {
	if m != nil {
		return m.Routers
	}
	return nil
}

type RecoveryInit struct {
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *RecoveryInit) Reset()                    { *m = RecoveryInit{} }
func (m *RecoveryInit) String() string            { return proto.CompactTextString(m) }
func (*RecoveryInit) ProtoMessage()               {}
func (*RecoveryInit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *RecoveryInit) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

type RecoveryResponse struct {
	ReplicaId     uint64            `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Chkpts        map[uint64]string `protobuf:"bytes,2,rep,name=chkpts" json:"chkpts,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BlockHeight   uint64            `protobuf:"varint,3,opt,name=blockHeight" json:"blockHeight,omitempty"`
	LastBlockHash string            `protobuf:"bytes,4,opt,name=lastBlockHash" json:"lastBlockHash,omitempty"`
	Genesis       uint64            `protobuf:"varint,5,opt,name=genesis" json:"genesis,omitempty"`
}

func (m *RecoveryResponse) Reset()                    { *m = RecoveryResponse{} }
func (m *RecoveryResponse) String() string            { return proto.CompactTextString(m) }
func (*RecoveryResponse) ProtoMessage()               {}
func (*RecoveryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RecoveryResponse) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *RecoveryResponse) GetChkpts() map[uint64]string {
	if m != nil {
		return m.Chkpts
	}
	return nil
}

func (m *RecoveryResponse) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *RecoveryResponse) GetLastBlockHash() string {
	if m != nil {
		return m.LastBlockHash
	}
	return ""
}

func (m *RecoveryResponse) GetGenesis() uint64 {
	if m != nil {
		return m.Genesis
	}
	return 0
}

type RecoveryFetchPQC struct {
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	H         uint64 `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
}

func (m *RecoveryFetchPQC) Reset()                    { *m = RecoveryFetchPQC{} }
func (m *RecoveryFetchPQC) String() string            { return proto.CompactTextString(m) }
func (*RecoveryFetchPQC) ProtoMessage()               {}
func (*RecoveryFetchPQC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RecoveryFetchPQC) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *RecoveryFetchPQC) GetH() uint64 {
	if m != nil {
		return m.H
	}
	return 0
}

type RecoveryReturnPQC struct {
	ReplicaId uint64        `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	PrepreSet []*PrePrepare `protobuf:"bytes,2,rep,name=prepre_set,json=prepreSet" json:"prepre_set,omitempty"`
	PreSet    []*Prepare    `protobuf:"bytes,3,rep,name=pre_set,json=preSet" json:"pre_set,omitempty"`
	CmtSet    []*Commit     `protobuf:"bytes,4,rep,name=cmt_set,json=cmtSet" json:"cmt_set,omitempty"`
}

func (m *RecoveryReturnPQC) Reset()                    { *m = RecoveryReturnPQC{} }
func (m *RecoveryReturnPQC) String() string            { return proto.CompactTextString(m) }
func (*RecoveryReturnPQC) ProtoMessage()               {}
func (*RecoveryReturnPQC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *RecoveryReturnPQC) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *RecoveryReturnPQC) GetPrepreSet() []*PrePrepare {
	if m != nil {
		return m.PrepreSet
	}
	return nil
}

func (m *RecoveryReturnPQC) GetPreSet() []*Prepare {
	if m != nil {
		return m.PreSet
	}
	return nil
}

func (m *RecoveryReturnPQC) GetCmtSet() []*Commit {
	if m != nil {
		return m.CmtSet
	}
	return nil
}

type Pset struct {
	Set []*Prepare `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
}

func (m *Pset) Reset()                    { *m = Pset{} }
func (m *Pset) String() string            { return proto.CompactTextString(m) }
func (*Pset) ProtoMessage()               {}
func (*Pset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Pset) GetSet() []*Prepare {
	if m != nil {
		return m.Set
	}
	return nil
}

type Cset struct {
	Set []*Commit `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
}

func (m *Cset) Reset()                    { *m = Cset{} }
func (m *Cset) String() string            { return proto.CompactTextString(m) }
func (*Cset) ProtoMessage()               {}
func (*Cset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Cset) GetSet() []*Commit {
	if m != nil {
		return m.Set
	}
	return nil
}

type AddNode struct {
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Key       string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *AddNode) Reset()                    { *m = AddNode{} }
func (m *AddNode) String() string            { return proto.CompactTextString(m) }
func (*AddNode) ProtoMessage()               {}
func (*AddNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *AddNode) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *AddNode) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DelNode struct {
	ReplicaId  uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Key        string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	RouterHash string `protobuf:"bytes,3,opt,name=router_hash,json=routerHash" json:"router_hash,omitempty"`
}

func (m *DelNode) Reset()                    { *m = DelNode{} }
func (m *DelNode) String() string            { return proto.CompactTextString(m) }
func (*DelNode) ProtoMessage()               {}
func (*DelNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *DelNode) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *DelNode) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DelNode) GetRouterHash() string {
	if m != nil {
		return m.RouterHash
	}
	return ""
}

type ReadyForN struct {
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Key       string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *ReadyForN) Reset()                    { *m = ReadyForN{} }
func (m *ReadyForN) String() string            { return proto.CompactTextString(m) }
func (*ReadyForN) ProtoMessage()               {}
func (*ReadyForN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ReadyForN) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *ReadyForN) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type AgreeUpdateN struct {
	Basis      *VcBasis `protobuf:"bytes,1,opt,name=basis" json:"basis,omitempty"`
	Flag       bool     `protobuf:"varint,2,opt,name=flag" json:"flag,omitempty"`
	Key        string   `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	RouterHash string   `protobuf:"bytes,4,opt,name=routerHash" json:"routerHash,omitempty"`
	N          int64    `protobuf:"varint,5,opt,name=n" json:"n,omitempty"`
}

func (m *AgreeUpdateN) Reset()                    { *m = AgreeUpdateN{} }
func (m *AgreeUpdateN) String() string            { return proto.CompactTextString(m) }
func (*AgreeUpdateN) ProtoMessage()               {}
func (*AgreeUpdateN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *AgreeUpdateN) GetBasis() *VcBasis {
	if m != nil {
		return m.Basis
	}
	return nil
}

func (m *AgreeUpdateN) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

func (m *AgreeUpdateN) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AgreeUpdateN) GetRouterHash() string {
	if m != nil {
		return m.RouterHash
	}
	return ""
}

func (m *AgreeUpdateN) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

type UpdateN struct {
	Flag      bool              `protobuf:"varint,1,opt,name=flag" json:"flag,omitempty"`
	ReplicaId uint64            `protobuf:"varint,2,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Key       string            `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	N         int64             `protobuf:"varint,4,opt,name=n" json:"n,omitempty"`
	View      uint64            `protobuf:"varint,5,opt,name=view" json:"view,omitempty"`
	Xset      map[uint64]string `protobuf:"bytes,6,rep,name=xset" json:"xset,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UpdateN) Reset()                    { *m = UpdateN{} }
func (m *UpdateN) String() string            { return proto.CompactTextString(m) }
func (*UpdateN) ProtoMessage()               {}
func (*UpdateN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *UpdateN) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

func (m *UpdateN) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *UpdateN) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UpdateN) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *UpdateN) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *UpdateN) GetXset() map[uint64]string {
	if m != nil {
		return m.Xset
	}
	return nil
}

type FinishUpdate struct {
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	View      uint64 `protobuf:"varint,2,opt,name=view" json:"view,omitempty"`
	LowH      uint64 `protobuf:"varint,3,opt,name=low_h,json=lowH" json:"low_h,omitempty"`
}

func (m *FinishUpdate) Reset()                    { *m = FinishUpdate{} }
func (m *FinishUpdate) String() string            { return proto.CompactTextString(m) }
func (*FinishUpdate) ProtoMessage()               {}
func (*FinishUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *FinishUpdate) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *FinishUpdate) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *FinishUpdate) GetLowH() uint64 {
	if m != nil {
		return m.LowH
	}
	return 0
}

func init() {
	proto.RegisterType((*ConsensusMessage)(nil), "rbft.consensus_message")
	proto.RegisterType((*TransactionBatch)(nil), "rbft.transaction_batch")
	proto.RegisterType((*HashBatch)(nil), "rbft.hash_batch")
	proto.RegisterType((*ReturnRequestBatch)(nil), "rbft.return_request_batch")
	proto.RegisterType((*FetchMissingTransaction)(nil), "rbft.fetch_missing_transaction")
	proto.RegisterType((*ReturnMissingTransaction)(nil), "rbft.return_missing_transaction")
	proto.RegisterType((*PrePrepare)(nil), "rbft.pre_prepare")
	proto.RegisterType((*Prepare)(nil), "rbft.prepare")
	proto.RegisterType((*Commit)(nil), "rbft.commit")
	proto.RegisterType((*BlockInfo)(nil), "rbft.block_info")
	proto.RegisterType((*Checkpoint)(nil), "rbft.checkpoint")
	proto.RegisterType((*Vc_C)(nil), "rbft.vc_C")
	proto.RegisterType((*Vc_PQ)(nil), "rbft.vc_PQ")
	proto.RegisterType((*VcBasis)(nil), "rbft.vc_basis")
	proto.RegisterType((*ViewChange)(nil), "rbft.view_change")
	proto.RegisterType((*NewView)(nil), "rbft.new_view")
	proto.RegisterType((*FinishVcReset)(nil), "rbft.finish_vcReset")
	proto.RegisterType((*FetchRequestBatch)(nil), "rbft.fetch_request_batch")
	proto.RegisterType((*NegotiateView)(nil), "rbft.negotiate_view")
	proto.RegisterType((*NegotiateViewResponse)(nil), "rbft.negotiate_view_response")
	proto.RegisterType((*RecoveryInit)(nil), "rbft.recovery_init")
	proto.RegisterType((*RecoveryResponse)(nil), "rbft.recovery_response")
	proto.RegisterType((*RecoveryFetchPQC)(nil), "rbft.recovery_fetchPQC")
	proto.RegisterType((*RecoveryReturnPQC)(nil), "rbft.recovery_returnPQC")
	proto.RegisterType((*Pset)(nil), "rbft.Pset")
	proto.RegisterType((*Cset)(nil), "rbft.Cset")
	proto.RegisterType((*AddNode)(nil), "rbft.add_node")
	proto.RegisterType((*DelNode)(nil), "rbft.del_node")
	proto.RegisterType((*ReadyForN)(nil), "rbft.ready_for_n")
	proto.RegisterType((*AgreeUpdateN)(nil), "rbft.agree_update_n")
	proto.RegisterType((*UpdateN)(nil), "rbft.update_n")
	proto.RegisterType((*FinishUpdate)(nil), "rbft.finish_update")
	proto.RegisterEnum("rbft.ConsensusMessage_Type", ConsensusMessage_Type_name, ConsensusMessage_Type_value)
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x5f, 0x93, 0xda, 0xc8,
	0x11, 0x8f, 0x40, 0xb0, 0xd0, 0xb0, 0x58, 0x3b, 0xb6, 0x6f, 0xb9, 0xbd, 0xb3, 0x8f, 0x28, 0x97,
	0x3b, 0xaa, 0x72, 0xc7, 0x5e, 0x39, 0x0f, 0xf9, 0xe3, 0xca, 0x1f, 0xcc, 0xca, 0x86, 0xdc, 0x59,
	0xb0, 0x83, 0x6c, 0xdf, 0x55, 0xa5, 0x6a, 0x4a, 0x2b, 0x66, 0x41, 0x65, 0x90, 0x58, 0xcd, 0xc0,
	0x2e, 0x2f, 0x79, 0x4d, 0x2a, 0x95, 0x6f, 0x91, 0x7c, 0x81, 0xa4, 0xf2, 0x96, 0xca, 0x6b, 0xf2,
	0x15, 0xf2, 0x01, 0xf2, 0x41, 0x52, 0x33, 0x23, 0x81, 0x60, 0xb1, 0x59, 0xbb, 0xce, 0xb9, 0xb7,
	0x99, 0x9e, 0x9e, 0xee, 0x5f, 0xff, 0xa6, 0xa7, 0x7b, 0x24, 0xa8, 0x4c, 0x28, 0x63, 0xee, 0x90,
	0xb2, 0xc6, 0x34, 0x0a, 0x79, 0x88, 0xf4, 0xe8, 0xec, 0x9c, 0x1f, 0xfd, 0x62, 0xe8, 0xf3, 0xd1,
	0xec, 0xac, 0xe1, 0x85, 0x93, 0xe3, 0xd1, 0x62, 0x4a, 0x23, 0x6f, 0xe4, 0xfa, 0x41, 0x7a, 0xe8,
	0x85, 0x11, 0x3d, 0xe6, 0x8b, 0x29, 0x65, 0xc7, 0x3c, 0x72, 0x03, 0xe6, 0x7a, 0xdc, 0x0f, 0x03,
	0x65, 0xc4, 0xfc, 0x97, 0x0e, 0x07, 0x5e, 0x18, 0x30, 0x1a, 0xb0, 0x19, 0x23, 0xb1, 0x07, 0xf4,
	0x05, 0xe8, 0x62, 0x43, 0x55, 0xab, 0x69, 0xf5, 0xca, 0x83, 0x0f, 0x1b, 0xc2, 0x53, 0xe3, 0x9a,
	0x5a, 0xc3, 0x59, 0x4c, 0x29, 0x96, 0x9a, 0xa8, 0x0a, 0x7b, 0x53, 0x77, 0x31, 0x0e, 0xdd, 0x41,
	0x35, 0x53, 0xd3, 0xea, 0x65, 0x9c, 0x4c, 0xcd, 0xff, 0x66, 0x41, 0x17, 0x8a, 0xe8, 0x16, 0x94,
	0x1c, 0xdc, 0xb4, 0xfb, 0xcd, 0x96, 0xd3, 0xe9, 0xda, 0xc6, 0xf7, 0x84, 0xa0, 0x87, 0x2d, 0xd2,
	0xc3, 0x56, 0xaf, 0x89, 0x2d, 0x43, 0x43, 0x25, 0xd8, 0x4b, 0x26, 0x19, 0x04, 0x90, 0x6f, 0x75,
	0x9f, 0x3e, 0xed, 0x38, 0x46, 0x16, 0x55, 0x00, 0x5a, 0x6d, 0xab, 0xf5, 0x65, 0xaf, 0xdb, 0xb1,
	0x1d, 0x43, 0x17, 0x3b, 0x9f, 0x77, 0xac, 0x17, 0xa4, 0xd5, 0x6e, 0xda, 0x4f, 0x2c, 0x23, 0x87,
	0xca, 0x50, 0xb0, 0xad, 0x17, 0x44, 0x08, 0x8d, 0x3c, 0x42, 0x50, 0x79, 0xdc, 0xb1, 0x3b, 0xfd,
	0x36, 0x79, 0xde, 0xc2, 0x56, 0xdf, 0x72, 0x8c, 0x3d, 0x74, 0x08, 0xb7, 0x1f, 0x63, 0xa7, 0xd5,
	0x26, 0xd8, 0x3a, 0x7d, 0x66, 0xf5, 0x1d, 0xf2, 0xa8, 0xe9, 0xb4, 0xda, 0x46, 0x01, 0x55, 0xe1,
	0x0e, 0xb6, 0x9c, 0x67, 0xd8, 0xde, 0x58, 0x29, 0x0a, 0x33, 0xb6, 0xf5, 0xa4, 0xeb, 0x74, 0x9a,
	0x8e, 0xa5, 0x4c, 0x03, 0xfa, 0x00, 0x0e, 0xd7, 0x65, 0x04, 0x5b, 0xfd, 0x5e, 0xd7, 0xee, 0x5b,
	0x46, 0x09, 0x1d, 0xc0, 0x3e, 0xb6, 0x5a, 0xdd, 0xe7, 0x16, 0xfe, 0x86, 0x74, 0xec, 0x8e, 0x63,
	0x94, 0xd1, 0x5d, 0x38, 0x58, 0x8a, 0x96, 0x9a, 0xfb, 0xe8, 0x3d, 0x40, 0x4b, 0xf1, 0x63, 0x4b,
	0xc0, 0x3a, 0xed, 0xb5, 0x8c, 0x8a, 0x40, 0x99, 0x52, 0x97, 0xa8, 0xc4, 0xc2, 0x2d, 0x11, 0x60,
	0xf3, 0xe4, 0x84, 0xd8, 0xdd, 0x13, 0xcb, 0x30, 0xc4, 0xec, 0xc4, 0xfa, 0x4a, 0xcd, 0x0e, 0x04,
	0x1b, 0xd8, 0x6a, 0x9e, 0x7c, 0x43, 0x1e, 0x77, 0x31, 0xb1, 0x0d, 0x24, 0x80, 0x37, 0x9f, 0x60,
	0xcb, 0x22, 0xcf, 0x7a, 0x27, 0x02, 0xa7, 0x6d, 0xdc, 0x16, 0x5b, 0x96, 0xb3, 0x3b, 0x02, 0x69,
	0xcc, 0x90, 0x12, 0x1a, 0x77, 0xd1, 0x3d, 0x78, 0x5f, 0x21, 0x79, 0xda, 0xe9, 0xf7, 0x3b, 0xf6,
	0x13, 0x92, 0x3e, 0xac, 0xf7, 0xd0, 0x7d, 0x38, 0x8a, 0x01, 0x6d, 0x5b, 0x3f, 0x34, 0xff, 0xa6,
	0xc1, 0x41, 0x2a, 0xbd, 0xc8, 0x99, 0xcb, 0xbd, 0x11, 0xfa, 0x11, 0xec, 0xf1, 0x2b, 0x32, 0xf6,
	0x19, 0xaf, 0x6a, 0xb5, 0x6c, 0xbd, 0xf4, 0x00, 0x35, 0x64, 0x26, 0x36, 0x9c, 0x95, 0x2a, 0xce,
	0xf3, 0xab, 0xaf, 0x7c, 0xc6, 0xd1, 0x07, 0x50, 0x1c, 0xb9, 0x6c, 0xa4, 0xd4, 0x33, 0xb5, 0x6c,
	0xbd, 0x88, 0x0b, 0x42, 0x20, 0x17, 0x3f, 0x84, 0x22, 0xf7, 0x27, 0x94, 0x71, 0x77, 0x32, 0xad,
	0x66, 0x6b, 0x5a, 0x3d, 0x8b, 0x57, 0x02, 0x74, 0x17, 0xf2, 0x8c, 0x5e, 0x90, 0x20, 0xac, 0xea,
	0x35, 0xad, 0xae, 0xe3, 0x1c, 0xa3, 0x17, 0x76, 0x88, 0xee, 0x03, 0x44, 0x94, 0xcd, 0xc6, 0xbc,
	0xed, 0xb2, 0x51, 0x35, 0x57, 0xd3, 0xea, 0x45, 0x9c, 0x92, 0x98, 0xbf, 0x04, 0x90, 0x1e, 0x15,
	0x58, 0x04, 0xfa, 0x12, 0x69, 0x11, 0xcb, 0xf1, 0xba, 0xdb, 0xcc, 0x86, 0x5b, 0xf3, 0xf7, 0x1a,
	0xdc, 0x89, 0x28, 0x9f, 0x45, 0x01, 0x89, 0xe8, 0xc5, 0x8c, 0x32, 0x1e, 0x9b, 0xfa, 0x1c, 0x72,
	0x72, 0x20, 0x6f, 0x50, 0xe9, 0xc1, 0xa1, 0xba, 0x41, 0xd7, 0xf8, 0xc1, 0x4a, 0x0b, 0x7d, 0x1f,
	0xca, 0x72, 0x40, 0x06, 0xfe, 0x90, 0xca, 0xe0, 0x05, 0xd2, 0x92, 0x94, 0x9d, 0x48, 0x11, 0xba,
	0x27, 0x42, 0x99, 0x8e, 0x7d, 0xcf, 0x25, 0xfe, 0x40, 0x12, 0xa0, 0xe3, 0x62, 0x2c, 0xe9, 0x0c,
	0xcc, 0x3f, 0x67, 0xe0, 0xfd, 0x73, 0x2a, 0x4c, 0x4c, 0x7c, 0xc6, 0xfc, 0x60, 0x48, 0x52, 0xce,
	0x44, 0x64, 0x73, 0x9f, 0x5e, 0x4a, 0x34, 0x3a, 0x96, 0x63, 0xf4, 0x29, 0xdc, 0x62, 0x02, 0x73,
	0xe0, 0x51, 0x12, 0xcc, 0x26, 0x67, 0x34, 0x92, 0x6e, 0x75, 0x5c, 0x49, 0xc4, 0xb6, 0x94, 0x5e,
	0x03, 0x97, 0xbd, 0x0e, 0xee, 0x37, 0xe9, 0x93, 0xd3, 0xe5, 0x41, 0x7f, 0xae, 0x42, 0x7e, 0x25,
	0xa6, 0x46, 0x3b, 0x3e, 0x59, 0x2b, 0xe0, 0xd1, 0x22, 0x75, 0xd0, 0xeb, 0x81, 0xe6, 0x36, 0x02,
	0x3d, 0x7a, 0x08, 0xfb, 0x6b, 0x3b, 0x91, 0x01, 0xd9, 0x97, 0x74, 0x11, 0x87, 0x26, 0x86, 0xe8,
	0x0e, 0xe4, 0xe6, 0xee, 0x78, 0x46, 0x63, 0x1a, 0xd5, 0xe4, 0xe7, 0x99, 0x9f, 0x6a, 0xe6, 0x3f,
	0xb2, 0x70, 0x14, 0x9f, 0xd7, 0x77, 0x41, 0xd3, 0x97, 0xd7, 0x69, 0x6a, 0x28, 0x9a, 0x5e, 0x0d,
	0xea, 0x95, 0x3c, 0x59, 0xab, 0xab, 0x95, 0x93, 0xa6, 0x3e, 0xdb, 0x69, 0xca, 0xb9, 0x5a, 0x19,
	0x4a, 0x2e, 0xdd, 0x3a, 0xdd, 0xf9, 0x6f, 0x93, 0xee, 0xa3, 0xa7, 0x50, 0x4a, 0xb9, 0xdc, 0xb2,
	0xb5, 0x9e, 0xde, 0xba, 0xbd, 0x38, 0xa4, 0x4e, 0xef, 0x9f, 0x1a, 0x94, 0xa6, 0x11, 0x25, 0xd3,
	0x88, 0x4e, 0xdd, 0x88, 0xbe, 0xf3, 0xe3, 0x3a, 0x4e, 0x57, 0x07, 0x59, 0x58, 0x4a, 0x0f, 0x0c,
	0x45, 0xf2, 0x4a, 0x8e, 0xe5, 0x91, 0x3e, 0x92, 0xd7, 0xf8, 0xf5, 0xa9, 0x6b, 0xfe, 0x41, 0x83,
	0xbd, 0xff, 0x17, 0xf6, 0x75, 0x28, 0xfa, 0x26, 0x94, 0xbf, 0x6a, 0x90, 0xf7, 0xc2, 0xc9, 0xc4,
	0xe7, 0xef, 0x1c, 0x49, 0x1d, 0x0c, 0x3f, 0x98, 0xbb, 0x63, 0x7f, 0x40, 0xf8, 0x15, 0x23, 0x82,
	0x2d, 0x89, 0xa7, 0x88, 0x2b, 0xb1, 0xdc, 0xb9, 0x62, 0x22, 0xc7, 0x76, 0xd1, 0x67, 0x03, 0x9c,
	0x8d, 0x43, 0xef, 0x25, 0xf1, 0x83, 0xf3, 0x50, 0x7a, 0x96, 0xb3, 0x18, 0x9f, 0x82, 0x5f, 0x92,
	0xb2, 0x18, 0xdc, 0xbd, 0x64, 0x83, 0xf4, 0xa9, 0x9e, 0x25, 0x45, 0x29, 0x91, 0xc5, 0xff, 0x77,
	0x00, 0xde, 0x88, 0x7a, 0x2f, 0xa7, 0xa1, 0x1f, 0xf0, 0x6d, 0x21, 0x6b, 0x5b, 0x43, 0x5e, 0x47,
	0x99, 0xd9, 0x40, 0x89, 0x2a, 0x90, 0x89, 0xeb, 0x73, 0x11, 0x67, 0xfc, 0x81, 0x78, 0x18, 0x0d,
	0x69, 0x40, 0x99, 0xcf, 0xe2, 0x53, 0x48, 0xa6, 0xe6, 0xaf, 0x40, 0x9f, 0x7b, 0xa4, 0x75, 0x73,
	0xcf, 0xca, 0x74, 0x26, 0x31, 0x6d, 0x0e, 0x21, 0x37, 0xf7, 0x48, 0xef, 0xf4, 0xe6, 0x16, 0x6e,
	0xd0, 0x67, 0x92, 0x74, 0xc8, 0xae, 0xd2, 0xc1, 0xfc, 0xb7, 0x06, 0x85, 0xb9, 0x47, 0xce, 0x5c,
	0xe6, 0xb3, 0xad, 0xf9, 0x52, 0x06, 0x6d, 0x14, 0x53, 0xa1, 0x8d, 0xd0, 0x7d, 0xd0, 0x3d, 0x46,
	0x45, 0x32, 0x88, 0xb2, 0x04, 0xea, 0xc6, 0x88, 0x50, 0xb1, 0x94, 0xa3, 0x8f, 0x40, 0x9f, 0x8a,
	0x75, 0x55, 0x01, 0x4b, 0xcb, 0xf5, 0xde, 0x29, 0x96, 0x0b, 0x42, 0xe1, 0x42, 0x28, 0xe4, 0xb6,
	0x28, 0x88, 0x85, 0x1d, 0x45, 0x2b, 0xcd, 0xf9, 0xde, 0x3a, 0xe7, 0x21, 0x94, 0x04, 0x60, 0xe2,
	0x8d, 0xdc, 0x60, 0x48, 0xd1, 0xc7, 0xa2, 0x4d, 0x0b, 0x35, 0xd5, 0xa6, 0x2b, 0x4b, 0x4f, 0x52,
	0x8a, 0xd5, 0xa2, 0x78, 0x03, 0x30, 0x7f, 0x18, 0xb8, 0x7c, 0x16, 0xd1, 0x24, 0x8d, 0x96, 0x82,
	0xd7, 0x3f, 0x4c, 0xcc, 0xbf, 0x68, 0x50, 0x08, 0xe8, 0x25, 0x91, 0x34, 0x6d, 0xa3, 0xee, 0x33,
	0xd0, 0xaf, 0x44, 0xac, 0x19, 0x19, 0x6b, 0x55, 0x21, 0x48, 0x76, 0x34, 0xbe, 0x66, 0x34, 0xae,
	0xd7, 0x52, 0x6b, 0xc7, 0x2b, 0xe0, 0xe8, 0x27, 0x50, 0x5c, 0xee, 0x78, 0xa3, 0xc6, 0xf8, 0x35,
	0x54, 0xce, 0xfd, 0xc0, 0x67, 0x23, 0x32, 0xf7, 0x30, 0xbd, 0xee, 0x49, 0xdb, 0xa4, 0x38, 0x09,
	0x25, 0x93, 0x0a, 0xe5, 0x36, 0xe4, 0xc6, 0xe1, 0x25, 0x19, 0x25, 0xb9, 0x33, 0x0e, 0x2f, 0xdb,
	0xe6, 0x0b, 0xb8, 0xad, 0xde, 0x00, 0xeb, 0x0f, 0xa4, 0xcd, 0x4c, 0xd4, 0x76, 0x95, 0xb0, 0xcd,
	0x8b, 0x66, 0x1e, 0x43, 0x25, 0xa0, 0xc3, 0x90, 0xfb, 0x2e, 0xa7, 0x8a, 0xde, 0xd7, 0x43, 0x36,
	0x39, 0x1c, 0xae, 0x6f, 0x20, 0x11, 0x65, 0x53, 0xf1, 0x51, 0xf3, 0x36, 0xc1, 0x96, 0x41, 0x0b,
	0xe2, 0x40, 0xb5, 0x40, 0x64, 0x5c, 0x14, 0xce, 0x38, 0x8d, 0xd4, 0x2d, 0x2f, 0xe3, 0x64, 0x6a,
	0x36, 0x60, 0x3f, 0xa2, 0x5e, 0x38, 0xa7, 0xd1, 0x82, 0xf8, 0x81, 0xbf, 0x8b, 0x58, 0xf3, 0x4f,
	0x19, 0x38, 0x58, 0x6e, 0xb8, 0x29, 0xc0, 0x87, 0x90, 0xf7, 0x46, 0x2f, 0xa7, 0x9c, 0xc5, 0x69,
	0xf4, 0x83, 0xe4, 0x29, 0xb0, 0x61, 0xa7, 0xd1, 0x92, 0x5a, 0xf1, 0x0b, 0x40, 0x6d, 0x41, 0x35,
	0x50, 0x55, 0xb3, 0x4d, 0xfd, 0xe1, 0x88, 0xc7, 0x31, 0xa5, 0x45, 0xe8, 0x63, 0xd8, 0x1f, 0xbb,
	0x8c, 0x3f, 0x4a, 0x4a, 0x67, 0x5c, 0xbf, 0xd7, 0x85, 0xe9, 0x5b, 0x97, 0x5b, 0xbb, 0x75, 0x47,
	0x3f, 0x83, 0x52, 0xca, 0xf1, 0x1b, 0x25, 0xe6, 0xaf, 0x53, 0x6c, 0xc8, 0x3c, 0xea, 0x9d, 0xb6,
	0x76, 0xb1, 0xb1, 0x56, 0x8d, 0xcc, 0xbf, 0x6b, 0x80, 0x52, 0x44, 0x88, 0xc7, 0xd1, 0x0d, 0x6c,
	0x7c, 0x01, 0x20, 0x5a, 0x75, 0x44, 0xc9, 0xea, 0x72, 0x1e, 0x28, 0x56, 0x53, 0x4f, 0x10, 0x5c,
	0x54, 0x4a, 0x7d, 0xca, 0xd1, 0x27, 0xb2, 0xb9, 0x93, 0x55, 0xe1, 0xdb, 0x5f, 0xaa, 0x4b, 0xd5,
	0x7c, 0xac, 0xf7, 0x43, 0xd8, 0xf3, 0x26, 0x9c, 0xac, 0x0a, 0x60, 0x39, 0xf9, 0xbc, 0x16, 0xed,
	0x18, 0xe7, 0xbd, 0x09, 0xef, 0x53, 0x6e, 0x7e, 0x0a, 0x7a, 0x4f, 0xd5, 0xc2, 0xac, 0x50, 0xd5,
	0xb6, 0x99, 0x14, 0x2b, 0xe6, 0x27, 0xa0, 0xb7, 0x84, 0xe2, 0xfd, 0xb4, 0xe2, 0xba, 0x4d, 0xa9,
	0xf7, 0x10, 0x0a, 0xee, 0x60, 0x40, 0x82, 0x70, 0xb0, 0x33, 0x9d, 0xe2, 0x03, 0x52, 0x87, 0x21,
	0x86, 0xe6, 0x6f, 0xa1, 0x30, 0xa0, 0xe3, 0xb7, 0xdb, 0x8c, 0x3e, 0x82, 0x92, 0xba, 0x0d, 0xaa,
	0x11, 0x67, 0xe3, 0xcf, 0x30, 0x29, 0x8a, 0x3f, 0xc3, 0x4a, 0x11, 0x75, 0x07, 0x0b, 0x72, 0x1e,
	0x46, 0x24, 0x78, 0x73, 0x74, 0x7f, 0xd4, 0xa0, 0xe2, 0x0e, 0x23, 0x4a, 0xc9, 0x6c, 0x3a, 0x10,
	0xb7, 0x3b, 0xb8, 0x61, 0x65, 0x47, 0xa0, 0x9f, 0x8f, 0xdd, 0xa1, 0xb4, 0x55, 0xc0, 0x72, 0x9c,
	0x98, 0xcf, 0xae, 0xf0, 0x8b, 0xaf, 0xc8, 0x25, 0xd8, 0x38, 0xf7, 0x53, 0x12, 0x55, 0x0a, 0x72,
	0xb2, 0xf2, 0x6b, 0x81, 0xf9, 0x1f, 0x0d, 0x0a, 0x4b, 0x18, 0x89, 0x03, 0x2d, 0xe5, 0x60, 0xc7,
	0x03, 0xe2, 0xba, 0x7f, 0x69, 0x5f, 0x8f, 0xed, 0x2f, 0x8b, 0x51, 0x6e, 0x4b, 0x13, 0xc9, 0xa7,
	0x9b, 0x48, 0x02, 0x62, 0xb3, 0x89, 0xbc, 0x7d, 0x97, 0x78, 0x01, 0xfb, 0x71, 0x97, 0x50, 0xb6,
	0xbf, 0xad, 0x26, 0x71, 0x96, 0x97, 0x3f, 0xa3, 0x7e, 0xfc, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe2, 0x7c, 0x44, 0x81, 0xe3, 0x12, 0x00, 0x00,
}
