// Code generated by protoc-gen-go.
// source: transaction_value.proto
// DO NOT EDIT!

package version1_1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TransactionValue_Opcode int32

const (
	TransactionValue_NORMAL   TransactionValue_Opcode = 0
	TransactionValue_UPDATE   TransactionValue_Opcode = 1
	TransactionValue_FREEZE   TransactionValue_Opcode = 2
	TransactionValue_UNFREEZE TransactionValue_Opcode = 3
)

var TransactionValue_Opcode_name = map[int32]string{
	0: "NORMAL",
	1: "UPDATE",
	2: "FREEZE",
	3: "UNFREEZE",
}
var TransactionValue_Opcode_value = map[string]int32{
	"NORMAL":   0,
	"UPDATE":   1,
	"FREEZE":   2,
	"UNFREEZE": 3,
}

func (x TransactionValue_Opcode) String() string {
	return proto.EnumName(TransactionValue_Opcode_name, int32(x))
}
func (TransactionValue_Opcode) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0, 0} }

type TransactionValue struct {
	Price              int64                   `protobuf:"varint,1,opt,name=price" json:"price,omitempty"`
	GasLimit           int64                   `protobuf:"varint,2,opt,name=gasLimit" json:"gasLimit,omitempty"`
	Amount             int64                   `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	Payload            []byte                  `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	EncryptedAmount    []byte                  `protobuf:"bytes,5,opt,name=encryptedAmount,proto3" json:"encryptedAmount,omitempty"`
	HomomorphicAmount  []byte                  `protobuf:"bytes,6,opt,name=homomorphicAmount,proto3" json:"homomorphicAmount,omitempty"`
	HomomorphicBalance []byte                  `protobuf:"bytes,7,opt,name=homomorphicBalance,proto3" json:"homomorphicBalance,omitempty"`
	Op                 TransactionValue_Opcode `protobuf:"varint,8,opt,name=op,enum=version1_1.TransactionValue_Opcode" json:"op,omitempty"`
}

func (m *TransactionValue) Reset()                    { *m = TransactionValue{} }
func (m *TransactionValue) String() string            { return proto.CompactTextString(m) }
func (*TransactionValue) ProtoMessage()               {}
func (*TransactionValue) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *TransactionValue) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TransactionValue) GetGasLimit() int64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *TransactionValue) GetEncryptedAmount() []byte {
	if m != nil {
		return m.EncryptedAmount
	}
	return nil
}

func (m *TransactionValue) GetHomomorphicAmount() []byte {
	if m != nil {
		return m.HomomorphicAmount
	}
	return nil
}

func (m *TransactionValue) GetHomomorphicBalance() []byte {
	if m != nil {
		return m.HomomorphicBalance
	}
	return nil
}

func (m *TransactionValue) GetOp() TransactionValue_Opcode {
	if m != nil {
		return m.Op
	}
	return TransactionValue_NORMAL
}

func init() {
	proto.RegisterType((*TransactionValue)(nil), "version1_1.TransactionValue")
	proto.RegisterEnum("version1_1.TransactionValue_Opcode", TransactionValue_Opcode_name, TransactionValue_Opcode_value)
}

func init() { proto.RegisterFile("transaction_value.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4f, 0xf2, 0x40,
	0x10, 0x40, 0xbf, 0x96, 0x8f, 0x42, 0x26, 0x44, 0xeb, 0xc4, 0xe8, 0xc6, 0x13, 0xc1, 0x4b, 0x0f,
	0xa6, 0x09, 0x72, 0xf3, 0x86, 0xb1, 0x9e, 0x10, 0x4c, 0x03, 0x1e, 0xbc, 0x90, 0x75, 0xd9, 0xc8,
	0x26, 0x74, 0x67, 0xb3, 0x5d, 0x48, 0xf8, 0xd5, 0xfe, 0x05, 0xd3, 0x6d, 0x15, 0x83, 0xde, 0xe6,
	0xcd, 0x7b, 0x7b, 0x99, 0x85, 0x4b, 0x67, 0xb9, 0x2e, 0xb9, 0x70, 0x8a, 0xf4, 0x72, 0xc7, 0x37,
	0x5b, 0x99, 0x1a, 0x4b, 0x8e, 0x10, 0x76, 0xd2, 0x96, 0x8a, 0xf4, 0x70, 0x39, 0x1c, 0x7c, 0x84,
	0x10, 0xcf, 0x0f, 0xdd, 0x4b, 0x95, 0xe1, 0x39, 0xb4, 0x8d, 0x55, 0x42, 0xb2, 0xa0, 0x1f, 0x24,
	0xad, 0xbc, 0x06, 0xbc, 0x82, 0xee, 0x3b, 0x2f, 0x27, 0xaa, 0x50, 0x8e, 0x85, 0x5e, 0x7c, 0x33,
	0x5e, 0x40, 0xc4, 0x0b, 0xda, 0x6a, 0xc7, 0x5a, 0xde, 0x34, 0x84, 0x0c, 0x3a, 0x86, 0xef, 0x37,
	0xc4, 0x57, 0xec, 0x7f, 0x3f, 0x48, 0x7a, 0xf9, 0x17, 0x62, 0x02, 0xa7, 0x52, 0x0b, 0xbb, 0x37,
	0x4e, 0xae, 0xc6, 0xf5, 0xd3, 0xb6, 0x2f, 0x8e, 0xd7, 0x78, 0x03, 0x67, 0x6b, 0x2a, 0xa8, 0x20,
	0x6b, 0xd6, 0x4a, 0x34, 0x6d, 0xe4, 0xdb, 0xdf, 0x02, 0x53, 0xc0, 0x1f, 0xcb, 0x7b, 0xbe, 0xe1,
	0x5a, 0x48, 0xd6, 0xf1, 0xf9, 0x1f, 0x06, 0x47, 0x10, 0x92, 0x61, 0xdd, 0x7e, 0x90, 0x9c, 0xdc,
	0x5e, 0xa7, 0x87, 0xcb, 0xa4, 0xc7, 0x57, 0x49, 0x67, 0x46, 0xd0, 0x4a, 0xe6, 0x21, 0x99, 0xc1,
	0x1d, 0x44, 0x35, 0x21, 0x40, 0x34, 0x9d, 0xe5, 0x4f, 0xe3, 0x49, 0xfc, 0xaf, 0x9a, 0x17, 0xcf,
	0x0f, 0xe3, 0x79, 0x16, 0x07, 0xd5, 0xfc, 0x98, 0x67, 0xd9, 0x6b, 0x16, 0x87, 0xd8, 0x83, 0xee,
	0x62, 0xda, 0x50, 0xeb, 0x2d, 0xf2, 0x9f, 0x30, 0xfa, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x33, 0xc6,
	0x4c, 0x28, 0x9f, 0x01, 0x00, 0x00,
}
