// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package peermessage is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Message
	PeerAddress
*/
package peermessage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MsgType message type during data transfer
type Message_MsgType int32

const (
	Message_HELLO     Message_MsgType = 0
	Message_RESPONSE  Message_MsgType = 1
	Message_CONSUS    Message_MsgType = 2
	Message_KEEPALIVE Message_MsgType = 3
	Message_SYNCMSG   Message_MsgType = 4
	Message_PENDING   Message_MsgType = 5
)

var Message_MsgType_name = map[int32]string{
	0: "HELLO",
	1: "RESPONSE",
	2: "CONSUS",
	3: "KEEPALIVE",
	4: "SYNCMSG",
	5: "PENDING",
}
var Message_MsgType_value = map[string]int32{
	"HELLO":     0,
	"RESPONSE":  1,
	"CONSUS":    2,
	"KEEPALIVE": 3,
	"SYNCMSG":   4,
	"PENDING":   5,
}

func (x Message_MsgType) String() string {
	return proto.EnumName(Message_MsgType_name, int32(x))
}
func (Message_MsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Message struct {
	// From the message source
	From         *PeerAddress    `protobuf:"bytes,1,opt,name=From,json=from" json:"From,omitempty"`
	MessageType  Message_MsgType `protobuf:"varint,2,opt,name=MessageType,json=messageType,enum=peermessage.Message_MsgType" json:"MessageType,omitempty"`
	Payload      []byte          `protobuf:"bytes,3,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
	MsgTimeStamp int64           `protobuf:"varint,15,opt,name=MsgTimeStamp,json=msgTimeStamp" json:"MsgTimeStamp,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetFrom() *PeerAddress {
	if m != nil {
		return m.From
	}
	return nil
}

// PeerAddress the peer address
type PeerAddress struct {
	Ip   string `protobuf:"bytes,1,opt,name=Ip,json=ip" json:"Ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=Port,json=port" json:"Port,omitempty"`
}

func (m *PeerAddress) Reset()                    { *m = PeerAddress{} }
func (m *PeerAddress) String() string            { return proto.CompactTextString(m) }
func (*PeerAddress) ProtoMessage()               {}
func (*PeerAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Message)(nil), "peermessage.Message")
	proto.RegisterType((*PeerAddress)(nil), "peermessage.PeerAddress")
	proto.RegisterEnum("peermessage.Message_MsgType", Message_MsgType_name, Message_MsgType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Chat service

type ChatClient interface {
	// double arrow data tranfer
	Chat(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Chat(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/peermessage.Chat/Chat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatServer interface {
	// double arrow data tranfer
	Chat(context.Context, *Message) (*Message, error)
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peermessage.Chat/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Chat(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peermessage.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _Chat_Chat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0x4f, 0x4f, 0x32, 0x31,
	0x10, 0xc6, 0x61, 0x29, 0xec, 0xcb, 0x74, 0xe1, 0x6d, 0x26, 0x1e, 0x1a, 0xe3, 0xc1, 0xec, 0xc9,
	0x83, 0x21, 0x11, 0x3d, 0x1a, 0x13, 0x82, 0x15, 0x89, 0xb0, 0x34, 0xad, 0x7f, 0xe2, 0x71, 0x0d,
	0x15, 0x49, 0x6c, 0xb6, 0x59, 0xf6, 0xc2, 0x97, 0xf0, 0x33, 0x5b, 0xd8, 0x35, 0xae, 0x09, 0xa7,
	0x79, 0xe6, 0xe9, 0xf3, 0x6b, 0x3a, 0x53, 0xe8, 0x59, 0xb3, 0xd9, 0xa4, 0x2b, 0x33, 0x70, 0x79,
	0x56, 0x64, 0x48, 0x9d, 0x31, 0x79, 0x65, 0xc5, 0x5f, 0x01, 0x84, 0xf3, 0x52, 0xe3, 0x39, 0x90,
	0xbb, 0x3c, 0xb3, 0xbc, 0x79, 0xda, 0x3c, 0xa3, 0x43, 0x3e, 0xa8, 0xe5, 0x06, 0xd2, 0xeb, 0xd1,
	0x72, 0x99, 0xfb, 0x56, 0x91, 0x77, 0x9f, 0xc2, 0x1b, 0xa0, 0x15, 0xf8, 0xb8, 0x75, 0x86, 0x07,
	0x1e, 0xea, 0x0f, 0x4f, 0xfe, 0x40, 0xf3, 0x9f, 0xba, 0x59, 0xed, 0x32, 0x8a, 0xda, 0x5f, 0x00,
	0x39, 0x84, 0x32, 0xdd, 0x7e, 0x66, 0xe9, 0x92, 0xb7, 0x3c, 0x1b, 0xa9, 0xd0, 0x95, 0x2d, 0xc6,
	0x10, 0xed, 0x88, 0xb5, 0x35, 0xba, 0x48, 0xad, 0xe3, 0xff, 0xfd, 0x71, 0x4b, 0x45, 0xb6, 0xe6,
	0xc5, 0x2f, 0xfe, 0xd9, 0xe5, 0xad, 0xd8, 0x85, 0xf6, 0xbd, 0x98, 0xcd, 0x16, 0xac, 0x81, 0x11,
	0xfc, 0x53, 0x42, 0xcb, 0x45, 0xa2, 0x05, 0x6b, 0x22, 0x40, 0x67, 0xec, 0xe5, 0x93, 0x66, 0x01,
	0xf6, 0xa0, 0xfb, 0x20, 0x84, 0x1c, 0xcd, 0xa6, 0xcf, 0x82, 0xb5, 0x90, 0x42, 0xa8, 0x5f, 0x93,
	0xf1, 0x5c, 0x4f, 0x18, 0xd9, 0x35, 0x52, 0x24, 0xb7, 0xd3, 0x64, 0xc2, 0xda, 0xf1, 0x05, 0xd0,
	0xda, 0xac, 0xd8, 0x87, 0x60, 0xea, 0xf6, 0x1b, 0xe9, 0xaa, 0x60, 0xed, 0x10, 0x81, 0xc8, 0x2c,
	0x2f, 0xf6, 0xe3, 0xb6, 0x15, 0x71, 0x5e, 0x0f, 0xaf, 0x81, 0x8c, 0x3f, 0xd2, 0x02, 0xaf, 0xaa,
	0x7a, 0x74, 0x68, 0x09, 0xc7, 0x07, 0xdd, 0xb8, 0xf1, 0xd6, 0xd9, 0xff, 0xca, 0xe5, 0x77, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x14, 0xd8, 0x71, 0x50, 0xa6, 0x01, 0x00, 0x00,
}
