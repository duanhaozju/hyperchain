package mocks

import admittance "hyperchain/admittance"
import event "hyperchain/event"
import mock "github.com/stretchr/testify/mock"
import p2p "hyperchain/p2p"
import recovery "hyperchain/recovery"

// PeerManager is an autogenerated mock type for the PeerManager type
type PeerManager struct {
	mock.Mock
}

// BroadcastNVPPeers provides a mock function with given fields: payLoad
func (_m *PeerManager) BroadcastNVPPeers(payLoad []byte) {
	_m.Called(payLoad)
}

// BroadcastPeers provides a mock function with given fields: payLoad
func (_m *PeerManager) BroadcastPeers(payLoad []byte) {
	_m.Called(payLoad)
}

// BroadcastVPPeers provides a mock function with given fields: payLoad
func (_m *PeerManager) BroadcastVPPeers(payLoad []byte) {
	_m.Called(payLoad)
}

// ConnectToOthers provides a mock function with given fields:
func (_m *PeerManager) ConnectToOthers() {
	_m.Called()
}

// DeleteNode provides a mock function with given fields: hash
func (_m *PeerManager) DeleteNode(hash string) error {
	ret := _m.Called(hash)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPeers provides a mock function with given fields:
func (_m *PeerManager) GetAllPeers() []*p2p.Peer {
	ret := _m.Called()

	var r0 []*p2p.Peer
	if rf, ok := ret.Get(0).(func() []*p2p.Peer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*p2p.Peer)
		}
	}

	return r0
}

// GetAllPeersWithTemp provides a mock function with given fields:
func (_m *PeerManager) GetAllPeersWithTemp() []*p2p.Peer {
	ret := _m.Called()

	var r0 []*p2p.Peer
	if rf, ok := ret.Get(0).(func() []*p2p.Peer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*p2p.Peer)
		}
	}

	return r0
}

// GetLocalAddressPayload provides a mock function with given fields:
func (_m *PeerManager) GetLocalAddressPayload() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetLocalNode provides a mock function with given fields:
func (_m *PeerManager) GetLocalNode() *p2p.Node {
	ret := _m.Called()

	var r0 *p2p.Node
	if rf, ok := ret.Get(0).(func() *p2p.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*p2p.Node)
		}
	}

	return r0
}

// GetLocalNodeHash provides a mock function with given fields:
func (_m *PeerManager) GetLocalNodeHash() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetNVPPeers provides a mock function with given fields:
func (_m *PeerManager) GetNVPPeers() []*p2p.Peer {
	ret := _m.Called()

	var r0 []*p2p.Peer
	if rf, ok := ret.Get(0).(func() []*p2p.Peer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*p2p.Peer)
		}
	}

	return r0
}

// GetNodeId provides a mock function with given fields:
func (_m *PeerManager) GetNodeId() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetPeerInfo provides a mock function with given fields:
func (_m *PeerManager) GetPeerInfo() p2p.PeerInfos {
	ret := _m.Called()

	var r0 p2p.PeerInfos
	if rf, ok := ret.Get(0).(func() p2p.PeerInfos); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.PeerInfos)
		}
	}

	return r0
}

// GetRouterHashifDelete provides a mock function with given fields: hash
func (_m *PeerManager) GetRouterHashifDelete(hash string) (string, uint64) {
	ret := _m.Called(hash)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(string) uint64); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	return r0, r1
}

// GetVPPeers provides a mock function with given fields:
func (_m *PeerManager) GetVPPeers() []*p2p.Peer {
	ret := _m.Called()

	var r0 []*p2p.Peer
	if rf, ok := ret.Get(0).(func() []*p2p.Peer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*p2p.Peer)
		}
	}

	return r0
}

// SendMsgToPeers provides a mock function with given fields: payLoad, peerList, MessageType
func (_m *PeerManager) SendMsgToPeers(payLoad []byte, peerList []uint64, MessageType recovery.Message_MsgType) {
	_m.Called(payLoad, peerList, MessageType)
}

// SetPrimary provides a mock function with given fields: id
func (_m *PeerManager) SetPrimary(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: aliveChain, eventMux, cm
func (_m *PeerManager) Start(aliveChain chan int, eventMux *event.TypeMux, cm *admittance.CAManager) {
	_m.Called(aliveChain, eventMux, cm)
}

// UpdateRoutingTable provides a mock function with given fields: payLoad
func (_m *PeerManager) UpdateRoutingTable(payLoad []byte) {
	_m.Called(payLoad)
}

var _ p2p.PeerManager = (*PeerManager)(nil)
