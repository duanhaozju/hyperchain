// Automatically generated by MockGen. DO NOT EDIT!
// Source: hyperchain/p2p/network (interfaces: ChatClient,Chat_ChatClient)

package mock_network

import (
	gomock "github.com/golang/mock/gomock"
	message "hyperchain/p2p/message"
	network "hyperchain/p2p/network"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockChatClient is a mock of ChatClient interface
type MockChatClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatClientMockRecorder
}

// MockChatClientMockRecorder is the mock recorder for MockChatClient
type MockChatClientMockRecorder struct {
	mock *MockChatClient
}

// NewMockChatClient creates a new mock instance
func NewMockChatClient(ctrl *gomock.Controller) *MockChatClient {
	mock := &MockChatClient{ctrl: ctrl}
	mock.recorder = &MockChatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockChatClient) EXPECT() *MockChatClientMockRecorder {
	return _m.recorder
}

// Chat mocks base method
func (_m *MockChatClient) Chat(_param0 context.Context, _param1 ...grpc.CallOption) (network.Chat_ChatClient, error) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Chat", _s...)
	ret0, _ := ret[0].(network.Chat_ChatClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat
func (_mr *MockChatClientMockRecorder) Chat(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Chat", _s...)
}

// Greeting mocks base method
func (_m *MockChatClient) Greeting(_param0 context.Context, _param1 *message.Message, _param2 ...grpc.CallOption) (*message.Message, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Greeting", _s...)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Greeting indicates an expected call of Greeting
func (_mr *MockChatClientMockRecorder) Greeting(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Greeting", _s...)
}

// Wisper mocks base method
func (_m *MockChatClient) Wisper(_param0 context.Context, _param1 *message.Message, _param2 ...grpc.CallOption) (*message.Message, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Wisper", _s...)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wisper indicates an expected call of Wisper
func (_mr *MockChatClientMockRecorder) Wisper(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Wisper", _s...)
}

// MockChat_ChatClient is a mock of Chat_ChatClient interface
type MockChat_ChatClient struct {
	ctrl     *gomock.Controller
	recorder *MockChat_ChatClientMockRecorder
}

// MockChat_ChatClientMockRecorder is the mock recorder for MockChat_ChatClient
type MockChat_ChatClientMockRecorder struct {
	mock *MockChat_ChatClient
}

// NewMockChat_ChatClient creates a new mock instance
func NewMockChat_ChatClient(ctrl *gomock.Controller) *MockChat_ChatClient {
	mock := &MockChat_ChatClient{ctrl: ctrl}
	mock.recorder = &MockChat_ChatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockChat_ChatClient) EXPECT() *MockChat_ChatClientMockRecorder {
	return _m.recorder
}

// CloseSend mocks base method
func (_m *MockChat_ChatClient) CloseSend() error {
	ret := _m.ctrl.Call(_m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (_mr *MockChat_ChatClientMockRecorder) CloseSend() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CloseSend")
}

// Context mocks base method
func (_m *MockChat_ChatClient) Context() context.Context {
	ret := _m.ctrl.Call(_m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (_mr *MockChat_ChatClientMockRecorder) Context() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Context")
}

// Header mocks base method
func (_m *MockChat_ChatClient) Header() (metadata.MD, error) {
	ret := _m.ctrl.Call(_m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (_mr *MockChat_ChatClientMockRecorder) Header() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Header")
}

// Recv mocks base method
func (_m *MockChat_ChatClient) Recv() (*message.Message, error) {
	ret := _m.ctrl.Call(_m, "Recv")
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (_mr *MockChat_ChatClientMockRecorder) Recv() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Recv")
}

// RecvMsg mocks base method
func (_m *MockChat_ChatClient) RecvMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "RecvMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (_mr *MockChat_ChatClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RecvMsg", arg0)
}

// Send mocks base method
func (_m *MockChat_ChatClient) Send(_param0 *message.Message) error {
	ret := _m.ctrl.Call(_m, "Send", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (_mr *MockChat_ChatClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Send", arg0)
}

// SendMsg mocks base method
func (_m *MockChat_ChatClient) SendMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "SendMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (_mr *MockChat_ChatClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendMsg", arg0)
}

// Trailer mocks base method
func (_m *MockChat_ChatClient) Trailer() metadata.MD {
	ret := _m.ctrl.Call(_m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (_mr *MockChat_ChatClientMockRecorder) Trailer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Trailer")
}
