// Code generated by protoc-gen-go.
// source: communicate.proto
// DO NOT EDIT!

/*
Package net is a generated protocol buffer package.

It is generated from these files:
	communicate.proto

It has these top-level messages:
*/
package network

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import message "hyperchain/p2p/message"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chat service

type ChatClient interface {
	// dibi data tranfer
	Chat(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatClient, error)
	// Greeting doube arrow greeting message transfer
	Greeting(ctx context.Context, in *message.Message, opts ...grpc.CallOption) (*message.Message, error)
	// Wisper Transfer the the node health infomation
	Wisper(ctx context.Context, in *message.Message, opts ...grpc.CallOption) (*message.Message, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chat_serviceDesc.Streams[0], c.cc, "/net.Chat/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatChatClient{stream}
	return x, nil
}

type Chat_ChatClient interface {
	Send(*message.Message) error
	Recv() (*message.Message, error)
	grpc.ClientStream
}

type chatChatClient struct {
	grpc.ClientStream
}

func (x *chatChatClient) Send(m *message.Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatChatClient) Recv() (*message.Message, error) {
	m := new(message.Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) Greeting(ctx context.Context, in *message.Message, opts ...grpc.CallOption) (*message.Message, error) {
	out := new(message.Message)
	err := grpc.Invoke(ctx, "/net.Chat/Greeting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Wisper(ctx context.Context, in *message.Message, opts ...grpc.CallOption) (*message.Message, error) {
	out := new(message.Message)
	err := grpc.Invoke(ctx, "/net.Chat/Wisper", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatServer interface {
	// dibi data tranfer
	Chat(Chat_ChatServer) error
	// Greeting doube arrow greeting message transfer
	Greeting(context.Context, *message.Message) (*message.Message, error)
	// Wisper Transfer the the node health infomation
	Wisper(context.Context, *message.Message) (*message.Message, error)
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).Chat(&chatChatServer{stream})
}

type Chat_ChatServer interface {
	Send(*message.Message) error
	Recv() (*message.Message, error)
	grpc.ServerStream
}

type chatChatServer struct {
	grpc.ServerStream
}

func (x *chatChatServer) Send(m *message.Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatChatServer) Recv() (*message.Message, error) {
	m := new(message.Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Chat_Greeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Greeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/net.Chat/Greeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Greeting(ctx, req.(*message.Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Wisper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Wisper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/net.Chat/Wisper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Wisper(ctx, req.(*message.Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "net.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greeting",
			Handler:    _Chat_Greeting_Handler,
		},
		{
			MethodName: "Wisper",
			Handler:    _Chat_Wisper_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Chat_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "communicate.proto",
}

func init() { proto.RegisterFile("communicate.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xce, 0xcf, 0xcd,
	0x2d, 0xcd, 0xcb, 0x4c, 0x4e, 0x2c, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce,
	0x4b, 0x2d, 0x91, 0x52, 0xc9, 0xa8, 0x2c, 0x48, 0x2d, 0x4a, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x2f,
	0x30, 0x2a, 0xd0, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x85, 0xd1, 0x10, 0xa5, 0x46, 0xb3,
	0x18, 0xb9, 0x58, 0x9c, 0x33, 0x12, 0x4b, 0x84, 0x0c, 0xa0, 0xb4, 0x80, 0x1e, 0x4c, 0x81, 0x2f,
	0x84, 0x96, 0xc2, 0x10, 0x51, 0x62, 0xd0, 0x60, 0x34, 0x60, 0x14, 0x32, 0xe0, 0xe2, 0x70, 0x2f,
	0x4a, 0x4d, 0x2d, 0xc9, 0xcc, 0x4b, 0x27, 0x4e, 0x97, 0x90, 0x1e, 0x17, 0x5b, 0x78, 0x66, 0x71,
	0x41, 0x6a, 0x11, 0x71, 0xea, 0x93, 0xd8, 0xc0, 0x6e, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x89, 0xdb, 0x2e, 0xa4, 0xe3, 0x00, 0x00, 0x00,
}
