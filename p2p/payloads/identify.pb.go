// Code generated by protoc-gen-go. DO NOT EDIT.
// source: identify.proto

package payloads

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Identify struct {
	IsVP       bool   `protobuf:"varint,1,opt,name=IsVP" json:"IsVP,omitempty"`
	IsOriginal bool   `protobuf:"varint,2,opt,name=IsOriginal" json:"IsOriginal,omitempty"`
	Hostname   string `protobuf:"bytes,3,opt,name=Hostname" json:"Hostname,omitempty"`
	Namespace  string `protobuf:"bytes,4,opt,name=Namespace" json:"Namespace,omitempty"`
	Hash       string `protobuf:"bytes,5,opt,name=Hash" json:"Hash,omitempty"`
	Id         int64  `protobuf:"varint,6,opt,name=Id" json:"Id,omitempty"`
	Payload    []byte `protobuf:"bytes,7,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (m *Identify) Reset()                    { *m = Identify{} }
func (m *Identify) String() string            { return proto.CompactTextString(m) }
func (*Identify) ProtoMessage()               {}
func (*Identify) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Identify) GetIsVP() bool {
	if m != nil {
		return m.IsVP
	}
	return false
}

func (m *Identify) GetIsOriginal() bool {
	if m != nil {
		return m.IsOriginal
	}
	return false
}

func (m *Identify) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Identify) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Identify) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Identify) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Identify) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Identify)(nil), "payloads.Identify")
}

func init() { proto.RegisterFile("identify.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x4c, 0x49, 0xcd,
	0x2b, 0xc9, 0x4c, 0xab, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x28, 0x48, 0xac, 0xcc,
	0xc9, 0x4f, 0x4c, 0x29, 0x56, 0xda, 0xc6, 0xc8, 0xc5, 0xe1, 0x09, 0x95, 0x14, 0x12, 0xe2, 0x62,
	0xf1, 0x2c, 0x0e, 0x0b, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x08, 0x02, 0xb3, 0x85, 0xe4, 0xb8,
	0xb8, 0x3c, 0x8b, 0xfd, 0x8b, 0x32, 0xd3, 0x33, 0xf3, 0x12, 0x73, 0x24, 0x98, 0xc0, 0x32, 0x48,
	0x22, 0x42, 0x52, 0x5c, 0x1c, 0x1e, 0xf9, 0xc5, 0x25, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0xcc, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0x70, 0xbe, 0x90, 0x0c, 0x17, 0xa7, 0x5f, 0x62, 0x6e, 0x6a, 0x71, 0x41,
	0x62, 0x72, 0xaa, 0x04, 0x0b, 0x58, 0x12, 0x21, 0x00, 0xb2, 0xcd, 0x23, 0xb1, 0x38, 0x43, 0x82,
	0x15, 0x2c, 0x01, 0x66, 0x0b, 0xf1, 0x71, 0x31, 0x79, 0xa6, 0x48, 0xb0, 0x29, 0x30, 0x6a, 0x30,
	0x07, 0x31, 0x79, 0xa6, 0x08, 0x49, 0x70, 0xb1, 0x07, 0x40, 0x9c, 0x2a, 0xc1, 0xae, 0xc0, 0xa8,
	0xc1, 0x13, 0x04, 0xe3, 0x26, 0xb1, 0x81, 0x7d, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x6e,
	0xc8, 0x40, 0xc9, 0xdb, 0x00, 0x00, 0x00,
}
