// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package peermessage is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Message
	Routers
	PeerAddress
	Signature
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MsgType message type during data transfer
type Message_MsgType int32

const (
	Message_HELLO                  Message_MsgType = 0
	Message_HELLO_RESPONSE         Message_MsgType = 1
	Message_HELLOREVERSE           Message_MsgType = 2
	Message_HELLOREVERSE_RESPONSE  Message_MsgType = 3
	Message_INTRODUCE              Message_MsgType = 4
	Message_INTRODUCE_RESPONSE     Message_MsgType = 5
	Message_ATTEND                 Message_MsgType = 6
	Message_ATTEND_RESPONSE        Message_MsgType = 7
	Message_ATTEND_NOTIFY          Message_MsgType = 8
	Message_ATTEND_NOTIFY_RESPONSE Message_MsgType = 9
	Message_RESPONSE               Message_MsgType = 10
	Message_KEEPALIVE              Message_MsgType = 11
	Message_PENDING                Message_MsgType = 12
	Message_RECONNECT              Message_MsgType = 13
	Message_RECONNECT_RESPONSE     Message_MsgType = 14
	Message_SESSION                Message_MsgType = 15
)

var Message_MsgType_name = map[int32]string{
	0:  "HELLO",
	1:  "HELLO_RESPONSE",
	2:  "HELLOREVERSE",
	3:  "HELLOREVERSE_RESPONSE",
	4:  "INTRODUCE",
	5:  "INTRODUCE_RESPONSE",
	6:  "ATTEND",
	7:  "ATTEND_RESPONSE",
	8:  "ATTEND_NOTIFY",
	9:  "ATTEND_NOTIFY_RESPONSE",
	10: "RESPONSE",
	11: "KEEPALIVE",
	12: "PENDING",
	13: "RECONNECT",
	14: "RECONNECT_RESPONSE",
	15: "SESSION",
}
var Message_MsgType_value = map[string]int32{
	"HELLO":                  0,
	"HELLO_RESPONSE":         1,
	"HELLOREVERSE":           2,
	"HELLOREVERSE_RESPONSE":  3,
	"INTRODUCE":              4,
	"INTRODUCE_RESPONSE":     5,
	"ATTEND":                 6,
	"ATTEND_RESPONSE":        7,
	"ATTEND_NOTIFY":          8,
	"ATTEND_NOTIFY_RESPONSE": 9,
	"RESPONSE":               10,
	"KEEPALIVE":              11,
	"PENDING":                12,
	"RECONNECT":              13,
	"RECONNECT_RESPONSE":     14,
	"SESSION":                15,
}

func (x Message_MsgType) String() string {
	return proto.EnumName(Message_MsgType_name, int32(x))
}
func (Message_MsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Message struct {
	// From the message source
	From         *PeerAddress    `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	MessageType  Message_MsgType `protobuf:"varint,2,opt,name=MessageType,enum=peermessage.Message_MsgType" json:"MessageType,omitempty"`
	Payload      []byte          `protobuf:"bytes,3,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Signature    *Signature      `protobuf:"bytes,4,opt,name=Signature" json:"Signature,omitempty"`
	MsgTimeStamp int64           `protobuf:"varint,5,opt,name=MsgTimeStamp" json:"MsgTimeStamp,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetFrom() *PeerAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Message) GetMessageType() Message_MsgType {
	if m != nil {
		return m.MessageType
	}
	return Message_HELLO
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Message) GetMsgTimeStamp() int64 {
	if m != nil {
		return m.MsgTimeStamp
	}
	return 0
}

// Routers table this is the router table which for transfer
type Routers struct {
	Routers []*PeerAddress `protobuf:"bytes,1,rep,name=routers" json:"routers,omitempty"`
}

func (m *Routers) Reset()                    { *m = Routers{} }
func (m *Routers) String() string            { return proto.CompactTextString(m) }
func (*Routers) ProtoMessage()               {}
func (*Routers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Routers) GetRouters() []*PeerAddress {
	if m != nil {
		return m.Routers
	}
	return nil
}

// PeerAddress the peer address
type PeerAddress struct {
	IP        string `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
	Port      int32  `protobuf:"varint,2,opt,name=Port" json:"Port,omitempty"`
	RPCPort   int32  `protobuf:"varint,3,opt,name=RPCPort" json:"RPCPort,omitempty"`
	Hash      string `protobuf:"bytes,4,opt,name=Hash" json:"Hash,omitempty"`
	ID        int32  `protobuf:"varint,5,opt,name=ID" json:"ID,omitempty"`
	IsPrimary bool   `protobuf:"varint,6,opt,name=IsPrimary" json:"IsPrimary,omitempty"`
}

func (m *PeerAddress) Reset()                    { *m = PeerAddress{} }
func (m *PeerAddress) String() string            { return proto.CompactTextString(m) }
func (*PeerAddress) ProtoMessage()               {}
func (*PeerAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PeerAddress) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *PeerAddress) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PeerAddress) GetRPCPort() int32 {
	if m != nil {
		return m.RPCPort
	}
	return 0
}

func (m *PeerAddress) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *PeerAddress) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PeerAddress) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

type Signature struct {
	ECert     []byte `protobuf:"bytes,1,opt,name=ECert,proto3" json:"ECert,omitempty"`
	RCert     []byte `protobuf:"bytes,2,opt,name=RCert,proto3" json:"RCert,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Signature) GetECert() []byte {
	if m != nil {
		return m.ECert
	}
	return nil
}

func (m *Signature) GetRCert() []byte {
	if m != nil {
		return m.RCert
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "peermessage.Message")
	proto.RegisterType((*Routers)(nil), "peermessage.Routers")
	proto.RegisterType((*PeerAddress)(nil), "peermessage.PeerAddress")
	proto.RegisterType((*Signature)(nil), "peermessage.Signature")
	proto.RegisterEnum("peermessage.Message_MsgType", Message_MsgType_name, Message_MsgType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chat service

type ChatClient interface {
	// double arrow data tranfer
	Chat(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Chat(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/peermessage.Chat/Chat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatServer interface {
	// double arrow data tranfer
	Chat(context.Context, *Message) (*Message, error)
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peermessage.Chat/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Chat(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peermessage.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _Chat_Chat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x93, 0xc1, 0x6e, 0x9b, 0x4e,
	0x10, 0xc6, 0x03, 0x06, 0x63, 0x06, 0xec, 0xec, 0x7f, 0xfe, 0xa9, 0x45, 0xa3, 0x1c, 0x10, 0x27,
	0x1f, 0x2a, 0x1f, 0xdc, 0x1c, 0xdb, 0x4a, 0x16, 0xde, 0x34, 0xa8, 0x0e, 0xa0, 0x85, 0x44, 0xea,
	0xa9, 0xa2, 0xf2, 0xca, 0xb1, 0x54, 0x17, 0x6b, 0x21, 0x07, 0x3f, 0x44, 0xef, 0x7d, 0x86, 0x3e,
	0x65, 0xb5, 0x8b, 0x6d, 0xb0, 0x14, 0xf5, 0xb4, 0xf3, 0xfd, 0xf6, 0x9b, 0x61, 0x24, 0xbe, 0x85,
	0xe1, 0x96, 0x57, 0x55, 0xb1, 0xe6, 0xd3, 0x9d, 0x28, 0xeb, 0x12, 0x9d, 0x1d, 0xe7, 0xe2, 0x80,
	0x82, 0xdf, 0x06, 0x58, 0x0f, 0x4d, 0x8d, 0xef, 0xc0, 0xb8, 0x13, 0xe5, 0xd6, 0xd3, 0x7c, 0x6d,
	0xe2, 0xcc, 0xbc, 0x69, 0xc7, 0x37, 0x4d, 0x39, 0x17, 0xf3, 0xd5, 0x4a, 0xf0, 0xaa, 0x62, 0xca,
	0x85, 0x9f, 0xc0, 0x39, 0x34, 0xe6, 0xfb, 0x1d, 0xf7, 0x74, 0x5f, 0x9b, 0x8c, 0x66, 0x37, 0x67,
	0x4d, 0x0f, 0xc7, 0xb3, 0x5a, 0x4b, 0x0f, 0xeb, 0x36, 0xa0, 0x07, 0x56, 0x5a, 0xec, 0x7f, 0x94,
	0xc5, 0xca, 0xeb, 0xf9, 0xda, 0xc4, 0x65, 0x47, 0x89, 0xb7, 0x60, 0x67, 0x9b, 0xf5, 0xcf, 0xa2,
	0x7e, 0x11, 0xdc, 0x33, 0xd4, 0x32, 0xe3, 0xb3, 0xb9, 0xa7, 0x5b, 0xd6, 0x1a, 0x31, 0x00, 0x57,
	0x7e, 0x67, 0xb3, 0xe5, 0x59, 0x5d, 0x6c, 0x77, 0x9e, 0xe9, 0x6b, 0x93, 0x1e, 0x3b, 0x63, 0xc1,
	0x1f, 0x1d, 0xac, 0xc3, 0x32, 0x68, 0x83, 0x79, 0x4f, 0x97, 0xcb, 0x84, 0x5c, 0x20, 0xc2, 0x48,
	0x95, 0xdf, 0x18, 0xcd, 0xd2, 0x24, 0xce, 0x28, 0xd1, 0x90, 0x80, 0xab, 0x18, 0xa3, 0x4f, 0x94,
	0x65, 0x94, 0xe8, 0xf8, 0x16, 0xde, 0x74, 0x49, 0x6b, 0xee, 0xe1, 0x10, 0xec, 0x28, 0xce, 0x59,
	0xb2, 0x78, 0x0c, 0x29, 0x31, 0x70, 0x0c, 0x78, 0x92, 0xad, 0xcd, 0x44, 0x80, 0xfe, 0x3c, 0xcf,
	0x69, 0xbc, 0x20, 0x7d, 0xfc, 0x1f, 0x2e, 0x9b, 0xba, 0x35, 0x58, 0xf8, 0x1f, 0x0c, 0x0f, 0x30,
	0x4e, 0xf2, 0xe8, 0xee, 0x2b, 0x19, 0xe0, 0x35, 0x8c, 0xcf, 0x50, 0x6b, 0xb7, 0xd1, 0x85, 0xc1,
	0x49, 0x81, 0x5c, 0xe2, 0x0b, 0xa5, 0xe9, 0x7c, 0x19, 0x3d, 0x51, 0xe2, 0xa0, 0x03, 0x56, 0x4a,
	0xe3, 0x45, 0x14, 0x7f, 0x26, 0xae, 0xbc, 0x63, 0x34, 0x4c, 0xe2, 0x98, 0x86, 0x39, 0x19, 0xca,
	0x05, 0x4f, 0xb2, 0x1d, 0x38, 0x92, 0x3d, 0x19, 0xcd, 0xb2, 0x28, 0x89, 0xc9, 0x65, 0xf0, 0x11,
	0x2c, 0x56, 0xbe, 0xd4, 0x5c, 0x54, 0x38, 0x03, 0x4b, 0x34, 0xa5, 0xa7, 0xf9, 0xbd, 0x7f, 0x86,
	0xe3, 0x68, 0x0c, 0x7e, 0x69, 0xe0, 0x74, 0x2e, 0x70, 0x04, 0x7a, 0x94, 0xaa, 0x6c, 0xd9, 0x4c,
	0x8f, 0x52, 0x44, 0x30, 0xd2, 0x52, 0xd4, 0x2a, 0x38, 0x26, 0x53, 0xb5, 0xcc, 0x04, 0x4b, 0x43,
	0x85, 0x7b, 0x0a, 0x1f, 0xa5, 0x74, 0xdf, 0x17, 0xd5, 0xb3, 0x8a, 0x83, 0xcd, 0x54, 0xad, 0x26,
	0x2e, 0xd4, 0x7f, 0x36, 0x99, 0x1e, 0x2d, 0xf0, 0x06, 0xec, 0xa8, 0x4a, 0xc5, 0x66, 0x5b, 0x88,
	0xbd, 0xd7, 0xf7, 0xb5, 0xc9, 0x80, 0xb5, 0x20, 0x78, 0xec, 0xa4, 0x0a, 0xaf, 0xc0, 0xa4, 0x21,
	0x17, 0xb5, 0xda, 0xc7, 0x65, 0x8d, 0x90, 0x94, 0x29, 0xaa, 0x37, 0x54, 0x09, 0x39, 0xb6, 0x8d,
	0x63, 0x13, 0xd5, 0x16, 0xcc, 0x3e, 0x80, 0x11, 0x3e, 0x17, 0x35, 0xde, 0x1e, 0xce, 0xab, 0xd7,
	0x5e, 0xc0, 0xf5, 0xab, 0x34, 0xb8, 0xf8, 0xde, 0x57, 0x4f, 0xf2, 0xfd, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xd0, 0x95, 0x10, 0x74, 0xa3, 0x03, 0x00, 0x00,
}
