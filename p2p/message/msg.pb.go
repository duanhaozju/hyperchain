// Code generated by protoc-gen-go.
// source: msg.proto
// DO NOT EDIT!

package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hts "hyperchain/p2p/hts"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Message struct {
	MessageType MsgType          `protobuf:"varint,1,opt,name=MessageType,enum=message.MsgType" json:"MessageType,omitempty"`
	From        *Endpoint        `protobuf:"bytes,2,opt,name=From" json:"From,omitempty"`
	Payload     []byte           `protobuf:"bytes,3,opt,name=Payload,proto3" json:"Payload,omitempty"`
	TimeStamp   int64            `protobuf:"varint,4,opt,name=TimeStamp" json:"TimeStamp,omitempty"`
	Cert        *hts.Certificate `protobuf:"bytes,5,opt,name=Cert" json:"Cert,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Message) GetMessageType() MsgType {
	if m != nil {
		return m.MessageType
	}
	return MsgType_HELLO
}

func (m *Message) GetFrom() *Endpoint {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *Message) GetCert() *hts.Certificate {
	if m != nil {
		return m.Cert
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "message.Message")
}

func init() { proto.RegisterFile("msg.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x8f, 0x51, 0x4b, 0xc3, 0x30,
	0x14, 0x85, 0x89, 0xab, 0x96, 0x65, 0x32, 0x66, 0x9e, 0xc2, 0xf0, 0xa1, 0xc8, 0x84, 0x3e, 0xa5,
	0x50, 0x7f, 0xc2, 0xd0, 0xb7, 0x81, 0xc4, 0xbd, 0x4b, 0xec, 0xae, 0x6d, 0xc0, 0x34, 0x97, 0xe4,
	0xbe, 0xf4, 0xef, 0xf9, 0xcb, 0xc4, 0x2c, 0xb3, 0xbe, 0xdd, 0x7b, 0xce, 0xc7, 0x39, 0x1c, 0xbe,
	0x74, 0xb1, 0x57, 0x18, 0x3c, 0x79, 0x51, 0x3a, 0x88, 0xd1, 0xf4, 0xb0, 0xdd, 0x0d, 0x13, 0x42,
	0xe8, 0x06, 0x63, 0xc7, 0x06, 0x5b, 0x6c, 0x06, 0x8a, 0x4d, 0x07, 0x81, 0xec, 0xa7, 0xed, 0x0c,
	0xc1, 0x19, 0xdf, 0xae, 0x61, 0x3c, 0xa1, 0xb7, 0x23, 0x5d, 0x7e, 0x17, 0xfb, 0x77, 0x9a, 0x30,
	0xfb, 0x0f, 0xdf, 0x8c, 0x97, 0x87, 0x73, 0xa2, 0x68, 0xf9, 0x2a, 0x9f, 0xc7, 0x09, 0x41, 0xb2,
	0x8a, 0xd5, 0xeb, 0x76, 0xa3, 0x72, 0xa1, 0x3a, 0xc4, 0xfe, 0x57, 0xd7, 0xff, 0x21, 0xf1, 0xc8,
	0x8b, 0x97, 0xe0, 0x9d, 0xbc, 0xaa, 0x58, 0xbd, 0x6a, 0xef, 0xfe, 0xe0, 0xe7, 0x5c, 0xab, 0x93,
	0x2d, 0x24, 0x2f, 0x5f, 0xcd, 0xf4, 0xe5, 0xcd, 0x49, 0x2e, 0x2a, 0x56, 0xdf, 0xea, 0xcb, 0x2b,
	0xee, 0xf9, 0xf2, 0x68, 0x1d, 0xbc, 0x91, 0x71, 0x28, 0x8b, 0x8a, 0xd5, 0x0b, 0x3d, 0x0b, 0x62,
	0xc7, 0x8b, 0x3d, 0x04, 0x92, 0xd7, 0x29, 0x7e, 0xa3, 0x06, 0x8a, 0x6a, 0x3f, 0x8f, 0xd4, 0xc9,
	0xfd, 0xb8, 0x49, 0x5b, 0x9e, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x4a, 0xac, 0x69, 0x27,
	0x01, 0x00, 0x00,
}
