/**
 * Created by sammy on 16-9-15.
 */


angular
    .module('starter')
    .constant('ENV',{
        "API": "http://localhost:8081",
        "PATTERN": [
            {name: "pattern0", value: 'contract User{ uint public age; bytes32 public name; address public addr; function User(uint _age,bytes32 _name,address _addr){ age = _age; name = _name; addr = _addr; } } contract SimulateBank{ address[] userAddrs; function createUser(uint _age,bytes32 _name,address _addr){ User user = new User(_age,_name,_addr); userAddrs.push(user); } function getUserAddrs(uint id) returns(address){ return userAddrs[id]; } function getUserInfo(uint id) returns(uint,bytes32,address){ User user = User(userAddrs[id]); return (user.age(),user.name(),user.addr()); } }'},
            {name: "pattern1", value: 'contract User{ uint age; bytes32 name; address addr; function User(uint _age,bytes32 _name,address _addr){ age = _age; name = _name; addr = _addr; } function getUserInfo() returns(uint,bytes32,address){ return (age,name,addr); } } contract SimulateBank{ address[] userAddrs; function createUser(uint _age,bytes32 _name,address _addr){ User user = new User(_age,_name,_addr); } }'},
            {name: "pattern2", value: "contract SimulateBank{" +
            "address owner;" +
            "mapping(address => uint) public accounts;" +
            "function SimulateBank(){" +
            "owner = msg.sender;" +
            "}" +
            "function issue(address addr,uint number) returns (bool){" +
            "if(msg.sender==owner){" +
            "accounts[addr] = accounts[addr] + number;" +
            "return true;" +
            "}" +
            "return false;" +
            "}" +
            "function transfer(address addr1,address addr2,uint32 amount) returns (bool){" +
            "if(accounts[addr1] >= amount){" +
            "accounts[addr1] = accounts[addr1] - amount;" +
            "accounts[addr2] = accounts[addr2] + amount;" +
            "return true;" +
            "}" +
            "return false;" +
            "}" +
            "function getAccountBalance(address addr) returns(uint){" +
            "return accounts[addr];" +
            "}}"},
            {name:"simple", value: 'contract simple{ int32 public aa;  int32 public bb;    function simple(int32 a,int32 b){aa = aa + a; bb = bb + b;} }'},
            {name: "pattern3", value: 'contract DraftStructs{      struct DraftInfo{         address  applicantConAddr;         address operatorConAddr;         bytes32 draftNum;         Draft.SignType signType;         uint16 currencyType;         uint faceValue;         uint signTime;         uint cashTime;         uint validDays;         uint frozenDays;         uint autoCashDays;     }     DraftInfo draftInfo;      function draftInfoMap(address draftAddr){       Draft draft=Draft(draftAddr);        var (applicantConAddr,operatorConAddr,draftNum,signType,currencyType,faceValue,signTime,cashTime,validDays,frozenDays,autoCashDays)=draft.getDraftInfo();        draftInfo.applicantConAddr=applicantConAddr;        draftInfo.operatorConAddr=operatorConAddr;        draftInfo.draftNum=draftNum;        draftInfo.signType=signType;        draftInfo.currencyType=currencyType;        draftInfo.faceValue=faceValue;        draftInfo.signTime=signTime;        draftInfo.cashTime=cashTime;        draftInfo.validDays=validDays;        draftInfo.frozenDays=frozenDays;        draftInfo.autoCashDays=autoCashDays;      } }  contract BasicOperations{      function deleteAddr(address[] storage a,address draftAddr)internal{        uint position;        for(uint i=0;i<a.length;i++){            if(a[i]==draftAddr){               position=i;               break;            }            position++;        }        if(position!=a.length){            a[position]=a[a.length-1];            a.length=a.length-1;        }     }      function copyOperationAddr(address draftAddr,address newDraftAddr,address operation){         Draft oldDraft=Draft(draftAddr);         Draft newDraft=Draft(newDraftAddr);         uint length=oldDraft.getOperationsLen();         for(uint i=0;i<length;i++){            address temp=oldDraft.getOperationAddr(i);            newDraft.addDraftOperation(temp);         }         oldDraft.addDraftOperation(operation);         newDraft.addDraftOperation(operation);     } }  contract CashOperation is BasicOperations,DraftStructs{    address[] signedDraftAddrs;    address[] cashOperationAddrs;     function createDraftAndOperation(bytes32 newDraftNum,bytes32 sequenceNum,address draftAddr,uint value,address fromConAddr,address toConAddr,uint operation1Time)returns(address,address){       address newDraftAddr=new Draft(newDraftNum,draftInfo.signType,Draft.DraftState.Cashing,draftInfo.validDays,draftInfo.frozenDays,draftInfo.autoCashDays,draftInfo.signTime,value,draftInfo.applicantConAddr,draftInfo.operatorConAddr,draftInfo.currencyType);       address draftOperation = createOperation(sequenceNum, draftAddr,newDraftAddr, value, fromConAddr, toConAddr, operation1Time);       return (newDraftAddr,draftOperation);    }     function createOperation(bytes32 sequenceNum,address draftAddr,address newDraftAddr,uint value,address fromConAddr,address toConAddr,uint operation1Time)returns(address){       DraftOperation draftOperation=new DraftOperation(sequenceNum,fromConAddr,"",toConAddr,"",draftAddr,newDraftAddr,value,operation1Time,DraftOperation.OperationType.Cash);       draftOperation.setTxState(DraftOperation.TxState.ToCharge);       cashOperationAddrs.push(draftOperation);       return draftOperation;    }     function cash(bytes32 newDraftNum,address draftAddr,uint value,address bankConAddr,bytes32 sequenceNum,uint operation1Time)returns(address,address){      Draft draft=Draft(draftAddr);      draftInfoMap(draftAddr);      if(draftInfo.faceValue<value){         throw;      }else if(draftInfo.faceValue==value){         draft.setState(Draft.DraftState.Cashing);         address draftOperation=createOperation(sequenceNum,draftAddr,draftAddr,value,draftInfo.operatorConAddr,bankConAddr,operation1Time);         return (draftAddr,draftOperation);      }else{         draft.subFaceValue(value);         return createDraftAndOperation(newDraftNum,sequenceNum,draftAddr,value,draftInfo.operatorConAddr,bankConAddr,operation1Time);      }   }    function cashSuccess(address draftAddr,address newDraftAddr,address bankConAddr,bytes32 sequenceNum,address fromConAddr,uint operation3Time,address draftOperationAddr) {      Draft newDraft=Draft(newDraftAddr);      newDraft.changeOwner(bankConAddr,bankConAddr);      newDraft.setState(Draft.DraftState.Cashed);       DraftOperation draftOperation = DraftOperation(draftOperationAddr);      draftOperation.setOperation3Time(operation3Time);      draftOperation.setTxState(DraftOperation.TxState.Success);       if(draftAddr!=newDraftAddr){          copyOperationAddr(draftAddr,newDraftAddr,draftOperation);      }else{          deleteAddr(signedDraftAddrs,newDraftAddr);      }   }    function cashFail(address oldDraftAddr,address newDraftAddr,address draftOperationAddr,uint operation3Time){     Draft oldDraft=Draft(oldDraftAddr);     if(oldDraftAddr==newDraftAddr){         oldDraft.setState(Draft.DraftState.Signed);     }else{         Draft newDraft=Draft(newDraftAddr);         uint faceValue=newDraft.getFaceValue();         oldDraft.addFaceValue(faceValue);         newDraft.destroyDraft();     }      DraftOperation draftOperation = DraftOperation(draftOperationAddr);     draftOperation.setOperation3Time(operation3Time);     draftOperation.setTxState(DraftOperation.TxState.ChargeFail);   }    function addSignedDraft(address signedDraftAddr){       signedDraftAddrs.push(signedDraftAddr);   }    function deleteSignedDraft(address signedDraftAddr){       deleteAddr(signedDraftAddrs,signedDraftAddr);   } }  contract Draft{   enum SignType{PayAtSight,PayAtFixedDate}   SignType signType;   enum DraftState{Saved,UnIssue,IssueNotSigned,Issuing,Signed,TransferNotSigned,Cashing,Cashed,Invalid}   DraftState public draftState;   bytes32 draftNum;   bytes32 public acceptBankName;   bytes32 public acceptBankNum;   address applicantConAddr;   address operatorConAddr;   uint16 currencyType;   uint faceValue;   uint signTime;   uint signedTime;   uint cashTime;   uint validDays=60;   uint frozenDays=0;   uint autoCashDays=360;   address[] draftOperationAddrs;    modifier isFreezen(){      if(signType==SignType.PayAtFixedDate){         if(frozenDays>0){               throw;         }      }      _;   }    modifier onlyApplicant(){       if(msg.sender!=applicantConAddr)throw;       _;   }    modifier onlyOperator(){       if(msg.sender!=operatorConAddr)throw;       _;   }    modifier applicantOrOperator(){       if(msg.sender!=applicantConAddr && msg.sender!=operatorConAddr) throw;       _;   }    function Draft(bytes32 _draftNum,SignType _signType,DraftState _draftState,uint _validDays,uint _frozenDays,uint _autoCashedDays,uint _signTime,uint _faceValue,address _applicanConAddr,address _operatorConAddr,uint16 _currencyType){       draftNum=_draftNum;       signType=_signType;       draftState=_draftState;       validDays=_validDays;       frozenDays=_frozenDays;       autoCashDays= _autoCashedDays;       signTime=_signTime;       faceValue=_faceValue;       applicantConAddr=_applicanConAddr;       operatorConAddr=_operatorConAddr;       currencyType=_currencyType;   }    function updateAllDays(){     if(validDays>0){       validDays=validDays-1;       if(validDays<=0){          if(draftState==DraftState.UnIssue){           selfdestruct(operatorConAddr);          }       }     }     if(frozenDays>0){         frozenDays=frozenDays-1;     }     if(autoCashDays>0){         autoCashDays=autoCashDays-1;     }   }    function changeOwner(address _applicantConAddr,address _operatorConAddr){       applicantConAddr=_applicantConAddr;       operatorConAddr=_operatorConAddr;   }    function subFaceValue(uint value) {      if(faceValue<value){         throw;      }else{         faceValue=faceValue-value;      }   }    function addFaceValue(uint value){      faceValue=faceValue+value;   }    function destroyDraft(){       draftState=DraftState.Invalid;   }    function addDraftOperation(address draftOperationAddr){       draftOperationAddrs.push(draftOperationAddr);   }      function getFaceValue() constant returns(uint){         return faceValue;     }      function getDraftInfo()constant returns(address,address,bytes32,Draft.SignType,uint16,uint,uint,uint,uint,uint,uint){        return (applicantConAddr,operatorConAddr,draftNum,signType,currencyType,faceValue,signTime,cashTime,validDays,frozenDays,autoCashDays);     }      function getOperatorConAddr() constant returns(address){        return operatorConAddr;     }      function setOperatorConAddr(address _operatorConAddr){         operatorConAddr=_operatorConAddr;     }      function getOperationsLen() constant returns(uint){       return draftOperationAddrs.length;     }      function getOperationAddr(uint i) constant returns(address){       return draftOperationAddrs[i];     }    function setSignedTime(uint _signedTime) {       signedTime=_signedTime;   }     function setState(DraftState _state) {      draftState=_state;   }    function setAcceptBankInfo(bytes32 _acceptBankName,bytes32 _acceptBankNum){      acceptBankName=_acceptBankName;      acceptBankNum=_acceptBankNum;   }    function getAcceptBankInfo()returns(bytes32,bytes32){      return (acceptBankName,acceptBankNum);   } }  contract DraftOperation{     bytes32 public sequenceNum;     address public fromConAddr;     bytes32 public fromId;     address public toConAddr;     bytes32 public toId;     address public draftAddr;     address public newDraftAddr;     uint public value;     uint public operation1Time;     uint public operation2Time;     uint public operation3Time;     enum OperationType{Sign,Issue,Transfer,Cash}     OperationType public operationType;     enum TxState{Success,ToSignature,ToCharge,SignatureFail,ChargeFail}     TxState public txState = TxState.ToSignature;      function DraftOperation(bytes32 _sequenceNum,address _fromConAddr,bytes32 _fromId,address _toConAddr,bytes32 _toId,address _draftAddr,address _newDraftAddr,uint _value,uint _operation1Time,OperationType _operationType){         sequenceNum=_sequenceNum;         fromConAddr=_fromConAddr;         fromId=_fromId;         toConAddr=_toConAddr;         toId=_toId;         draftAddr=_draftAddr;         newDraftAddr=_newDraftAddr;         value=_value;         operation1Time=_operation1Time;         operationType=_operationType;     }      function getOperationInfo()constant returns(bytes32,address,bytes32,address,bytes32,address,address,uint,uint,uint,uint,OperationType) {         return (sequenceNum,fromConAddr,fromId,toConAddr,toId,draftAddr,newDraftAddr,value,operation1Time,operation2Time,operation3Time,operationType);     }      function setOperation1Time(uint operationTime){         operation1Time = operationTime;     }     function setOperation2Time(uint operationTime){         operation2Time = operationTime;     }     function setOperation3Time(uint operationTime){         operation3Time = operationTime;     }      function setTxState(TxState _txState){         txState = _txState;     }      function getOperationType()constant returns(OperationType){         return operationType;     } }  contract UserInfo{   bytes32 id;   bytes32 companyName;   bytes32 userName;   bytes32 phoneNum;   bytes32 idNum;      function UserInfo(bytes32 _id,bytes32 _companyName,bytes32 _userName,bytes32 _phoneNum,bytes32 _idNum){        id=_id;        companyName=_companyName;        userName=_userName;        phoneNum=_phoneNum;        idNum=_idNum;     }      function getUserInfo()constant returns(bytes32,bytes32,bytes32,bytes32,bytes32){        return (id,companyName,userName,phoneNum,idNum);     } }  contract Individual is CashOperation{     uint16 bankNum;    address owner;    address userInfo;     address[] toSignatureDraftAddrs;     address[] issueOperationAddrs;    address[] signedOperationAddrs;    address[] transferOperationAddrs;     bytes32 tempAcceptBankName;    bytes32 tempAcceptBankNum;     modifier onlyOwner(){       if(msg.sender!=owner)throw;       _;    }     function Individual(uint16 _bankNum,bytes32 id,bytes32 phoneNum,bytes32 userName,bytes32 idNum){       owner=msg.sender;       bankNum=_bankNum;       userInfo=new UserInfo(id,"",userName,phoneNum,idNum);    }      function issue(bytes32 draftNum,Draft.SignType signType,uint value,uint frozenDays,uint signTime,address individualConAddr,uint16 currencyType,bytes32 acceptBankName,bytes32 acceptBankNum)returns(address){        Draft draft=new Draft(draftNum,signType,Draft.DraftState.Issuing,0,frozenDays,360,signTime,value,individualConAddr,individualConAddr,currencyType);        draft.setAcceptBankInfo(acceptBankName,acceptBankNum);        return draft;    }      function issueSuccess(address draftAddr,address toAppConAddr,bytes32 sequenceNum,address fromConAddr,address toConAddr,uint operationTime) returns(address){       Draft draft=Draft(draftAddr);       uint value=draft.getFaceValue();       DraftOperation draftOperation=new DraftOperation(sequenceNum,fromConAddr,"",toConAddr,"",draftAddr,draftAddr,value,operationTime,DraftOperation.OperationType.Issue);        draft.setState(Draft.DraftState.Signed);       draft.addDraftOperation(draftOperation);       draft.changeOwner(toAppConAddr,toConAddr);        issueOperationAddrs.push(draftOperation);        receiverSignedDraft(toAppConAddr,toConAddr,draftAddr,draftOperation);       return draftOperation;    }     function issueFail(address draftAddr){       Draft draft=Draft(draftAddr);       draft.destroyDraft();    }     function transfer(bytes32 newDraftNum,bytes32 acceptBankName,bytes32 acceptBankNum,address draftAddr,uint value,address toAppConAddr,bytes32 sequenceNum,address fromConAddr,address toConAddr,uint operationTime) returns(address,address){       tempAcceptBankNum = acceptBankNum;       tempAcceptBankName = acceptBankName;       address newDraftAddr=createNewDraft(newDraftNum,draftAddr,value,toAppConAddr,toConAddr);       address newDraftOperation = createTransferOperation(sequenceNum,fromConAddr,toConAddr,draftAddr,newDraftAddr,value,operationTime);       receiverSignedDraft(toAppConAddr,toConAddr,newDraftAddr,newDraftOperation);       return (newDraftAddr, newDraftOperation);    }     function receiverSignedDraft(address toAppConAddr,address toOperatorAddr,address newDraft,address newDraftOperation){        if(toAppConAddr==toOperatorAddr){            Individual individual=Individual(toOperatorAddr);            individual.signedDraftFromIndividual(newDraft,newDraftOperation);        }else{            Operator operator=Operator(toOperatorAddr);            operator.signedDraft(newDraft,newDraftOperation);       }    }     function createTransferOperation(bytes32 sequenceNum,address fromConAddr,address toConAddr,address draftAddr,address newDraftAddr,uint value,uint operationTime)internal returns(address){         DraftOperation draftOperation=new DraftOperation(sequenceNum,fromConAddr,"",toConAddr,"",draftAddr,newDraftAddr,value,operationTime,DraftOperation.OperationType.Transfer);         transferOperationAddrs.push(draftOperation);         if(draftAddr!=newDraftAddr){             copyOperationAddr(draftAddr,newDraftAddr,draftOperation);         }           return draftOperation;    }     function createNewDraft(bytes32 newDraftNum,address draftAddr,uint value,address toAppConAddr,address toOperatorAddr)internal returns(address){        Draft draft=Draft(draftAddr);        uint faceValue=draft.getFaceValue();        if(faceValue<value){          throw;        }         if(faceValue==value){           draft.changeOwner(toAppConAddr,toOperatorAddr);           deleteAddr(signedDraftAddrs,draftAddr);           draft.setAcceptBankInfo(tempAcceptBankName,tempAcceptBankNum);           tempAcceptBankName = "";           tempAcceptBankNum = "";           return draftAddr;        }else{           draftInfoMap(draftAddr);           Draft newDraft=new Draft(newDraftNum,draftInfo.signType,Draft.DraftState.Signed,draftInfo.validDays,draftInfo.frozenDays,draftInfo.autoCashDays,draftInfo.signTime,value,toAppConAddr,toOperatorAddr,draftInfo.currencyType);           draft.subFaceValue(value);           newDraft.setAcceptBankInfo(tempAcceptBankName,tempAcceptBankNum);           tempAcceptBankName = "";           tempAcceptBankNum = "";           return newDraft;       }     }    function signedDraftFromIndividual(address newDraftAddr,address draftOperationAddr){       signedOperationAddrs.push(draftOperationAddr);       signedDraftAddrs.push(newDraftAddr);   }    function signedDraftFromOperator(address draftAddr,address draftOperationAddr,DraftOperation.OperationType operationType){       deleteToSignatureDraft(draftAddr);       signedOperationAddrs.push(draftOperationAddr);       signedDraftAddrs.push(draftAddr);   }    function getToSignatureDraftAddrs()constant returns(address[]){       return toSignatureDraftAddrs;   }    function getSignedDraftAddrs()constant returns(address[]){      return signedDraftAddrs;   }    function getBills()constant returns(address[],address[],address[],address[]){        return (issueOperationAddrs,signedOperationAddrs,transferOperationAddrs,cashOperationAddrs);   }    function getDraftInfo(address draftAddr)constant returns(address,address,bytes32,Draft.SignType,uint16,uint,uint,uint,uint,uint,uint){      Draft draft=Draft(draftAddr);      return draft.getDraftInfo();   }      function addToSignatureDraftAddrs(address draftAddr){        toSignatureDraftAddrs.push(draftAddr);    }     function deleteToSignatureDraft(address draftAddr){        deleteAddr(toSignatureDraftAddrs,draftAddr);    } }  contract Operator is CashOperation{     address companyAddr;     address applicantConAddr;     address operatorInfo;      address[] toIssuedDraftAddrs_temp;     address[] toTransferdDraftAddrs_temp;     address[] toIssueDraftAddrs;     address[] toSignatureDraftAddrs;      address[] issueOperationAddrs;     address[] signedOperationAddrs;     address[] transferOperationAddrs;       function Operator(address _companyAddr,address _applicantConAddr,bytes32 _id,bytes32 _name,bytes32 _phoneNum,bytes32 _idNum){         companyAddr=_companyAddr;         applicantConAddr=_applicantConAddr;         operatorInfo=new UserInfo(_id,"",_name,_phoneNum,_idNum);     }      function addToIssueDraft(address newDraftAddr){         toIssueDraftAddrs.push(newDraftAddr);     }      function signedDraft(address draftAddr,address draftOperationAddr){         Applicant applicant= Applicant(applicantConAddr);         DraftOperation draftOperation = DraftOperation(draftOperationAddr);          signedDraftAddrs.push(draftAddr);         signedOperationAddrs.push(draftOperationAddr);          applicant.addSignedDraftAddr(draftAddr);         applicant.addOperation(draftOperationAddr,draftOperation.getOperationType());     }     function transfer(bytes32 newDraftNum,address draftAddr,uint value,address toApplicantAddr,bytes32 sequenceNum,address fromConAddr,address toConAddr,uint operation1Time) returns(address,address){         address newDraftAddr=createNewDraft(Draft.DraftState.TransferNotSigned,newDraftNum,draftAddr,value,applicantConAddr,fromConAddr);         DraftOperation draftOperation=new DraftOperation(sequenceNum,fromConAddr,"",toConAddr,"",draftAddr,newDraftAddr,value,operation1Time,DraftOperation.OperationType.Transfer);          transferOperationAddrs.push(draftOperation);         toTransferdDraftAddrs_temp.push(newDraftAddr);          applicantAddOperation(draftOperation,DraftOperation.OperationType.Transfer);          addToSignatureDraft(toApplicantAddr,toConAddr,newDraftAddr);         return (newDraftAddr,draftOperation);    }     function applicantAddOperation(address draftOperation,DraftOperation.OperationType operationType){         Applicant applicant = Applicant(applicantConAddr);         applicant.addTempOperationAddrs(draftOperation);         applicant.addOperation(draftOperation,operationType);    }     function addToSignatureDraft(address toApplicantAddr,address toConAddr,address newDraftAddr){        if(toApplicantAddr==toConAddr){             Individual toIndividual=Individual(toConAddr);             toIndividual.addToSignatureDraftAddrs(newDraftAddr);         }else{             Operator toOperator=Operator(toConAddr);             toOperator.addToSignatureDraftAddrs(newDraftAddr);         }    }     function transferSuccess(address oldDraftAddr,address newDraftAddr){         if(oldDraftAddr == newDraftAddr){           deleteAddr(signedDraftAddrs,oldDraftAddr);         }         deleteAddr(toTransferdDraftAddrs_temp,newDraftAddr);    }     function transferFailed(address oldDraftAddr,address newDraftAddr){       if(oldDraftAddr != newDraftAddr){             Draft oldDraft = Draft(oldDraftAddr);             Draft newDraft = Draft(newDraftAddr);             uint newFaceValue = newDraft.getFaceValue();             oldDraft.addFaceValue(newFaceValue);             newDraft.destroyDraft();       }       deleteAddr(toTransferdDraftAddrs_temp,newDraftAddr);    }     function issue(bytes32 newDraftNum,address draftAddr,uint value,address toApplicantAddr,bytes32 sequenceNum,address fromConAddr,address toConAddr,uint operation1Time) returns(address,address){         address newDraftAddr=createNewDraft(Draft.DraftState.IssueNotSigned,newDraftNum,draftAddr,value,applicantConAddr,fromConAddr);         address draftOperation=new DraftOperation(sequenceNum,fromConAddr,"",toConAddr,"",draftAddr,newDraftAddr,value,operation1Time,DraftOperation.OperationType.Transfer);         issueOperationAddrs.push(draftOperation);         toIssuedDraftAddrs_temp.push(newDraftAddr);         addToSignatureDraft(toApplicantAddr,toConAddr,newDraftAddr);         return (newDraftAddr,draftOperation);    }     function issueSuccess(address oldDraftAddr,address newDraftAddr,address newOperationAddr){         if(oldDraftAddr == newDraftAddr){           deleteAddr(toIssueDraftAddrs,oldDraftAddr);         }         deleteAddr(toIssuedDraftAddrs_temp,newDraftAddr);    }     function issueFailed(address oldDraftAddr,address newDraftAddr){        if(oldDraftAddr != newDraftAddr){           Draft oldDraft = Draft(oldDraftAddr);           Draft newDraft = Draft(newDraftAddr);           uint newFaceValue = newDraft.getFaceValue();           oldDraft.addFaceValue(newFaceValue);           newDraft.destroyDraft();        }        deleteAddr(toIssuedDraftAddrs_temp,newDraftAddr);    }     function createNewDraft(Draft.DraftState draftState,bytes32 newDraftNum,address draftAddr,uint value,address toAppConAddr,address toConAddr) returns(address){        Draft draft = Draft(draftAddr);        uint balance = draft.getFaceValue();        if(balance<value){          throw;        }        address newDraftAddr;        if(balance==value){            newDraftAddr = draftAddr;            draft.setState(draftState);        }else{            draftInfoMap(draftAddr);            newDraftAddr=new Draft(newDraftNum,draftInfo.signType,draftState,draftInfo.validDays,draftInfo.frozenDays,draftInfo.autoCashDays,draftInfo.signTime,value,toAppConAddr,toConAddr,draftInfo.currencyType);            draft.subFaceValue(value);       }       return newDraftAddr;    }     function addToSignatureDraftAddrs(address draftAddr){        toSignatureDraftAddrs.push(draftAddr);    }     function deleteToSignatureDraft(address draftAddr){        deleteAddr(toSignatureDraftAddrs,draftAddr);    }     function deleteToIssuedDraftAddrs_temp(address draftAddr){        deleteAddr(toIssuedDraftAddrs_temp,draftAddr);    }      function deleteToTransferdDraftAddrs_temp(address draftAddr){        deleteAddr(toTransferdDraftAddrs_temp,draftAddr);     }      function canBeDelete() constant returns(bool){         if(signedDraftAddrs.length!=0 || toIssueDraftAddrs.length!=0 || toIssuedDraftAddrs_temp.length!=0 || toTransferdDraftAddrs_temp.length != 0){            return false;         }else{            return true;         }     }      function getTempDrafts() returns (address[],address[]){         return (toIssuedDraftAddrs_temp,toTransferdDraftAddrs_temp);     }      function getDrafts()constant returns(address[],address[],address[],address[]){         return (signedDraftAddrs,toIssueDraftAddrs,toIssuedDraftAddrs_temp,toTransferdDraftAddrs_temp);     }      function getBills() constant returns(address[],address[],address[],address[]){        return (issueOperationAddrs,signedOperationAddrs,transferOperationAddrs,cashOperationAddrs);     }      function getOperatorInfo() constant returns(address){        return operatorInfo;     } } contract Applicant is BasicOperations{     address bankAddr;     address companyAddr;     address companyInfo;      address applicantConAddr;     address[] operatorConAddrs;      address[] toIssueDraftAddrs;     address[] signedDraftAddrs;      address[] signOperationAddrs;     address[] signedOperationAddrs;     address[] issueOperationAddrs;     address[] transferOperations;     address[] cashOperationAddrs;     address[] tempOperationAddrs;      address[] toIssueDraftAddrs_temp;     address[] signedDraftAddrs_temp;      mapping(bytes32=>address) public applicantInfos;     bytes32[] applicantIDs;      modifier onlyOwner(){         if(msg.sender!=companyAddr)throw;         _;     }      modifier onlyOperator(){         bool flag=false;         for(uint i=0;i<operatorConAddrs.length;i++){             if(msg.sender==operatorConAddrs[i]){                 flag=true;                 break;             }         }         if(flag!=true) throw;         _;     }      function Applicant(address _bankAddr,address _companyAddr,bytes32 _companyId,bytes32 _companyName,bytes32 _applicantId,bytes32 _applicantName){         bankAddr = _bankAddr;         companyAddr = _companyAddr;         companyInfo = new UserInfo(_companyId,_companyName,"","","");         addApplicant(_applicantId,_companyName,_applicantName);     }      function signDraft(bytes32 _draftNum,Draft.SignType _signType,uint _validDays,uint _frozenDays,uint _signTime,uint _value,bytes32 _sequenceNum,address _applicantConAddr,bytes32 _applicantId,address _operatorConAddr,uint16 _currencyType) returns(address,address){         applicantConAddr=_applicantConAddr;         Draft draft=new Draft(_draftNum,_signType,Draft.DraftState.UnIssue,_validDays,_frozenDays,360,_signTime,_value,applicantConAddr,_operatorConAddr,_currencyType);         return createSignOperation(_sequenceNum, _applicantId, _operatorConAddr, draft, _value, _signTime);     }      function createSignOperation(bytes32 _sequenceNum,bytes32 _applicantId,address _operatorConAddr,address draft,uint _value,uint _signTime) returns(address,address){         DraftOperation draftOperation=new DraftOperation(_sequenceNum,applicantConAddr,_applicantId,_operatorConAddr,"",draft,draft,_value,_signTime,DraftOperation.OperationType.Sign);         Draft tempDraft = Draft(draft);         Operator operator = Operator(_operatorConAddr);          tempDraft.addDraftOperation(draftOperation);          signOperationAddrs.push(draftOperation);         toIssueDraftAddrs.push(draft);          operator.addToIssueDraft(draft);         return (draft,draftOperation);     }      function changeOperator(address _oldOperatorConAddr,address _newOperatorConAddr,address _draftAddr){         Draft draft=Draft(_draftAddr);         Operator newOperator=Operator(_newOperatorConAddr);         Operator oldOperator=Operator(_oldOperatorConAddr);          draft.setOperatorConAddr(_newOperatorConAddr);         newOperator.addSignedDraft(draft);         oldOperator.deleteSignedDraft(draft);     }      function transferSuccess(address _oldDraftAddr,address _newDraftAddr,address _fromOperatorAddr,address _toApplicantConAddr,address _toOperatorConAddr,     address _draftOperationAddr,uint _operation3Time) returns(address,address){         updateDraftAndOperation(_oldDraftAddr, _newDraftAddr,_toApplicantConAddr,_toOperatorConAddr, _draftOperationAddr, _operation3Time,DraftOperation.OperationType.Transfer);          Operator fromOperator = Operator(_fromOperatorAddr);         fromOperator.transferSuccess(_oldDraftAddr,_newDraftAddr);          if(_toApplicantConAddr == _toOperatorConAddr){             Individual individual = Individual(_toOperatorConAddr);             individual.signedDraftFromOperator(_newDraftAddr,_draftOperationAddr,DraftOperation.OperationType.Transfer);         }else{             Operator toOperator = Operator(_toOperatorConAddr);             toOperator.signedDraft(_newDraftAddr,_draftOperationAddr);         }          deleteToSignatureDraft( _toApplicantConAddr, _toOperatorConAddr, _newDraftAddr);         return (_newDraftAddr,_draftOperationAddr);     }      function updateDraftAndOperation(address _oldDraftAddr,address _newDraftAddr,address _newApplicantConAddr,address _newOperatorConAddr,address _draftOperationAddr,uint _operation3Time,DraftOperation.OperationType operationType){         Draft newDraft = Draft(_newDraftAddr);         DraftOperation draftOperation = DraftOperation(_draftOperationAddr);          deleteAddr(tempOperationAddrs,_draftOperationAddr);         draftOperation.setOperation3Time(_operation3Time);         draftOperation.setTxState(DraftOperation.TxState.Success);          newDraft.setState(Draft.DraftState.Signed);         newDraft.changeOwner(_newApplicantConAddr,_newOperatorConAddr);         if(_oldDraftAddr == _newDraftAddr){             if(operationType == DraftOperation.OperationType.Transfer){                 deleteAddr(signedDraftAddrs,_oldDraftAddr);             }else if(operationType == DraftOperation.OperationType.Issue){                 deleteAddr(toIssueDraftAddrs,_oldDraftAddr);             }         }else{             copyOperationAddr(_oldDraftAddr,_newDraftAddr,_draftOperationAddr);         }     }       function transferFail(address _oldDraftAddr,address _newDraftAddr,address _fromOperatorAddr,address _toApplicantConAddr,address _toOperatorConAddr,address _draftOperationAddr) returns(bool){         DraftOperation draftOperation = DraftOperation(_draftOperationAddr);         Operator fromOperator = Operator(_fromOperatorAddr);         Draft oldDraft = Draft(_oldDraftAddr);         Draft newDraft = Draft(_newDraftAddr);          draftOperation.setTxState(DraftOperation.TxState.SignatureFail);         if(_oldDraftAddr == _newDraftAddr){             oldDraft.setState(Draft.DraftState.Signed);         }else{             newDraft.setState(Draft.DraftState.Invalid);         }         deleteAddr(tempOperationAddrs,_draftOperationAddr);         fromOperator.transferFailed(_oldDraftAddr,_newDraftAddr);          deleteToSignatureDraft( _toApplicantConAddr, _toOperatorConAddr, _newDraftAddr);     }      function issueSuccess_Signature(address _draftAddr,address _draftOperationAddr,uint _operation2Time){         Draft draft = Draft(_draftAddr);         draft.setState(Draft.DraftState.Issuing);         DraftOperation draftOperation = DraftOperation(_draftOperationAddr);         draftOperation.setOperation2Time(_operation2Time);         draftOperation.setTxState(DraftOperation.TxState.ToCharge);     }      function issueSuccess_PayMoney(address _oldDraftAddr,address _newDraftAddr,address _fromOperatorAddr,address _toApplicantConAddr,address _toOperatorConAddr,     address _draftOperationAddr,uint _operation3Time) returns(address,address){         updateDraftAndOperation(_oldDraftAddr, _newDraftAddr,_toApplicantConAddr,_toOperatorConAddr, _draftOperationAddr, _operation3Time,DraftOperation.OperationType.Issue);          Operator fromOperator = Operator(_fromOperatorAddr);         fromOperator.transferSuccess(_oldDraftAddr,_newDraftAddr);          if(_toApplicantConAddr == _toOperatorConAddr){             Individual individual = Individual(_toOperatorConAddr);             individual.signedDraftFromOperator(_newDraftAddr,_draftOperationAddr,DraftOperation.OperationType.Issue);         }else{             Operator toOperator = Operator(_toOperatorConAddr);             toOperator.signedDraft(_newDraftAddr,_draftOperationAddr);         }          deleteToSignatureDraft( _toApplicantConAddr, _toOperatorConAddr, _newDraftAddr);         return (_newDraftAddr,_draftOperationAddr);     }      function issueFail(address _oldDraftAddr,address _newDraftAddr,address _fromOperatorAddr,address _toApplicantAddr,address _toOperatorAddr,address _draftOperationAddr,DraftOperation.TxState draftOperationState){         DraftOperation draftOperation = DraftOperation(_draftOperationAddr);         Operator fromOperator = Operator(_fromOperatorAddr);         Draft oldDraft = Draft(_oldDraftAddr);         Draft newDraft = Draft(_newDraftAddr);          draftOperation.setTxState(draftOperationState);         if(_oldDraftAddr == _newDraftAddr){             oldDraft.setState(Draft.DraftState.UnIssue);         }else{             newDraft.setState(Draft.DraftState.Invalid);         }         deleteAddr(tempOperationAddrs,_draftOperationAddr);          fromOperator.transferFailed(_oldDraftAddr,_newDraftAddr);          deleteToSignatureDraft( _toApplicantAddr, _toOperatorAddr, _newDraftAddr);     }      function deleteToSignatureDraft(address _toApplicantAddr,address _toOperatorAddr,address _newDraftAddr){          if(_toApplicantAddr == _toOperatorAddr){             Individual individual = Individual(_toOperatorAddr);             individual.deleteToSignatureDraft(_newDraftAddr);         }else{             Operator toOperator = Operator(_toOperatorAddr);             toOperator.deleteToSignatureDraft(_newDraftAddr);         }     }      function addApplicant(bytes32 id,bytes32 companyName,bytes32 userName){         UserInfo userInfo=new UserInfo(id,companyName,userName,"","");         applicantInfos[id]=userInfo;         applicantIDs.push(id);     }      function deleteApplicant(bytes32 id){         applicantInfos[id] = 0x0;         deleteBytes32(applicantIDs,id);     }      function deleteBytes32(bytes32[] storage a,bytes32 id)internal{        uint position;        for(uint i=0;i<a.length;i++){            if(a[i]==id){               position=i;               break;            }            position++;        }        if(position!=a.length){            a[position]=a[a.length-1];            a.length=a.length-1;        }     }      function addOperation(address draftOperationAddr,DraftOperation.OperationType operationType){         if(operationType==DraftOperation.OperationType.Issue){             issueOperationAddrs.push(draftOperationAddr);         }else if(operationType==DraftOperation.OperationType.Transfer){             transferOperations.push(draftOperationAddr);         }else{             cashOperationAddrs.push(draftOperationAddr);         }     }      function addOperator(address applicantConAddr,bytes32 id,bytes32 phoneNum,bytes32 idNum,bytes32 name){         Operator operator=new Operator(companyAddr,applicantConAddr,id,name,phoneNum,idNum);         operatorConAddrs.push(operator);     }      function deleteOperator(address operatorConAddr)  returns(bool){         Operator operator=Operator(operatorConAddr);         if(operator.canBeDelete()==true){             deleteAddr(operatorConAddrs,operatorConAddr);             return true;         }else{             return false;         }     }      function addTempOperationAddrs(address tempOperationAddr){         tempOperationAddrs.push(tempOperationAddr);     }      function deleteTempOperation(address tempOperationAddr){         deleteAddr(tempOperationAddrs,tempOperationAddr);     }      function addSignedDraftAddr(address draftAddr){         signedDraftAddrs.push(draftAddr);     }      function deleteSignedDraftAddr(address draftAddr){         deleteAddr(signedDraftAddrs,draftAddr);     }      function getDrafts()constant returns(address[],address[]){         return (toIssueDraftAddrs,signedDraftAddrs);     }      function getTempOperationAddrs()constant returns(address[]){         return tempOperationAddrs;     }      function getBills()constant returns(address[],address[],address[],address[],address[]){         return (signOperationAddrs,signedOperationAddrs,issueOperationAddrs,transferOperations,cashOperationAddrs);     }      function getOperatorConAddrs()constant returns(address[]){         return operatorConAddrs;     } }'},
            {name:"pattern4", value: 'contract SimulateBank{ address owner; bytes32 bankName; uint bankNum; bool isInvalid; mapping(address => uint) public accounts; function SimulateBank( bytes32 _bankName,uint _bankNum,bool _isInvalid){ bankName = _bankName; bankNum = _bankNum; isInvalid = _isInvalid; owner = msg.sender; } function issue(address addr,uint number) returns (bool){ if(msg.sender==owner){ accounts[addr] = accounts[addr] + number; return true; } return false; } function transfer(address addr1,address addr2,uint amount) returns (bool){ if(accounts[addr1] >= amount){ accounts[addr1] = accounts[addr1] - amount; accounts[addr2] = accounts[addr2] + amount; return true; } return false; } function getAccountBalance(address addr) returns(uint){ return accounts[addr]; } }'},
            {name:"TestPressContract", value: 'contract TestPressContract{ struct TestPressStruct{ uint testUint; address testAddress1; address testAddress2; bool testBool; } TestPressStruct[] testPressStructs; function TestPressContract(){ addPressStruct(); addPressStruct(); } function addPressStruct() returns(uint){ uint length = testPressStructs.length; testPressStructs.length ++; testPressStructs[length].testUint = length; testPressStructs[length].testAddress1 = msg.sender; testPressStructs[length].testAddress2 = msg.sender; testPressStructs[length].testBool = true; return length; } function getPressStruct() returns(uint[],address[],address[],bool[]){ uint[] testUints; address[] testAddress1s; address[] testAddress2s; bool[] testBools; uint length = testPressStructs.length; for(uint i = 0;i < length;i++){ testUints.push(testPressStructs[i].testUint); testAddress1s.push(testPressStructs[i].testAddress1); testAddress2s.push(testPressStructs[i].testAddress2); testBools.push(testPressStructs[i].testBool); } return (testUints,testAddress1s,testAddress2s,testBools); } }'},
            {name:'bank', value:'contract Bank{     address owner;     bytes32 public bankName;     bytes32 public bankID;      address[] applicantConAddrs;     address[] individualConAddrs;     address[] cashedDraftAddrs;     address[] draftOperations;      function Bank(bytes32 _bankName,bytes32 _bankID){         owner=msg.sender;         bankName = _bankName;         bankID = _bankID;     }      function createApplicant(address bankConAddr,address companyAddr,bytes32 companyId,bytes32 companyName,bytes32 applicantId,bytes32 applicantName)returns(address){         Applicant applicant=new Applicant(bankConAddr,companyAddr,companyId,companyName,applicantId,applicantName);         applicantConAddrs.push(applicant);         return applicant;     }      function createIndividual(address bankConAddr,address individualAddr,bytes32 id,bytes32 phoneNum,bytes32 userName,bytes32 idNum) returns(address){         Individual individual=new Individual(bankConAddr,individualAddr,id, phoneNum, userName, idNum);         individualConAddrs.push(individual);         return individual;     }      function getApplicantConAddrs() constant returns(address[]){         return applicantConAddrs;     }      function getIndividualConAddrs() constant returns(address[]){         return individualConAddrs;     }      function addCashedDraftAddr(address _cashedDraftAddr){         cashedDraftAddrs.push(_cashedDraftAddr);     }      function getCashedDraftAddrs() constant returns(address[]){         return cashedDraftAddrs;     }      function addDraftOperation(address _draftOperation) {         draftOperations.push(_draftOperation);     }      function getDraftOperations() returns(address[]){         return draftOperations;     } }  contract DraftStructs{      struct DraftInfo{         address  applicantConAddr;         address operatorConAddr;         bytes32 draftNum;         Draft.SignType signType;         uint16 currencyType;         uint faceValue;         uint signTime;         uint cashTime;         uint validDays;         uint frozenDays;         uint autoCashDays;     }     DraftInfo draftInfo;      function draftInfoMap(address draftAddr){       Draft draft=Draft(draftAddr);        var (applicantConAddr,operatorConAddr,draftNum,signType,currencyType,faceValue,signTime,cashTime,validDays,frozenDays,autoCashDays)=draft.getDraftInfo();        draftInfo.applicantConAddr=applicantConAddr;        draftInfo.operatorConAddr=operatorConAddr;        draftInfo.draftNum=draftNum;        draftInfo.signType=signType;        draftInfo.currencyType=currencyType;        draftInfo.faceValue=faceValue;        draftInfo.signTime=signTime;        draftInfo.cashTime=cashTime;        draftInfo.validDays=validDays;        draftInfo.frozenDays=frozenDays;        draftInfo.autoCashDays=autoCashDays;      } }  contract BasicOperations{      function deleteAddr(address[] storage a,address draftAddr)internal{        uint position;        for(uint i=0;i<a.length;i++){            if(a[i]==draftAddr){               position=i;               break;            }            position++;        }        if(position!=a.length){            a[position]=a[a.length-1];            a.length=a.length-1;        }     }      function copyOperationAddr(address draftAddr,address newDraftAddr,address operation){         Draft oldDraft=Draft(draftAddr);         Draft newDraft=Draft(newDraftAddr);         uint length=oldDraft.getOperationsLen();         for(uint i=0;i<length;i++){            address temp=oldDraft.getOperationAddr(i);            newDraft.addDraftOperation(temp);         }         oldDraft.addDraftOperation(operation);         newDraft.addDraftOperation(operation);     } }  contract CashOperation is BasicOperations,DraftStructs{    address bankConAddr;    address[] signedDraftAddrs;    address[] cashOperationAddrs;     function createDraftAndOperation(bytes32 newDraftNum,bytes32 sequenceNum,address draftAddr,uint value,address fromConAddr,address toConAddr,uint operation1Time)returns(address,address){       address newDraftAddr=new Draft(newDraftNum,draftInfo.signType,Draft.DraftState.Cashing,draftInfo.validDays,draftInfo.frozenDays,draftInfo.autoCashDays,draftInfo.signTime,value,draftInfo.applicantConAddr,draftInfo.operatorConAddr,draftInfo.currencyType);       address draftOperation = createOperation(sequenceNum, draftAddr,newDraftAddr, value, fromConAddr, toConAddr, operation1Time);       return (newDraftAddr,draftOperation);    }     function createOperation(bytes32 sequenceNum,address draftAddr,address newDraftAddr,uint value,address fromConAddr,address toConAddr,uint operation1Time)returns(address){       DraftOperation draftOperation=new DraftOperation(sequenceNum,fromConAddr,"000",toConAddr,"000",draftAddr,newDraftAddr,value,operation1Time,DraftOperation.OperationType.Cash);       draftOperation.setTxState(DraftOperation.TxState.ToCharge);       cashOperationAddrs.push(draftOperation);       return draftOperation;    }     function cash(bytes32 newDraftNum,address draftAddr,uint value,address bankConAddr,bytes32 sequenceNum,uint operation1Time)returns(address,address){      Draft draft=Draft(draftAddr);      draftInfoMap(draftAddr);      address draftOperation;      if(draftInfo.faceValue<value){         throw;      }else if(draftInfo.faceValue==value){         draft.setState(Draft.DraftState.Cashing);         draftOperation=createOperation(sequenceNum,draftAddr,draftAddr,value,draftInfo.operatorConAddr,bankConAddr,operation1Time);      }else{         draft.subFaceValue(value);         (draftAddr,draftOperation) = createDraftAndOperation(newDraftNum,sequenceNum,draftAddr,value,draftInfo.operatorConAddr,bankConAddr,operation1Time);      }      Bank bank = Bank(bankConAddr);      bank.addDraftOperation(draftOperation);      return (draftAddr,draftOperation);   }    function cashSuccess(address draftAddr,address newDraftAddr,address bankConAddr,uint operation3Time,address draftOperationAddr) {      Draft newDraft=Draft(newDraftAddr);      newDraft.changeOwner(bankConAddr,bankConAddr);      newDraft.setState(Draft.DraftState.Cashed);       DraftOperation draftOperation = DraftOperation(draftOperationAddr);      draftOperation.setOperation3Time(operation3Time);      draftOperation.setTxState(DraftOperation.TxState.Success);       if(draftAddr!=newDraftAddr){          copyOperationAddr(draftAddr,newDraftAddr,draftOperation);      }else{          deleteAddr(signedDraftAddrs,newDraftAddr);      }       Bank bank = Bank(bankConAddr);      bank.addCashedDraftAddr(newDraft);   }    function cashFail(address oldDraftAddr,address newDraftAddr,address draftOperationAddr,uint operation3Time){     Draft oldDraft=Draft(oldDraftAddr);     if(oldDraftAddr==newDraftAddr){         oldDraft.setState(Draft.DraftState.Signed);     }else{         Draft newDraft=Draft(newDraftAddr);         uint faceValue=newDraft.getFaceValue();         oldDraft.addFaceValue(faceValue);         newDraft.destroyDraft();     }      DraftOperation draftOperation = DraftOperation(draftOperationAddr);     draftOperation.setOperation3Time(operation3Time);     draftOperation.setTxState(DraftOperation.TxState.ChargeFail);   }    function addSignedDraft(address signedDraftAddr){       signedDraftAddrs.push(signedDraftAddr);   }    function deleteSignedDraft(address signedDraftAddr){       deleteAddr(signedDraftAddrs,signedDraftAddr);   } }  contract Draft{   enum SignType{PayAtSight,PayAtFixedDate}   SignType signType;   enum DraftState{Saved,UnIssue,IssueNotSigned,Issuing,Signed,TransferNotSigned,Cashing,Cashed,Invalid}   DraftState public draftState;   bytes32 draftNum;   bytes32 public acceptBankName;   bytes32 public acceptBankNum;   address applicantConAddr;   address operatorConAddr;   uint16 currencyType;   uint faceValue;   uint signTime;   uint signedTime;   uint cashTime;   uint validDays=60;   uint frozenDays=0;   uint autoCashDays=360;   address[] draftOperationAddrs;    function Draft(bytes32 _draftNum,SignType _signType,DraftState _draftState,uint _validDays,uint _frozenDays,uint _autoCashedDays,uint _signTime,uint _faceValue,address _applicanConAddr,address _operatorConAddr,uint16 _currencyType){       draftNum=_draftNum;       signType=_signType;       draftState=_draftState;       validDays=_validDays;       frozenDays=_frozenDays;       autoCashDays= _autoCashedDays;       signTime=_signTime;       faceValue=_faceValue;       applicantConAddr=_applicanConAddr;       operatorConAddr=_operatorConAddr;       currencyType=_currencyType;   }    function updateAllDays(){     if(validDays>0){       validDays=validDays-1;       if(validDays<=0){          if(draftState==DraftState.UnIssue){           selfdestruct(operatorConAddr);          }       }     }     if(frozenDays>0){         frozenDays=frozenDays-1;     }     if(autoCashDays>0){         autoCashDays=autoCashDays-1;     }   }    function updateValidDays(uint _validDays){       validDays = _validDays;   }    function updateFrozenDays(uint _frozenDays){       frozenDays = _frozenDays;   }    function updateAutoCashDays(uint _autoCashDays){       autoCashDays = _autoCashDays;   }     function changeOwner(address _applicantConAddr,address _operatorConAddr){       applicantConAddr=_applicantConAddr;       operatorConAddr=_operatorConAddr;   }    function subFaceValue(uint value) {      if(faceValue<value){         throw;      }else{         faceValue=faceValue-value;      }   }    function addFaceValue(uint value){      faceValue=faceValue+value;   }    function destroyDraft(){       draftState=DraftState.Invalid;   }    function addDraftOperation(address draftOperationAddr){       draftOperationAddrs.push(draftOperationAddr);   }      function getFaceValue() constant returns(uint){         return faceValue;     }      function getDraftInfo()constant returns(address,address,bytes32,Draft.SignType,uint16,uint,uint,uint,uint,uint,uint){        return (applicantConAddr,operatorConAddr,draftNum,signType,currencyType,faceValue,signTime,cashTime,validDays,frozenDays,autoCashDays);     }      function getOperatorConAddr() constant returns(address){        return operatorConAddr;     }      function setOperatorConAddr(address _operatorConAddr){         operatorConAddr=_operatorConAddr;     }      function getOperationsLen() constant returns(uint){       return draftOperationAddrs.length;     }      function getOperationAddr(uint i) constant returns(address){       return draftOperationAddrs[i];     }    function setSignedTime(uint _signedTime) {       signedTime=_signedTime;   }     function setState(DraftState _state) {      draftState=_state;   }    function setAcceptBankInfo(bytes32 _acceptBankName,bytes32 _acceptBankNum){      acceptBankName=_acceptBankName;      acceptBankNum=_acceptBankNum;   }    function getAcceptBankInfo()returns(bytes32,bytes32){      return (acceptBankName,acceptBankNum);   } }  contract DraftOperation{     bytes32 public sequenceNum;     address public fromConAddr;     bytes32 public fromId;     address public toConAddr;     bytes32 public toId;     address public draftAddr;     address public newDraftAddr;     uint public value;     uint public operation1Time;     uint public operation2Time;     uint public operation3Time;     enum OperationType{Sign,Issue,Transfer,Cash}     OperationType public operationType;     enum TxState{Success,ToSignature,ToCharge,SignatureFail,ChargeFail}     TxState public txState = TxState.ToSignature;      function DraftOperation(bytes32 _sequenceNum,address _fromConAddr,bytes32 _fromId,address _toConAddr,bytes32 _toId,address _draftAddr,address _newDraftAddr,uint _value,uint _operation1Time,OperationType _operationType){         sequenceNum=_sequenceNum;         fromConAddr=_fromConAddr;         fromId=_fromId;         toConAddr=_toConAddr;         toId=_toId;         draftAddr=_draftAddr;         newDraftAddr=_newDraftAddr;         value=_value;         operation1Time=_operation1Time;         operationType=_operationType;     }      function getOperationInfo()constant returns(bytes32,address,bytes32,address,bytes32,address,address,uint,uint,uint,uint,OperationType) {         return (sequenceNum,fromConAddr,fromId,toConAddr,toId,draftAddr,newDraftAddr,value,operation1Time,operation2Time,operation3Time,operationType);     }      function setOperation1Time(uint operationTime){         operation1Time = operationTime;     }     function setOperation2Time(uint operationTime){         operation2Time = operationTime;     }     function setOperation3Time(uint operationTime){         operation3Time = operationTime;     }      function setTxState(TxState _txState){         txState = _txState;     }      function getOperationType()constant returns(OperationType){         return operationType;     } }  contract UserInfo{   bytes32 id;   bytes32 companyName;   bytes32 userName;   bytes32 phoneNum;   bytes32 idNum;      function UserInfo(bytes32 _id,bytes32 _companyName,bytes32 _userName,bytes32 _phoneNum,bytes32 _idNum){        id=_id;        companyName=_companyName;        userName=_userName;        phoneNum=_phoneNum;        idNum=_idNum;     }      function getUserInfo()constant returns(bytes32,bytes32,bytes32,bytes32,bytes32){        return (id,companyName,userName,phoneNum,idNum);     } }  contract Individual is CashOperation{     address owner;    address userInfo;     address[] toSignatureDraftAddrs;     address[] issueOperationAddrs;    address[] signedOperationAddrs;    address[] transferOperationAddrs;     bytes32 tempAcceptBankName;    bytes32 tempAcceptBankNum;     function Individual(address _bankConAddr,address individualAddr,bytes32 id,bytes32 phoneNum,bytes32 userName,bytes32 idNum){       owner=individualAddr;       bankConAddr=_bankConAddr;       userInfo=new UserInfo(id,"000",userName,phoneNum,idNum);    }      function issue(bytes32 draftNum,Draft.SignType signType,uint value,uint frozenDays,uint signTime,address individualConAddr,uint16 currencyType,bytes32 acceptBankName,bytes32 acceptBankNum)returns(address){        Draft draft=new Draft(draftNum,signType,Draft.DraftState.Issuing,0,frozenDays,360,signTime,value,individualConAddr,individualConAddr,currencyType);        draft.setAcceptBankInfo(acceptBankName,acceptBankNum);        return draft;    }      function issueSuccess(address draftAddr,address toAppConAddr,bytes32 sequenceNum,address fromConAddr,address toConAddr,uint operationTime) returns(address){       Draft draft=Draft(draftAddr);       uint value=draft.getFaceValue();       DraftOperation draftOperation=new DraftOperation(sequenceNum,fromConAddr,"000",toConAddr,"000",draftAddr,draftAddr,value,operationTime,DraftOperation.OperationType.Issue);        draft.setState(Draft.DraftState.Signed);       draft.addDraftOperation(draftOperation);       draft.changeOwner(toAppConAddr,toConAddr);        issueOperationAddrs.push(draftOperation);        receiverSignedDraft(toAppConAddr,toConAddr,draftAddr,draftOperation);       return draftOperation;    }     function issueFail(address draftAddr){       Draft draft=Draft(draftAddr);       draft.destroyDraft();    }     function transfer(bytes32 newDraftNum,bytes32 acceptBankName,bytes32 acceptBankNum,address draftAddr,uint value,address toAppConAddr,bytes32 sequenceNum,address fromConAddr,address toConAddr,uint operationTime) returns(address,address){       tempAcceptBankNum = acceptBankNum;       tempAcceptBankName = acceptBankName;       address newDraftAddr=createNewDraft(newDraftNum,draftAddr,value,toAppConAddr,toConAddr);       address newDraftOperation = createTransferOperation(sequenceNum,fromConAddr,toConAddr,draftAddr,newDraftAddr,value,operationTime);       receiverSignedDraft(toAppConAddr,toConAddr,newDraftAddr,newDraftOperation);       return (newDraftAddr, newDraftOperation);    }     function receiverSignedDraft(address toAppConAddr,address toOperatorAddr,address newDraft,address newDraftOperation){        if(toAppConAddr==toOperatorAddr){            Individual individual=Individual(toOperatorAddr);            individual.signedDraftFromIndividual(newDraft,newDraftOperation);        }else{            Operator operator=Operator(toOperatorAddr);            operator.signedDraft(newDraft,newDraftOperation);       }    }     function createTransferOperation(bytes32 sequenceNum,address fromConAddr,address toConAddr,address draftAddr,address newDraftAddr,uint value,uint operationTime)internal returns(address){         DraftOperation draftOperation=new DraftOperation(sequenceNum,fromConAddr,"000",toConAddr,"000",draftAddr,newDraftAddr,value,operationTime,DraftOperation.OperationType.Transfer);         transferOperationAddrs.push(draftOperation);         if(draftAddr!=newDraftAddr){             copyOperationAddr(draftAddr,newDraftAddr,draftOperation);         }           return draftOperation;    }     function createNewDraft(bytes32 newDraftNum,address draftAddr,uint value,address toAppConAddr,address toOperatorAddr)internal returns(address){        Draft draft=Draft(draftAddr);        uint faceValue=draft.getFaceValue();        if(faceValue<value){          throw;        }         if(faceValue==value){           draft.changeOwner(toAppConAddr,toOperatorAddr);           deleteAddr(signedDraftAddrs,draftAddr);           draft.setAcceptBankInfo(tempAcceptBankName,tempAcceptBankNum);           tempAcceptBankName = "000";           tempAcceptBankNum = "000";           return draftAddr;        }else{           draftInfoMap(draftAddr);           Draft newDraft=new Draft(newDraftNum,draftInfo.signType,Draft.DraftState.Signed,draftInfo.validDays,draftInfo.frozenDays,draftInfo.autoCashDays,draftInfo.signTime,value,toAppConAddr,toOperatorAddr,draftInfo.currencyType);           draft.subFaceValue(value);           newDraft.setAcceptBankInfo(tempAcceptBankName,tempAcceptBankNum);           tempAcceptBankName = "000";           tempAcceptBankNum = "000";           return newDraft;       }     }    function signedDraftFromIndividual(address newDraftAddr,address draftOperationAddr){       signedOperationAddrs.push(draftOperationAddr);       signedDraftAddrs.push(newDraftAddr);   }    function signedDraftFromOperator(address draftAddr,address draftOperationAddr,DraftOperation.OperationType operationType){       deleteToSignatureDraft(draftAddr);       signedOperationAddrs.push(draftOperationAddr);       signedDraftAddrs.push(draftAddr);   }    function getToSignatureDraftAddrs()constant returns(address[]){       return toSignatureDraftAddrs;   }    function getSignedDraftAddrs()constant returns(address[]){      return signedDraftAddrs;   }    function getBills()constant returns(address[],address[],address[],address[]){        return (issueOperationAddrs,signedOperationAddrs,transferOperationAddrs,cashOperationAddrs);   }    function getDraftInfo(address draftAddr)constant returns(address,address,bytes32,Draft.SignType,uint16,uint,uint,uint,uint,uint,uint){      Draft draft=Draft(draftAddr);      return draft.getDraftInfo();   }    function addToSignatureDraftAddrs(address draftAddr){        toSignatureDraftAddrs.push(draftAddr);   }     function deleteToSignatureDraft(address draftAddr){        deleteAddr(toSignatureDraftAddrs,draftAddr);    }     function getUserInfo() returns (address){        return userInfo;    } }  contract Operator is CashOperation{     address companyAddr;     address applicantConAddr;     address operatorInfo;      address[] toIssuedDraftAddrs_temp;     address[] toTransferdDraftAddrs_temp;     address[] toIssueDraftAddrs;     address[] toSignatureDraftAddrs;      address[] issueOperationAddrs;     address[] signedOperationAddrs;     address[] transferOperationAddrs;       function Operator(address _bankConAddr,address _companyAddr,address _applicantConAddr,bytes32 _id,bytes32 _name,bytes32 _phoneNum,bytes32 _idNum){         companyAddr=_companyAddr;         bankConAddr = _bankConAddr;         applicantConAddr=_applicantConAddr;         operatorInfo=new UserInfo(_id,"000",_name,_phoneNum,_idNum);     }      function addToIssueDraft(address newDraftAddr){         toIssueDraftAddrs.push(newDraftAddr);     }      function signedDraft(address draftAddr,address draftOperationAddr){         Applicant applicant= Applicant(applicantConAddr);         DraftOperation draftOperation = DraftOperation(draftOperationAddr);          signedDraftAddrs.push(draftAddr);         signedOperationAddrs.push(draftOperationAddr);          applicant.addSignedDraftAddr(draftAddr);         applicant.addOperation(draftOperationAddr,draftOperation.getOperationType());     }     function transfer(bytes32 newDraftNum,address draftAddr,uint value,address toApplicantAddr,bytes32 sequenceNum,address fromConAddr,address toConAddr,uint operation1Time) returns(address,address){         address newDraftAddr=createNewDraft(Draft.DraftState.TransferNotSigned,newDraftNum,draftAddr,value,applicantConAddr,fromConAddr);         DraftOperation draftOperation=new DraftOperation(sequenceNum,fromConAddr,"000",toConAddr,"000",draftAddr,newDraftAddr,value,operation1Time,DraftOperation.OperationType.Transfer);          transferOperationAddrs.push(draftOperation);         toTransferdDraftAddrs_temp.push(newDraftAddr);          applicantAddOperation(draftOperation,DraftOperation.OperationType.Transfer);          addToSignatureDraft(toApplicantAddr,toConAddr,newDraftAddr);         return (newDraftAddr,draftOperation);    }     function applicantAddOperation(address draftOperation,DraftOperation.OperationType operationType){         Applicant applicant = Applicant(applicantConAddr);         applicant.addTempOperationAddrs(draftOperation);         applicant.addOperation(draftOperation,operationType);    }     function addToSignatureDraft(address toApplicantAddr,address toConAddr,address newDraftAddr){        if(toApplicantAddr==toConAddr){             Individual toIndividual=Individual(toConAddr);             toIndividual.addToSignatureDraftAddrs(newDraftAddr);         }else{             Operator toOperator=Operator(toConAddr);             toOperator.addToSignatureDraftAddrs(newDraftAddr);         }    }     function transferSuccess(address oldDraftAddr,address newDraftAddr){         if(oldDraftAddr == newDraftAddr){           deleteAddr(signedDraftAddrs,oldDraftAddr);         }         deleteAddr(toTransferdDraftAddrs_temp,newDraftAddr);    }     function transferFailed(address oldDraftAddr,address newDraftAddr){       if(oldDraftAddr != newDraftAddr){             Draft oldDraft = Draft(oldDraftAddr);             Draft newDraft = Draft(newDraftAddr);             uint newFaceValue = newDraft.getFaceValue();             oldDraft.addFaceValue(newFaceValue);             newDraft.destroyDraft();       }       deleteAddr(toTransferdDraftAddrs_temp,newDraftAddr);    }     function issue(bytes32 newDraftNum,address draftAddr,uint value,address toApplicantAddr,bytes32 sequenceNum,address fromConAddr,address toConAddr,uint operation1Time) returns(address,address){         address newDraftAddr=createNewDraft(Draft.DraftState.IssueNotSigned,newDraftNum,draftAddr,value,applicantConAddr,fromConAddr);         address draftOperation=new DraftOperation(sequenceNum,fromConAddr,"000",toConAddr,"000",draftAddr,newDraftAddr,value,operation1Time,DraftOperation.OperationType.Issue);         issueOperationAddrs.push(draftOperation);         toIssuedDraftAddrs_temp.push(newDraftAddr);          applicantAddOperation(draftOperation,DraftOperation.OperationType.Issue);         addToSignatureDraft(toApplicantAddr,toConAddr,newDraftAddr);         return (newDraftAddr,draftOperation);    }     function issueSuccess(address oldDraftAddr,address newDraftAddr){         if(oldDraftAddr == newDraftAddr){           deleteAddr(toIssueDraftAddrs,oldDraftAddr);         }         deleteAddr(toIssuedDraftAddrs_temp,newDraftAddr);    }     function issueFailed(address oldDraftAddr,address newDraftAddr){        if(oldDraftAddr != newDraftAddr){           Draft oldDraft = Draft(oldDraftAddr);           Draft newDraft = Draft(newDraftAddr);           uint newFaceValue = newDraft.getFaceValue();           oldDraft.addFaceValue(newFaceValue);           newDraft.destroyDraft();        }        deleteAddr(toIssuedDraftAddrs_temp,newDraftAddr);    }     function createNewDraft(Draft.DraftState draftState,bytes32 newDraftNum,address draftAddr,uint value,address toAppConAddr,address toConAddr) returns(address){        Draft draft = Draft(draftAddr);        uint balance = draft.getFaceValue();        if(balance<value){          throw;        }        address newDraftAddr;        if(balance==value){            newDraftAddr = draftAddr;            draft.setState(draftState);        }else{            draftInfoMap(draftAddr);            newDraftAddr=new Draft(newDraftNum,draftInfo.signType,draftState,draftInfo.validDays,draftInfo.frozenDays,draftInfo.autoCashDays,draftInfo.signTime,value,toAppConAddr,toConAddr,draftInfo.currencyType);            draft.subFaceValue(value);       }       return newDraftAddr;    }     function addToSignatureDraftAddrs(address draftAddr){        toSignatureDraftAddrs.push(draftAddr);    }     function deleteToSignatureDraft(address draftAddr){        deleteAddr(toSignatureDraftAddrs,draftAddr);    }     function deleteToIssuedDraftAddrs_temp(address draftAddr){        deleteAddr(toIssuedDraftAddrs_temp,draftAddr);    }      function deleteToTransferdDraftAddrs_temp(address draftAddr){        deleteAddr(toTransferdDraftAddrs_temp,draftAddr);     }      function canBeDelete() constant returns(bool){         if(signedDraftAddrs.length!=0 || toIssueDraftAddrs.length!=0 || toIssuedDraftAddrs_temp.length!=0 || toTransferdDraftAddrs_temp.length != 0){            return false;         }else{            return true;         }     }      function getToSignatureDraftAddrs() returns(address[]){         return toSignatureDraftAddrs;     }      function getTempDrafts() returns (address[],address[]){         return (toIssuedDraftAddrs_temp,toTransferdDraftAddrs_temp);     }      function getDrafts()constant returns(address[],address[]){         return (signedDraftAddrs,toIssueDraftAddrs);     }      function getBills() constant returns(address[],address[],address[],address[]){        return (issueOperationAddrs,signedOperationAddrs,transferOperationAddrs,cashOperationAddrs);     }      function getOperatorInfo() constant returns(address){        return operatorInfo;     } }  contract Applicant is BasicOperations{     address bankConAddr;     address companyAddr;     address companyInfoAddr;      address applicantConAddr;     address[] operatorConAddrs;      address[] toIssueDraftAddrs;     address[] signedDraftAddrs;      address[] toIssueDraftAddrs_temp;     address[] signedDraftAddrs_temp;      address[] signOperationAddrs;     address[] signedOperationAddrs;     address[] issueOperationAddrs;     address[] transferOperations;     address[] cashOperationAddrs;     address[] tempOperationAddrs;      mapping(bytes32=>address) public applicantInfos;     bytes32[] applicantIDs;      function Applicant(address _bankConAddr,address _companyAddr,bytes32 _companyId,bytes32 _companyName,bytes32 _applicantId,bytes32 _applicantName){         bankConAddr = _bankConAddr;         companyAddr = _companyAddr;         companyInfoAddr = new UserInfo(_companyId,_companyName,"000","000","000");         addApplicant(_applicantId,_companyName,_applicantName);     }      function signDraft(bytes32 _draftNum,Draft.SignType _signType,uint _validDays,uint _frozenDays,uint _signTime,uint _value,bytes32 _sequenceNum,address _applicantConAddr,bytes32 _applicantId,address _operatorConAddr,uint16 _currencyType) returns(address,address){         applicantConAddr=_applicantConAddr;         Draft draft=new Draft(_draftNum,_signType,Draft.DraftState.UnIssue,_validDays,_frozenDays,360,_signTime,_value,applicantConAddr,_operatorConAddr,_currencyType);         return createSignOperation(_sequenceNum, _applicantId, _operatorConAddr, draft, _value, _signTime);     }      function createSignOperation(bytes32 _sequenceNum,bytes32 _applicantId,address _operatorConAddr,address draft,uint _value,uint _signTime) returns(address,address){         DraftOperation draftOperation=new DraftOperation(_sequenceNum,applicantConAddr,_applicantId,_operatorConAddr,"000",draft,draft,_value,_signTime,DraftOperation.OperationType.Sign);         Draft tempDraft = Draft(draft);         Operator operator = Operator(_operatorConAddr);          tempDraft.addDraftOperation(draftOperation);          signOperationAddrs.push(draftOperation);         toIssueDraftAddrs.push(draft);          operator.addToIssueDraft(draft);         return (draft,draftOperation);     }      function changeOperator(address _oldOperatorConAddr,address _newOperatorConAddr,address _draftAddr){         Draft draft=Draft(_draftAddr);         Operator newOperator=Operator(_newOperatorConAddr);         Operator oldOperator=Operator(_oldOperatorConAddr);          draft.setOperatorConAddr(_newOperatorConAddr);         newOperator.addSignedDraft(draft);         oldOperator.deleteSignedDraft(draft);     }      function transferSuccess(address _oldDraftAddr,address _newDraftAddr,address _fromOperatorConAddr,address _toApplicantConAddr,address _toOperatorConAddr,     address _draftOperationAddr,uint _operation3Time) returns(address,address){         updateDraftAndOperation(_oldDraftAddr, _newDraftAddr,_toApplicantConAddr,_toOperatorConAddr, _draftOperationAddr, _operation3Time,DraftOperation.OperationType.Transfer);          Operator fromOperator = Operator(_fromOperatorConAddr);         fromOperator.transferSuccess(_oldDraftAddr,_newDraftAddr);          if(_toApplicantConAddr == _toOperatorConAddr){             Individual individual = Individual(_toOperatorConAddr);             individual.signedDraftFromOperator(_newDraftAddr,_draftOperationAddr,DraftOperation.OperationType.Transfer);         }else{             Operator toOperator = Operator(_toOperatorConAddr);             toOperator.signedDraft(_newDraftAddr,_draftOperationAddr);         }          deleteAddr(tempOperationAddrs,_draftOperationAddr);         deleteToSignatureDraft( _toApplicantConAddr, _toOperatorConAddr, _newDraftAddr);         return (_newDraftAddr,_draftOperationAddr);     }      function updateDraftAndOperation(address _oldDraftAddr,address _newDraftAddr,address _newApplicantConAddr,address _newOperatorConAddr,address _draftOperationAddr,uint _operation3Time,DraftOperation.OperationType operationType){         Draft newDraft = Draft(_newDraftAddr);         DraftOperation draftOperation = DraftOperation(_draftOperationAddr);          deleteAddr(tempOperationAddrs,_draftOperationAddr);         draftOperation.setOperation3Time(_operation3Time);         draftOperation.setTxState(DraftOperation.TxState.Success);          newDraft.setState(Draft.DraftState.Signed);         newDraft.changeOwner(_newApplicantConAddr,_newOperatorConAddr);         if(_oldDraftAddr == _newDraftAddr){             if(operationType == DraftOperation.OperationType.Transfer){                 deleteAddr(signedDraftAddrs,_oldDraftAddr);             }else if(operationType == DraftOperation.OperationType.Issue){                 deleteAddr(toIssueDraftAddrs,_oldDraftAddr);             }         }else{             copyOperationAddr(_oldDraftAddr,_newDraftAddr,_draftOperationAddr);         }     }       function transferFail(address _oldDraftAddr,address _newDraftAddr,address _fromOperatorAddr,address _toApplicantConAddr,address _toOperatorConAddr,address _draftOperationAddr,uint _operation3Time) returns(bool){         DraftOperation draftOperation = DraftOperation(_draftOperationAddr);         Operator fromOperator = Operator(_fromOperatorAddr);         Draft oldDraft = Draft(_oldDraftAddr);         Draft newDraft = Draft(_newDraftAddr);          draftOperation.setTxState(DraftOperation.TxState.SignatureFail);         draftOperation.setOperation3Time(_operation3Time);         if(_oldDraftAddr == _newDraftAddr){             oldDraft.setState(Draft.DraftState.Signed);         }else{             newDraft.setState(Draft.DraftState.Invalid);         }         deleteAddr(tempOperationAddrs,_draftOperationAddr);         fromOperator.transferFailed(_oldDraftAddr,_newDraftAddr);          deleteToSignatureDraft( _toApplicantConAddr, _toOperatorConAddr, _newDraftAddr);     }      function issueSuccess_Signature(address _draftAddr,address _draftOperationAddr,uint _operation2Time) returns(bool){         Draft draft = Draft(_draftAddr);         draft.setState(Draft.DraftState.Issuing);         DraftOperation draftOperation = DraftOperation(_draftOperationAddr);         draftOperation.setOperation2Time(_operation2Time);         draftOperation.setTxState(DraftOperation.TxState.ToCharge);         return true;     }      function issueSuccess_PayMoney(address _oldDraftAddr,address _newDraftAddr,address _fromOperatorAddr,address _toApplicantConAddr,address _toOperatorConAddr,     address _draftOperationAddr,uint _operation3Time) returns(address,address){         updateDraftAndOperation(_oldDraftAddr, _newDraftAddr,_toApplicantConAddr,_toOperatorConAddr, _draftOperationAddr, _operation3Time,DraftOperation.OperationType.Issue);          Operator fromOperator = Operator(_fromOperatorAddr);         fromOperator.issueSuccess(_oldDraftAddr,_newDraftAddr);          if(_toApplicantConAddr == _toOperatorConAddr){             Individual individual = Individual(_toOperatorConAddr);             individual.signedDraftFromOperator(_newDraftAddr,_draftOperationAddr,DraftOperation.OperationType.Issue);         }else{             Operator toOperator = Operator(_toOperatorConAddr);             toOperator.signedDraft(_newDraftAddr,_draftOperationAddr);         }          deleteAddr(tempOperationAddrs,_draftOperationAddr);         deleteToSignatureDraft( _toApplicantConAddr, _toOperatorConAddr, _newDraftAddr);         return (_newDraftAddr,_draftOperationAddr);     }      function issueFail(address _oldDraftAddr,address _newDraftAddr,address _fromOperatorAddr,address _toApplicantAddr,address _toOperatorAddr,address _draftOperationAddr,DraftOperation.TxState draftOperationState){         DraftOperation draftOperation = DraftOperation(_draftOperationAddr);         Operator fromOperator = Operator(_fromOperatorAddr);         Draft oldDraft = Draft(_oldDraftAddr);         Draft newDraft = Draft(_newDraftAddr);          draftOperation.setTxState(draftOperationState);         if(_oldDraftAddr == _newDraftAddr){             oldDraft.setState(Draft.DraftState.UnIssue);         }else{             newDraft.setState(Draft.DraftState.Invalid);         }         deleteAddr(tempOperationAddrs,_draftOperationAddr);          fromOperator.issueFailed(_oldDraftAddr,_newDraftAddr);          deleteToSignatureDraft( _toApplicantAddr, _toOperatorAddr, _newDraftAddr);     }      function deleteToSignatureDraft(address _toApplicantAddr,address _toOperatorAddr,address _newDraftAddr){          if(_toApplicantAddr == _toOperatorAddr){             Individual individual = Individual(_toOperatorAddr);             individual.deleteToSignatureDraft(_newDraftAddr);         }else{             Operator toOperator = Operator(_toOperatorAddr);             toOperator.deleteToSignatureDraft(_newDraftAddr);         }     }      function addApplicant(bytes32 id,bytes32 companyName,bytes32 userName){         UserInfo userInfo=new UserInfo(id,companyName,userName,"000","000");         applicantInfos[id]=userInfo;         applicantIDs.push(id);     }      function deleteApplicant(bytes32 id){         applicantInfos[id] = 0x0;         deleteBytes32(applicantIDs,id);     }      function deleteBytes32(bytes32[] storage a,bytes32 id)internal{        uint position;        for(uint i=0;i<a.length;i++){            if(a[i]==id){               position=i;               break;            }            position++;        }        if(position!=a.length){            a[position]=a[a.length-1];            a.length=a.length-1;        }     }      function addOperation(address draftOperationAddr,DraftOperation.OperationType operationType){         if(operationType==DraftOperation.OperationType.Issue){             issueOperationAddrs.push(draftOperationAddr);         }else if(operationType==DraftOperation.OperationType.Transfer){             transferOperations.push(draftOperationAddr);         }else if(operationType==DraftOperation.OperationType.Cash){             cashOperationAddrs.push(draftOperationAddr);         }     }      function addOperator(address applicantConAddr,bytes32 id,bytes32 phoneNum,bytes32 idNum,bytes32 name) returns(address){         Operator operator=new Operator(bankConAddr,companyAddr,applicantConAddr,id,name,phoneNum,idNum);         operatorConAddrs.push(operator);         return operator;     }      function deleteOperator(address operatorConAddr)  returns(bool){         Operator operator=Operator(operatorConAddr);         if(operator.canBeDelete()==true){             deleteAddr(operatorConAddrs,operatorConAddr);             return true;         }else{             return false;         }     }      function addTempOperationAddrs(address tempOperationAddr){         tempOperationAddrs.push(tempOperationAddr);     }      function deleteTempOperation(address tempOperationAddr){         deleteAddr(tempOperationAddrs,tempOperationAddr);     }      function addSignedDraftAddr(address draftAddr){         signedDraftAddrs.push(draftAddr);     }      function deleteSignedDraftAddr(address draftAddr){         deleteAddr(signedDraftAddrs,draftAddr);     }      function getDrafts()constant returns(address[],address[]){         return (toIssueDraftAddrs,signedDraftAddrs);     }      function getDrafts_temp()constant returns(address[],address[]){         return (signedDraftAddrs_temp,signedDraftAddrs);     }       function getTempOperationAddrs()constant returns(address[]){         return tempOperationAddrs;     }      function getBills()constant returns(address[],address[],address[],address[],address[]){         return (signOperationAddrs,signedOperationAddrs,issueOperationAddrs,transferOperations,cashOperationAddrs);     }      function getOperatorConAddrs()constant returns(address[]){         return operatorConAddrs;     }      function getApplicantIDs()constant returns(bytes32[]){         return applicantIDs;     }     function getApplicantInfoAddr(bytes32 applicantId)constant returns(address){         return applicantInfos[applicantId];     }     function getCompanyInfoAddr() returns(address){         return companyInfoAddr;     } }'},
            {name: "abi-decoder-example", value: 'contract MyContract{ function MutiReturns()returns(uint32[],bytes32[],address[],string,int32){ uint32[] memory aa; bytes32[] memory bb; address[] memory cc; aa = new uint32[](3); aa[0] = 1; aa[1] = 2; aa[2] = 3; bb = new bytes32[](2); bb[0] = "holo"; bb[1] = "123"; cc = new address[](4); cc[0] = 0x1000; cc[1] = 0x1001; cc[2] = 0x1002; cc[3] = 0x1003; return (aa,bb,cc,"hello!",267); } }'},
            {name:"hello", value: 'contract HelloWorld{ string hello= "hello world"; function getHello() returns(string) { return hello; } }'},
            {name:"xiaomin", value: 'contract TestWeb3{ function testWeb3(bytes32 a,bytes32 b,bytes32 c,uint d) returns(bytes32,bytes32,bytes32,uint){ return (a,b,c,d); } }'},
            {name:"testArrary", value: 'contract hello{ function get(uint[] a, uint[] b) returns (uint[] c, uint[] d) {c=a;d=b;} function gett(int[3] b) returns (int[3]) {return b;}}'},
            {name:"testBool", value: 'contract testBool {function test(bool a) returns (bool) {return a;}}'}
        ],
        "CONTRACT": [],
        "FROM": "0x17d806c92fa941b4b7a8ffffc58fa2f297a3bffc",
        "PRIVKEY": "2411065a721b9dab5ba8f833aa317a2723bbe7e90e41000052f2d5799384b877",
        "STORAGE": "contracts"
    });